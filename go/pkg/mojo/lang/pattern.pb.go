// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mojo/lang/pattern.proto

package lang

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pattern struct {
	Val                  string   `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pattern) Reset()         { *m = Pattern{} }
func (m *Pattern) String() string { return proto.CompactTextString(m) }
func (*Pattern) ProtoMessage()    {}
func (*Pattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_5469a09d47c1fe69, []int{0}
}
func (m *Pattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pattern.Unmarshal(m, b)
}
func (m *Pattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pattern.Marshal(b, m, deterministic)
}
func (m *Pattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pattern.Merge(m, src)
}
func (m *Pattern) XXX_Size() int {
	return xxx_messageInfo_Pattern.Size(m)
}
func (m *Pattern) XXX_DiscardUnknown() {
	xxx_messageInfo_Pattern.DiscardUnknown(m)
}

var xxx_messageInfo_Pattern proto.InternalMessageInfo

func (m *Pattern) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func init() {
	proto.RegisterType((*Pattern)(nil), "mojo.lang.Pattern")
}

func init() { proto.RegisterFile("mojo/lang/pattern.proto", fileDescriptor_5469a09d47c1fe69) }

var fileDescriptor_5469a09d47c1fe69 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0xcd, 0xcf, 0xca,
	0xd7, 0xcf, 0x49, 0xcc, 0x4b, 0xd7, 0x2f, 0x48, 0x2c, 0x29, 0x49, 0x2d, 0xca, 0xd3, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x49, 0xe8, 0x81, 0x24, 0x94, 0xf4, 0xb8, 0xd8, 0x03, 0x20,
	0x72, 0x42, 0xca, 0x5c, 0xcc, 0x65, 0x89, 0x39, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0x82,
	0xaf, 0xee, 0xc9, 0xf3, 0x96, 0x25, 0xe6, 0xe8, 0xe4, 0xe7, 0x66, 0x96, 0xa4, 0xe6, 0x16, 0x94,
	0x54, 0x06, 0x81, 0x64, 0x9d, 0x22, 0xb9, 0xc4, 0xf2, 0x8b, 0xd2, 0xf5, 0x40, 0x06, 0x80, 0xf4,
	0xeb, 0xc1, 0x4d, 0x72, 0xe2, 0x81, 0x9a, 0x13, 0x00, 0xb2, 0x22, 0x80, 0x31, 0x4a, 0x3f, 0x3d,
	0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xa4, 0x4a, 0x17, 0xec, 0x10, 0x30,
	0x91, 0x9e, 0xaf, 0x5f, 0x90, 0x9d, 0xae, 0x0f, 0x77, 0x9e, 0x35, 0x88, 0x48, 0x62, 0x03, 0x3b,
	0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x15, 0xef, 0x80, 0xb7, 0x00, 0x00, 0x00,
}
