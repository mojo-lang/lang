// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package lang

import (
	"strconv"
)

var RelationTypeNames = map[int32]string{
	15:   "o2o",
	1:    "o2o_two_types",
	2:    "o2o_same_type",
	3:    "o2o_bidirectional",
	240:  "o2m",
	16:   "o2m_two_types",
	32:   "o2m_same_type",
	3840: "m2m",
	256:  "m2m_two_types",
	512:  "m2m_same_type",
	768:  "m2m_bidirectional",
}

var RelationTypeValues = map[string]RelationType{
	"o2o":               RelationType_RELATION_TYPE_O2O,
	"o2o_two_types":     RelationType_RELATION_TYPE_O2O_TWO_TYPES,
	"o2o_same_type":     RelationType_RELATION_TYPE_O2O_SAME_TYPE,
	"o2o_bidirectional": RelationType_RELATION_TYPE_O2O_BIDIRECTIONAL,
	"o2m":               RelationType_RELATION_TYPE_O2M,
	"o2m_two_types":     RelationType_RELATION_TYPE_O2M_TWO_TYPES,
	"o2m_same_type":     RelationType_RELATION_TYPE_O2M_SAME_TYPE,
	"m2m":               RelationType_RELATION_TYPE_M2M,
	"m2m_two_types":     RelationType_RELATION_TYPE_M2M_TWO_TYPES,
	"m2m_same_type":     RelationType_RELATION_TYPE_M2M_SAME_TYPE,
	"m2m_bidirectional": RelationType_RELATION_TYPE_M2M_BIDIRECTIONAL,
}

func (x RelationType) Format() string {
	s, ok := RelationTypeNames[int32(x)]
	if ok {
		return s
	}
	if int(x) == 0 {
		return "unspecified"
	}
	return strconv.Itoa(int(x))
}

func (x RelationType) ToString() string {
	return x.Format()
}

func (x *RelationType) Parse(value string) error {
	if x != nil {
		s, ok := RelationTypeValues[value]
		if ok {
			*x = s
		} else {
			*x = RelationType_RELATION_TYPE_O2O
		}
	} else {
		*x = RelationType_RELATION_TYPE_O2O
	}
	return nil
}

func ParseRelationType(value string) (RelationType, error) {
	var v RelationType
	if err := (&v).Parse(value); err != nil {
		return v, err
	}
	return v, nil
}
