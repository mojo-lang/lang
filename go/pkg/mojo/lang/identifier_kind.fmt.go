// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package lang

import (
	"strconv"
)

var IdentifierKindNames = map[int32]string{
	3:  "enum",
	4:  "struct",
	5:  "type-alias",
	6:  "interface",
	10: "constant",
	11: "variable",
	12: "attribute",
	13: "function",
	14: "generic-parameter",
	20: "type",
	21: "value",
}

var IdentifierKindValues = map[string]Identifier_Kind{
	"enum":              Identifier_KIND_ENUM,
	"struct":            Identifier_KIND_STRUCT,
	"type-alias":        Identifier_KIND_TYPE_ALIAS,
	"interface":         Identifier_KIND_INTERFACE,
	"constant":          Identifier_KIND_CONSTANT,
	"variable":          Identifier_KIND_VARIABLE,
	"attribute":         Identifier_KIND_ATTRIBUTE,
	"function":          Identifier_KIND_FUNCTION,
	"generic-parameter": Identifier_KIND_GENERIC_PARAMETER,
	"type":              Identifier_KIND_TYPE,
	"value":             Identifier_KIND_VALUE,
}

func (x Identifier_Kind) Format() string {
	s, ok := IdentifierKindNames[int32(x)]
	if ok {
		return s
	}
	if int(x) == 0 {
		return "unspecified"
	}
	return strconv.Itoa(int(x))
}

func (x *Identifier_Kind) Parse(value string) error {
	if x != nil {
		s, ok := IdentifierKindValues[value]
		if ok {
			*x = s
		} else {
			*x = Identifier_KIND_ENUM
		}
	} else {
		*x = Identifier_KIND_ENUM
	}
	return nil
}
