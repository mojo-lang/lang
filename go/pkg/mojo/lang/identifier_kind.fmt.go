// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package lang

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

var IdentifierKindNames = map[int32]string{
	0:  "unspecified",
	1:  "package",
	3:  "enum",
	4:  "struct",
	5:  "type-alias",
	6:  "interface",
	10: "constant",
	11: "variable",
	12: "attribute",
	13: "attribute-alias",
	14: "function",
	19: "generic-parameter",
}

var IdentifierKindValues = map[string]Identifier_Kind{
	"unspecified":       Identifier_KIND_UNSPECIFIED,
	"package":           Identifier_KIND_PACKAGE,
	"enum":              Identifier_KIND_ENUM,
	"struct":            Identifier_KIND_STRUCT,
	"type-alias":        Identifier_KIND_TYPE_ALIAS,
	"interface":         Identifier_KIND_INTERFACE,
	"constant":          Identifier_KIND_CONSTANT,
	"variable":          Identifier_KIND_VARIABLE,
	"attribute":         Identifier_KIND_ATTRIBUTE,
	"attribute-alias":   Identifier_KIND_ATTRIBUTE_ALIAS,
	"function":          Identifier_KIND_FUNCTION,
	"generic-parameter": Identifier_KIND_GENERIC_PARAMETER,
}

func (x Identifier_Kind) Format() string {
	v := int32(x)
	if s, ok := IdentifierKindNames[v]; ok {
		if v == 0 && "unspecified" == strings.ToLower(s) {
			return ""
		}
		return s
	}
	if v == 0 {
		return ""
	}
	return strconv.Itoa(int(v))
}

func (x Identifier_Kind) ToString() string {
	return x.Format()
}

func (x *Identifier_Kind) Parse(value string) error {
	if x != nil && len(value) > 0 {
		if s, ok := IdentifierKindValues[value]; ok {
			*x = s
		} else {
			v := core.CaseStyler("kebab")(value)
			if s, ok = IdentifierKindValues[v]; ok {
				*x = s
			} else {
				return fmt.Errorf("invalid Identifier_Kind: %s", value)
			}
		}
	}
	return nil
}

func ParseIdentifier_Kind(value string) (Identifier_Kind, error) {
	var v Identifier_Kind
	if err := (&v).Parse(value); err != nil {
		return v, err
	}
	return v, nil
}
