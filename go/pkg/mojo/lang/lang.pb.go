// Code generated by mojo. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: mojo/lang/lang.proto

package lang

import (
	_ "github.com/mojo-lang/core/go/pkg/mojo"
	core "github.com/mojo-lang/core/go/pkg/mojo/core"
	document "github.com/mojo-lang/document/go/pkg/mojo/document"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelationType int32

const (
	RelationType_RELATION_TYPE_UNSPECIFIED       RelationType = 0
	RelationType_RELATION_TYPE_O2O               RelationType = 15
	RelationType_RELATION_TYPE_O2O_TWO_TYPES     RelationType = 1
	RelationType_RELATION_TYPE_O2O_SAME_TYPE     RelationType = 2
	RelationType_RELATION_TYPE_O2O_BIDIRECTIONAL RelationType = 3
	RelationType_RELATION_TYPE_O2M               RelationType = 240
	RelationType_RELATION_TYPE_O2M_TWO_TYPES     RelationType = 16
	RelationType_RELATION_TYPE_O2M_SAME_TYPE     RelationType = 32
	RelationType_RELATION_TYPE_M2M               RelationType = 3840
	RelationType_RELATION_TYPE_M2M_TWO_TYPES     RelationType = 256
	RelationType_RELATION_TYPE_M2M_SAME_TYPE     RelationType = 512
	RelationType_RELATION_TYPE_M2M_BIDIRECTIONAL RelationType = 768
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		0:    "RELATION_TYPE_UNSPECIFIED",
		15:   "RELATION_TYPE_O2O",
		1:    "RELATION_TYPE_O2O_TWO_TYPES",
		2:    "RELATION_TYPE_O2O_SAME_TYPE",
		3:    "RELATION_TYPE_O2O_BIDIRECTIONAL",
		240:  "RELATION_TYPE_O2M",
		16:   "RELATION_TYPE_O2M_TWO_TYPES",
		32:   "RELATION_TYPE_O2M_SAME_TYPE",
		3840: "RELATION_TYPE_M2M",
		256:  "RELATION_TYPE_M2M_TWO_TYPES",
		512:  "RELATION_TYPE_M2M_SAME_TYPE",
		768:  "RELATION_TYPE_M2M_BIDIRECTIONAL",
	}
	RelationType_value = map[string]int32{
		"RELATION_TYPE_UNSPECIFIED":       0,
		"RELATION_TYPE_O2O":               15,
		"RELATION_TYPE_O2O_TWO_TYPES":     1,
		"RELATION_TYPE_O2O_SAME_TYPE":     2,
		"RELATION_TYPE_O2O_BIDIRECTIONAL": 3,
		"RELATION_TYPE_O2M":               240,
		"RELATION_TYPE_O2M_TWO_TYPES":     16,
		"RELATION_TYPE_O2M_SAME_TYPE":     32,
		"RELATION_TYPE_M2M":               3840,
		"RELATION_TYPE_M2M_TWO_TYPES":     256,
		"RELATION_TYPE_M2M_SAME_TYPE":     512,
		"RELATION_TYPE_M2M_BIDIRECTIONAL": 768,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_lang_lang_proto_enumTypes[0].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_mojo_lang_lang_proto_enumTypes[0]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{0}
}

type Identifier_Kind int32

const (
	Identifier_KIND_UNSPECIFIED       Identifier_Kind = 0
	Identifier_KIND_PACKAGE           Identifier_Kind = 1
	Identifier_KIND_ENUM              Identifier_Kind = 3
	Identifier_KIND_STRUCT            Identifier_Kind = 4
	Identifier_KIND_TYPE_ALIAS        Identifier_Kind = 5
	Identifier_KIND_INTERFACE         Identifier_Kind = 6
	Identifier_KIND_CONSTANT          Identifier_Kind = 10
	Identifier_KIND_VARIABLE          Identifier_Kind = 11
	Identifier_KIND_ATTRIBUTE         Identifier_Kind = 12
	Identifier_KIND_ATTRIBUTE_ALIAS   Identifier_Kind = 13
	Identifier_KIND_FUNCTION          Identifier_Kind = 14
	Identifier_KIND_GENERIC_PARAMETER Identifier_Kind = 19
)

// Enum value maps for Identifier_Kind.
var (
	Identifier_Kind_name = map[int32]string{
		0:  "KIND_UNSPECIFIED",
		1:  "KIND_PACKAGE",
		3:  "KIND_ENUM",
		4:  "KIND_STRUCT",
		5:  "KIND_TYPE_ALIAS",
		6:  "KIND_INTERFACE",
		10: "KIND_CONSTANT",
		11: "KIND_VARIABLE",
		12: "KIND_ATTRIBUTE",
		13: "KIND_ATTRIBUTE_ALIAS",
		14: "KIND_FUNCTION",
		19: "KIND_GENERIC_PARAMETER",
	}
	Identifier_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED":       0,
		"KIND_PACKAGE":           1,
		"KIND_ENUM":              3,
		"KIND_STRUCT":            4,
		"KIND_TYPE_ALIAS":        5,
		"KIND_INTERFACE":         6,
		"KIND_CONSTANT":          10,
		"KIND_VARIABLE":          11,
		"KIND_ATTRIBUTE":         12,
		"KIND_ATTRIBUTE_ALIAS":   13,
		"KIND_FUNCTION":          14,
		"KIND_GENERIC_PARAMETER": 19,
	}
)

func (x Identifier_Kind) Enum() *Identifier_Kind {
	p := new(Identifier_Kind)
	*p = x
	return p
}

func (x Identifier_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identifier_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_lang_lang_proto_enumTypes[1].Descriptor()
}

func (Identifier_Kind) Type() protoreflect.EnumType {
	return &file_mojo_lang_lang_proto_enumTypes[1]
}

func (x Identifier_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identifier_Kind.Descriptor instead.
func (Identifier_Kind) EnumDescriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{52, 0}
}

type Package_Requirement_Version_Type int32

const (
	Package_Requirement_Version_TYPE_CARET      Package_Requirement_Version_Type = 0
	Package_Requirement_Version_TYPE_TILDE      Package_Requirement_Version_Type = 1
	Package_Requirement_Version_TYPE_WILDCARD   Package_Requirement_Version_Type = 2
	Package_Requirement_Version_TYPE_COMPARISON Package_Requirement_Version_Type = 3
)

// Enum value maps for Package_Requirement_Version_Type.
var (
	Package_Requirement_Version_Type_name = map[int32]string{
		0: "TYPE_CARET",
		1: "TYPE_TILDE",
		2: "TYPE_WILDCARD",
		3: "TYPE_COMPARISON",
	}
	Package_Requirement_Version_Type_value = map[string]int32{
		"TYPE_CARET":      0,
		"TYPE_TILDE":      1,
		"TYPE_WILDCARD":   2,
		"TYPE_COMPARISON": 3,
	}
)

func (x Package_Requirement_Version_Type) Enum() *Package_Requirement_Version_Type {
	p := new(Package_Requirement_Version_Type)
	*p = x
	return p
}

func (x Package_Requirement_Version_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Package_Requirement_Version_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_lang_lang_proto_enumTypes[2].Descriptor()
}

func (Package_Requirement_Version_Type) Type() protoreflect.EnumType {
	return &file_mojo_lang_lang_proto_enumTypes[2]
}

func (x Package_Requirement_Version_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Package_Requirement_Version_Type.Descriptor instead.
func (Package_Requirement_Version_Type) EnumDescriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{70, 0, 0, 0}
}

type ApplyExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
}

func (x *ApplyExpr) Reset() {
	*x = ApplyExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyExpr) ProtoMessage() {}

func (x *ApplyExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyExpr.ProtoReflect.Descriptor instead.
func (*ApplyExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ApplyExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ApplyExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ApplyExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ApplyExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Label         string      `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
	Value         *Expression `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{1}
}

func (x *Argument) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Argument) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Argument) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Argument) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type ArrayLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position     `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position     `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32         `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool          `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Elements      []*Expression `protobuf:"bytes,20,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *ArrayLiteralExpr) Reset() {
	*x = ArrayLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayLiteralExpr) ProtoMessage() {}

func (x *ArrayLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayLiteralExpr.ProtoReflect.Descriptor instead.
func (*ArrayLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{2}
}

func (x *ArrayLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ArrayLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ArrayLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ArrayLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ArrayLiteralExpr) GetElements() []*Expression {
	if x != nil {
		return x.Elements
	}
	return nil
}

type AssignmentExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition     *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition       *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind              int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit          bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee            *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Operator          *Operator   `protobuf:"bytes,20,opt,name=operator,proto3" json:"operator,omitempty"`
	LeftHandArgument  *Expression `protobuf:"bytes,21,opt,name=left_hand_argument,json=leftHandArgument,proto3" json:"leftHandArgument,omitempty"`
	RightHandArgument *Expression `protobuf:"bytes,22,opt,name=right_hand_argument,json=rightHandArgument,proto3" json:"rightHandArgument,omitempty"`
}

func (x *AssignmentExpr) Reset() {
	*x = AssignmentExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentExpr) ProtoMessage() {}

func (x *AssignmentExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentExpr.ProtoReflect.Descriptor instead.
func (*AssignmentExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{3}
}

func (x *AssignmentExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *AssignmentExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *AssignmentExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *AssignmentExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *AssignmentExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *AssignmentExpr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *AssignmentExpr) GetLeftHandArgument() *Expression {
	if x != nil {
		return x.LeftHandArgument
	}
	return nil
}

func (x *AssignmentExpr) GetRightHandArgument() *Expression {
	if x != nil {
		return x.RightHandArgument
	}
	return nil
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition    *Position      `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition      *Position      `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Document         *Document      `protobuf:"bytes,4,opt,name=document,proto3" json:"document,omitempty"`
	Implicit         bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	PackageName      string         `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	Name             string         `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Fields           []string       `protobuf:"bytes,11,rep,name=fields,proto3" json:"fields,omitempty"`
	Declaration      *AttributeDecl `protobuf:"bytes,13,opt,name=declaration,proto3" json:"declaration,omitempty"`
	GenericArguments []*NominalType `protobuf:"bytes,15,rep,name=generic_arguments,json=genericArguments,proto3" json:"genericArguments,omitempty"`
	Arguments        []*Argument    `protobuf:"bytes,16,rep,name=arguments,proto3" json:"arguments,omitempty"`
	NamePosition     *Position      `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Value            *Expression    `protobuf:"bytes,20,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{4}
}

func (x *Attribute) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Attribute) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Attribute) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *Attribute) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *Attribute) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Attribute) GetDeclaration() *AttributeDecl {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *Attribute) GetGenericArguments() []*NominalType {
	if x != nil {
		return x.GenericArguments
	}
	return nil
}

func (x *Attribute) GetArguments() []*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Attribute) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *Attribute) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type AttributeAliasDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	FullName              string              `protobuf:"bytes,11,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Attribute             *Attribute          `protobuf:"bytes,20,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Scope                 *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *AttributeAliasDecl) Reset() {
	*x = AttributeAliasDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeAliasDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeAliasDecl) ProtoMessage() {}

func (x *AttributeAliasDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeAliasDecl.ProtoReflect.Descriptor instead.
func (*AttributeAliasDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{5}
}

func (x *AttributeAliasDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *AttributeAliasDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *AttributeAliasDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *AttributeAliasDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *AttributeAliasDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *AttributeAliasDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *AttributeAliasDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *AttributeAliasDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeAliasDecl) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *AttributeAliasDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AttributeAliasDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *AttributeAliasDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AttributeAliasDecl) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *AttributeAliasDecl) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *AttributeAliasDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *AttributeAliasDecl) GetAttribute() *Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *AttributeAliasDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type AttributeDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	FullName              string              `protobuf:"bytes,11,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	// Types that are assignable to Type:
	//	*AttributeDecl_NominalType
	//	*AttributeDecl_StructType
	Type         isAttributeDecl_Type `protobuf_oneof:"type" json:"type,omitempty"`
	DefaultValue *Expression          `protobuf:"bytes,22,opt,name=default_value,json=defaultValue,proto3" json:"defaultValue,omitempty"`
	Scope        *Scope               `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *AttributeDecl) Reset() {
	*x = AttributeDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDecl) ProtoMessage() {}

func (x *AttributeDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDecl.ProtoReflect.Descriptor instead.
func (*AttributeDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{6}
}

func (x *AttributeDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *AttributeDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *AttributeDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *AttributeDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *AttributeDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *AttributeDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *AttributeDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *AttributeDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeDecl) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *AttributeDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AttributeDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *AttributeDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AttributeDecl) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *AttributeDecl) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *AttributeDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (m *AttributeDecl) GetType() isAttributeDecl_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AttributeDecl) GetNominalType() *NominalType {
	if x, ok := x.GetType().(*AttributeDecl_NominalType); ok {
		return x.NominalType
	}
	return nil
}

func (x *AttributeDecl) GetStructType() *StructType {
	if x, ok := x.GetType().(*AttributeDecl_StructType); ok {
		return x.StructType
	}
	return nil
}

func (x *AttributeDecl) GetDefaultValue() *Expression {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *AttributeDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type isAttributeDecl_Type interface {
	isAttributeDecl_Type()
}

type AttributeDecl_NominalType struct {
	NominalType *NominalType `protobuf:"bytes,20,opt,name=nominal_type,json=nominalType,proto3,oneof" json:"nominalType,omitempty"`
}

type AttributeDecl_StructType struct {
	StructType *StructType `protobuf:"bytes,21,opt,name=struct_type,json=structType,proto3,oneof" json:"structType,omitempty"`
}

func (*AttributeDecl_NominalType) isAttributeDecl_Type() {}

func (*AttributeDecl_StructType) isAttributeDecl_Type() {}

type BinaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition     *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition       *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind              int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit          bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee            *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Operator          *Operator   `protobuf:"bytes,20,opt,name=operator,proto3" json:"operator,omitempty"`
	LeftHandArgument  *Expression `protobuf:"bytes,21,opt,name=left_hand_argument,json=leftHandArgument,proto3" json:"leftHandArgument,omitempty"`
	RightHandArgument *Expression `protobuf:"bytes,22,opt,name=right_hand_argument,json=rightHandArgument,proto3" json:"rightHandArgument,omitempty"`
}

func (x *BinaryExpr) Reset() {
	*x = BinaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpr) ProtoMessage() {}

func (x *BinaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpr.ProtoReflect.Descriptor instead.
func (*BinaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{7}
}

func (x *BinaryExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *BinaryExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *BinaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *BinaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *BinaryExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *BinaryExpr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *BinaryExpr) GetLeftHandArgument() *Expression {
	if x != nil {
		return x.LeftHandArgument
	}
	return nil
}

func (x *BinaryExpr) GetRightHandArgument() *Expression {
	if x != nil {
		return x.RightHandArgument
	}
	return nil
}

type BlockStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64        `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool         `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Statements    []*Statement `protobuf:"bytes,10,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *BlockStmt) Reset() {
	*x = BlockStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStmt) ProtoMessage() {}

func (x *BlockStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStmt.ProtoReflect.Descriptor instead.
func (*BlockStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{8}
}

func (x *BlockStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *BlockStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *BlockStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *BlockStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *BlockStmt) GetStatements() []*Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

type BoolLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value         bool      `protobuf:"varint,20,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolLiteralExpr) Reset() {
	*x = BoolLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolLiteralExpr) ProtoMessage() {}

func (x *BoolLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolLiteralExpr.ProtoReflect.Descriptor instead.
func (*BoolLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{9}
}

func (x *BoolLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *BoolLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *BoolLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *BoolLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *BoolLiteralExpr) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type BranchStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *BranchStmt) Reset() {
	*x = BranchStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchStmt) ProtoMessage() {}

func (x *BranchStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchStmt.ProtoReflect.Descriptor instead.
func (*BranchStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{10}
}

func (x *BranchStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *BranchStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *BranchStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *BranchStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type BreakStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *BreakStmt) Reset() {
	*x = BreakStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakStmt) ProtoMessage() {}

func (x *BreakStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakStmt.ProtoReflect.Descriptor instead.
func (*BreakStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{11}
}

func (x *BreakStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *BreakStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *BreakStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *BreakStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type ClosureExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition     *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition       *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit          bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document          *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName       string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName    string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition   *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name              string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	FullName          string              `protobuf:"bytes,11,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Attributes        []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing         *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	NamePosition      *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Signature         *FunctionSignature  `protobuf:"bytes,20,opt,name=signature,proto3" json:"signature,omitempty"`
	Body              *BlockStmt          `protobuf:"bytes,21,opt,name=body,proto3" json:"body,omitempty"`
	Receiver          *NominalType        `protobuf:"bytes,22,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Scope             *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
	InterfaceDecl     *InterfaceDecl      `protobuf:"bytes,31,opt,name=interface_decl,json=interfaceDecl,proto3" json:"interfaceDecl,omitempty"`
	Captures          []string            `protobuf:"bytes,40,rep,name=captures,proto3" json:"captures,omitempty"`
}

func (x *ClosureExpr) Reset() {
	*x = ClosureExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosureExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosureExpr) ProtoMessage() {}

func (x *ClosureExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosureExpr.ProtoReflect.Descriptor instead.
func (*ClosureExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{12}
}

func (x *ClosureExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ClosureExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ClosureExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ClosureExpr) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ClosureExpr) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ClosureExpr) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *ClosureExpr) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *ClosureExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClosureExpr) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ClosureExpr) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ClosureExpr) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *ClosureExpr) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *ClosureExpr) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *ClosureExpr) GetSignature() *FunctionSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ClosureExpr) GetBody() *BlockStmt {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ClosureExpr) GetReceiver() *NominalType {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *ClosureExpr) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ClosureExpr) GetInterfaceDecl() *InterfaceDecl {
	if x != nil {
		return x.InterfaceDecl
	}
	return nil
}

func (x *ClosureExpr) GetCaptures() []string {
	if x != nil {
		return x.Captures
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Comment:
	//	*Comment_BlockComment
	//	*Comment_MultiLineComment
	//	*Comment_LineBreakComment
	//	*Comment_Document
	Comment isComment_Comment `protobuf_oneof:"comment" json:"comment,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{13}
}

func (m *Comment) GetComment() isComment_Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (x *Comment) GetBlockComment() *BlockComment {
	if x, ok := x.GetComment().(*Comment_BlockComment); ok {
		return x.BlockComment
	}
	return nil
}

func (x *Comment) GetMultiLineComment() *MultiLineComment {
	if x, ok := x.GetComment().(*Comment_MultiLineComment); ok {
		return x.MultiLineComment
	}
	return nil
}

func (x *Comment) GetLineBreakComment() *LineBreakComment {
	if x, ok := x.GetComment().(*Comment_LineBreakComment); ok {
		return x.LineBreakComment
	}
	return nil
}

func (x *Comment) GetDocument() *Document {
	if x, ok := x.GetComment().(*Comment_Document); ok {
		return x.Document
	}
	return nil
}

type isComment_Comment interface {
	isComment_Comment()
}

type Comment_BlockComment struct {
	BlockComment *BlockComment `protobuf:"bytes,1,opt,name=block_comment,json=blockComment,proto3,oneof" json:"blockComment,omitempty"`
}

type Comment_MultiLineComment struct {
	MultiLineComment *MultiLineComment `protobuf:"bytes,2,opt,name=multi_line_comment,json=multiLineComment,proto3,oneof" json:"multiLineComment,omitempty"`
}

type Comment_LineBreakComment struct {
	LineBreakComment *LineBreakComment `protobuf:"bytes,3,opt,name=line_break_comment,json=lineBreakComment,proto3,oneof" json:"lineBreakComment,omitempty"`
}

type Comment_Document struct {
	Document *Document `protobuf:"bytes,4,opt,name=document,proto3,oneof" json:"document,omitempty"`
}

func (*Comment_BlockComment) isComment_Comment() {}

func (*Comment_MultiLineComment) isComment_Comment() {}

func (*Comment_LineBreakComment) isComment_Comment() {}

func (*Comment_Document) isComment_Comment() {}

type BlockComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Text          string    `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	HeadEmbeded   bool      `protobuf:"varint,13,opt,name=head_embeded,json=headEmbeded,proto3" json:"headEmbeded,omitempty"`
	TailEmbeded   bool      `protobuf:"varint,14,opt,name=tail_embeded,json=tailEmbeded,proto3" json:"tailEmbeded,omitempty"`
}

func (x *BlockComment) Reset() {
	*x = BlockComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockComment) ProtoMessage() {}

func (x *BlockComment) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockComment.ProtoReflect.Descriptor instead.
func (*BlockComment) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{14}
}

func (x *BlockComment) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *BlockComment) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *BlockComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BlockComment) GetHeadEmbeded() bool {
	if x != nil {
		return x.HeadEmbeded
	}
	return false
}

func (x *BlockComment) GetTailEmbeded() bool {
	if x != nil {
		return x.TailEmbeded
	}
	return false
}

type LineComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Following     bool      `protobuf:"varint,3,opt,name=following,proto3" json:"following,omitempty"`
	Text          string    `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *LineComment) Reset() {
	*x = LineComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineComment) ProtoMessage() {}

func (x *LineComment) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineComment.ProtoReflect.Descriptor instead.
func (*LineComment) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{15}
}

func (x *LineComment) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *LineComment) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *LineComment) GetFollowing() bool {
	if x != nil {
		return x.Following
	}
	return false
}

func (x *LineComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type MultiLineComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position      `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position      `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Lines         []*LineComment `protobuf:"bytes,10,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *MultiLineComment) Reset() {
	*x = MultiLineComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLineComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLineComment) ProtoMessage() {}

func (x *MultiLineComment) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLineComment.ProtoReflect.Descriptor instead.
func (*MultiLineComment) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{16}
}

func (x *MultiLineComment) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *MultiLineComment) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *MultiLineComment) GetLines() []*LineComment {
	if x != nil {
		return x.Lines
	}
	return nil
}

type LineBreakComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
}

func (x *LineBreakComment) Reset() {
	*x = LineBreakComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineBreakComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineBreakComment) ProtoMessage() {}

func (x *LineBreakComment) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineBreakComment.ProtoReflect.Descriptor instead.
func (*LineBreakComment) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{17}
}

func (x *LineBreakComment) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *LineBreakComment) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

type ConditionalExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Condition     *Expression `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
	ThenBranch    *Expression `protobuf:"bytes,11,opt,name=then_branch,json=thenBranch,proto3" json:"thenBranch,omitempty"`
	ElseBranch    *Expression `protobuf:"bytes,12,opt,name=else_branch,json=elseBranch,proto3" json:"elseBranch,omitempty"`
}

func (x *ConditionalExpr) Reset() {
	*x = ConditionalExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalExpr) ProtoMessage() {}

func (x *ConditionalExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalExpr.ProtoReflect.Descriptor instead.
func (*ConditionalExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{18}
}

func (x *ConditionalExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ConditionalExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ConditionalExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ConditionalExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ConditionalExpr) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ConditionalExpr) GetThenBranch() *Expression {
	if x != nil {
		return x.ThenBranch
	}
	return nil
}

func (x *ConditionalExpr) GetElseBranch() *Expression {
	if x != nil {
		return x.ElseBranch
	}
	return nil
}

type ConstantDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition   *Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition     *Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit        bool         `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document        *Document    `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName     string       `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName  string       `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition *Position    `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name            string       `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes      []*Attribute `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Group           *GroupDecl   `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	NamePosition    *Position    `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Type            *NominalType `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Initializer     *Initializer `protobuf:"bytes,21,opt,name=initializer,proto3" json:"initializer,omitempty"`
}

func (x *ConstantDecl) Reset() {
	*x = ConstantDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstantDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantDecl) ProtoMessage() {}

func (x *ConstantDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantDecl.ProtoReflect.Descriptor instead.
func (*ConstantDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{19}
}

func (x *ConstantDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ConstantDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ConstantDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ConstantDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ConstantDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ConstantDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *ConstantDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *ConstantDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConstantDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ConstantDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ConstantDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *ConstantDecl) GetType() *NominalType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ConstantDecl) GetInitializer() *Initializer {
	if x != nil {
		return x.Initializer
	}
	return nil
}

type ConstructorDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition     *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition       *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit          bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document          *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName       string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName    string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition   *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name              string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	FullName          string              `protobuf:"bytes,11,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Attributes        []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	NamePosition      *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Signature         *FunctionSignature  `protobuf:"bytes,20,opt,name=signature,proto3" json:"signature,omitempty"`
	Body              *BlockStmt          `protobuf:"bytes,21,opt,name=body,proto3" json:"body,omitempty"`
	Scope             *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ConstructorDecl) Reset() {
	*x = ConstructorDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstructorDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstructorDecl) ProtoMessage() {}

func (x *ConstructorDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstructorDecl.ProtoReflect.Descriptor instead.
func (*ConstructorDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{20}
}

func (x *ConstructorDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ConstructorDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ConstructorDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ConstructorDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ConstructorDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ConstructorDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *ConstructorDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *ConstructorDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConstructorDecl) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ConstructorDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ConstructorDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *ConstructorDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *ConstructorDecl) GetSignature() *FunctionSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ConstructorDecl) GetBody() *BlockStmt {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ConstructorDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type ContinueStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *ContinueStmt) Reset() {
	*x = ContinueStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueStmt) ProtoMessage() {}

func (x *ContinueStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueStmt.ProtoReflect.Descriptor instead.
func (*ContinueStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{21}
}

func (x *ContinueStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ContinueStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ContinueStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ContinueStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type ControlTransferStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *ControlTransferStmt) Reset() {
	*x = ControlTransferStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlTransferStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlTransferStmt) ProtoMessage() {}

func (x *ControlTransferStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlTransferStmt.ProtoReflect.Descriptor instead.
func (*ControlTransferStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{22}
}

func (x *ControlTransferStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ControlTransferStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ControlTransferStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ControlTransferStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type Decl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition   *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition     *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit        bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document        *Document `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName     string    `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName  string    `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition *Position `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
}

func (x *Decl) Reset() {
	*x = Decl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decl) ProtoMessage() {}

func (x *Decl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decl.ProtoReflect.Descriptor instead.
func (*Decl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{23}
}

func (x *Decl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Decl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Decl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *Decl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *Decl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Decl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *Decl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

type Declaration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Declaration:
	//	*Declaration_PackageDecl
	//	*Declaration_ImportDecl
	//	*Declaration_EnumDecl
	//	*Declaration_StructDecl
	//	*Declaration_TypeAliasDecl
	//	*Declaration_InterfaceDecl
	//	*Declaration_ConstantDecl
	//	*Declaration_VariableDecl
	//	*Declaration_AttributeDecl
	//	*Declaration_AttributeAliasDecl
	//	*Declaration_FunctionDecl
	//	*Declaration_ConstructorDecl
	//	*Declaration_GenericParameter
	//	*Declaration_GroupDecl
	Declaration isDeclaration_Declaration `protobuf_oneof:"declaration" json:"declaration,omitempty"`
}

func (x *Declaration) Reset() {
	*x = Declaration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Declaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Declaration) ProtoMessage() {}

func (x *Declaration) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Declaration.ProtoReflect.Descriptor instead.
func (*Declaration) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{24}
}

func (m *Declaration) GetDeclaration() isDeclaration_Declaration {
	if m != nil {
		return m.Declaration
	}
	return nil
}

func (x *Declaration) GetPackageDecl() *PackageDecl {
	if x, ok := x.GetDeclaration().(*Declaration_PackageDecl); ok {
		return x.PackageDecl
	}
	return nil
}

func (x *Declaration) GetImportDecl() *ImportDecl {
	if x, ok := x.GetDeclaration().(*Declaration_ImportDecl); ok {
		return x.ImportDecl
	}
	return nil
}

func (x *Declaration) GetEnumDecl() *EnumDecl {
	if x, ok := x.GetDeclaration().(*Declaration_EnumDecl); ok {
		return x.EnumDecl
	}
	return nil
}

func (x *Declaration) GetStructDecl() *StructDecl {
	if x, ok := x.GetDeclaration().(*Declaration_StructDecl); ok {
		return x.StructDecl
	}
	return nil
}

func (x *Declaration) GetTypeAliasDecl() *TypeAliasDecl {
	if x, ok := x.GetDeclaration().(*Declaration_TypeAliasDecl); ok {
		return x.TypeAliasDecl
	}
	return nil
}

func (x *Declaration) GetInterfaceDecl() *InterfaceDecl {
	if x, ok := x.GetDeclaration().(*Declaration_InterfaceDecl); ok {
		return x.InterfaceDecl
	}
	return nil
}

func (x *Declaration) GetConstantDecl() *ConstantDecl {
	if x, ok := x.GetDeclaration().(*Declaration_ConstantDecl); ok {
		return x.ConstantDecl
	}
	return nil
}

func (x *Declaration) GetVariableDecl() *VariableDecl {
	if x, ok := x.GetDeclaration().(*Declaration_VariableDecl); ok {
		return x.VariableDecl
	}
	return nil
}

func (x *Declaration) GetAttributeDecl() *AttributeDecl {
	if x, ok := x.GetDeclaration().(*Declaration_AttributeDecl); ok {
		return x.AttributeDecl
	}
	return nil
}

func (x *Declaration) GetAttributeAliasDecl() *AttributeAliasDecl {
	if x, ok := x.GetDeclaration().(*Declaration_AttributeAliasDecl); ok {
		return x.AttributeAliasDecl
	}
	return nil
}

func (x *Declaration) GetFunctionDecl() *FunctionDecl {
	if x, ok := x.GetDeclaration().(*Declaration_FunctionDecl); ok {
		return x.FunctionDecl
	}
	return nil
}

func (x *Declaration) GetConstructorDecl() *ConstructorDecl {
	if x, ok := x.GetDeclaration().(*Declaration_ConstructorDecl); ok {
		return x.ConstructorDecl
	}
	return nil
}

func (x *Declaration) GetGenericParameter() *GenericParameter {
	if x, ok := x.GetDeclaration().(*Declaration_GenericParameter); ok {
		return x.GenericParameter
	}
	return nil
}

func (x *Declaration) GetGroupDecl() *GroupDecl {
	if x, ok := x.GetDeclaration().(*Declaration_GroupDecl); ok {
		return x.GroupDecl
	}
	return nil
}

type isDeclaration_Declaration interface {
	isDeclaration_Declaration()
}

type Declaration_PackageDecl struct {
	PackageDecl *PackageDecl `protobuf:"bytes,1,opt,name=package_decl,json=packageDecl,proto3,oneof" json:"packageDecl,omitempty"`
}

type Declaration_ImportDecl struct {
	ImportDecl *ImportDecl `protobuf:"bytes,2,opt,name=import_decl,json=importDecl,proto3,oneof" json:"importDecl,omitempty"`
}

type Declaration_EnumDecl struct {
	EnumDecl *EnumDecl `protobuf:"bytes,3,opt,name=enum_decl,json=enumDecl,proto3,oneof" json:"enumDecl,omitempty"`
}

type Declaration_StructDecl struct {
	StructDecl *StructDecl `protobuf:"bytes,4,opt,name=struct_decl,json=structDecl,proto3,oneof" json:"structDecl,omitempty"`
}

type Declaration_TypeAliasDecl struct {
	TypeAliasDecl *TypeAliasDecl `protobuf:"bytes,5,opt,name=type_alias_decl,json=typeAliasDecl,proto3,oneof" json:"typeAliasDecl,omitempty"`
}

type Declaration_InterfaceDecl struct {
	InterfaceDecl *InterfaceDecl `protobuf:"bytes,6,opt,name=interface_decl,json=interfaceDecl,proto3,oneof" json:"interfaceDecl,omitempty"`
}

type Declaration_ConstantDecl struct {
	ConstantDecl *ConstantDecl `protobuf:"bytes,10,opt,name=constant_decl,json=constantDecl,proto3,oneof" json:"constantDecl,omitempty"`
}

type Declaration_VariableDecl struct {
	VariableDecl *VariableDecl `protobuf:"bytes,11,opt,name=variable_decl,json=variableDecl,proto3,oneof" json:"variableDecl,omitempty"`
}

type Declaration_AttributeDecl struct {
	AttributeDecl *AttributeDecl `protobuf:"bytes,12,opt,name=attribute_decl,json=attributeDecl,proto3,oneof" json:"attributeDecl,omitempty"`
}

type Declaration_AttributeAliasDecl struct {
	AttributeAliasDecl *AttributeAliasDecl `protobuf:"bytes,13,opt,name=attribute_alias_decl,json=attributeAliasDecl,proto3,oneof" json:"attributeAliasDecl,omitempty"`
}

type Declaration_FunctionDecl struct {
	FunctionDecl *FunctionDecl `protobuf:"bytes,14,opt,name=function_decl,json=functionDecl,proto3,oneof" json:"functionDecl,omitempty"`
}

type Declaration_ConstructorDecl struct {
	ConstructorDecl *ConstructorDecl `protobuf:"bytes,15,opt,name=constructor_decl,json=constructorDecl,proto3,oneof" json:"constructorDecl,omitempty"`
}

type Declaration_GenericParameter struct {
	GenericParameter *GenericParameter `protobuf:"bytes,19,opt,name=generic_parameter,json=genericParameter,proto3,oneof" json:"genericParameter,omitempty"`
}

type Declaration_GroupDecl struct {
	GroupDecl *GroupDecl `protobuf:"bytes,20,opt,name=group_decl,json=groupDecl,proto3,oneof" json:"groupDecl,omitempty"`
}

func (*Declaration_PackageDecl) isDeclaration_Declaration() {}

func (*Declaration_ImportDecl) isDeclaration_Declaration() {}

func (*Declaration_EnumDecl) isDeclaration_Declaration() {}

func (*Declaration_StructDecl) isDeclaration_Declaration() {}

func (*Declaration_TypeAliasDecl) isDeclaration_Declaration() {}

func (*Declaration_InterfaceDecl) isDeclaration_Declaration() {}

func (*Declaration_ConstantDecl) isDeclaration_Declaration() {}

func (*Declaration_VariableDecl) isDeclaration_Declaration() {}

func (*Declaration_AttributeDecl) isDeclaration_Declaration() {}

func (*Declaration_AttributeAliasDecl) isDeclaration_Declaration() {}

func (*Declaration_FunctionDecl) isDeclaration_Declaration() {}

func (*Declaration_ConstructorDecl) isDeclaration_Declaration() {}

func (*Declaration_GenericParameter) isDeclaration_Declaration() {}

func (*Declaration_GroupDecl) isDeclaration_Declaration() {}

type MapLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position               `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position               `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32                   `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool                    `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Entries       []*MapLiteralExpr_Entry `protobuf:"bytes,20,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *MapLiteralExpr) Reset() {
	*x = MapLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLiteralExpr) ProtoMessage() {}

func (x *MapLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLiteralExpr.ProtoReflect.Descriptor instead.
func (*MapLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{25}
}

func (x *MapLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *MapLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *MapLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *MapLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *MapLiteralExpr) GetEntries() []*MapLiteralExpr_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position          `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position          `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Following     bool               `protobuf:"varint,3,opt,name=following,proto3" json:"following,omitempty"`
	Private       bool               `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	Lines         []*Document_Line   `protobuf:"bytes,10,rep,name=lines,proto3" json:"lines,omitempty"`
	Structured    *document.Document `protobuf:"bytes,15,opt,name=structured,proto3" json:"structured,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{26}
}

func (x *Document) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Document) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Document) GetFollowing() bool {
	if x != nil {
		return x.Following
	}
	return false
}

func (x *Document) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Document) GetLines() []*Document_Line {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *Document) GetStructured() *document.Document {
	if x != nil {
		return x.Structured
	}
	return nil
}

type EntityEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Implicit       bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	From           *EntityNode `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
	To             *EntityNode `protobuf:"bytes,8,opt,name=to,proto3" json:"to,omitempty"`
	Inverse        bool        `protobuf:"varint,10,opt,name=inverse,proto3" json:"inverse,omitempty"`
	Multiple       bool        `protobuf:"varint,11,opt,name=multiple,proto3" json:"multiple,omitempty"`
	Required       bool        `protobuf:"varint,12,opt,name=required,proto3" json:"required,omitempty"`
	ReferenceByKey bool        `protobuf:"varint,19,opt,name=reference_by_key,json=referenceByKey,proto3" json:"referenceByKey,omitempty"`
	ReferenceField *ValueDecl  `protobuf:"bytes,20,opt,name=reference_field,json=referenceField,proto3" json:"referenceField,omitempty"`
}

func (x *EntityEdge) Reset() {
	*x = EntityEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityEdge) ProtoMessage() {}

func (x *EntityEdge) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityEdge.ProtoReflect.Descriptor instead.
func (*EntityEdge) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{27}
}

func (x *EntityEdge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EntityEdge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityEdge) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *EntityEdge) GetFrom() *EntityNode {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EntityEdge) GetTo() *EntityNode {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EntityEdge) GetInverse() bool {
	if x != nil {
		return x.Inverse
	}
	return false
}

func (x *EntityEdge) GetMultiple() bool {
	if x != nil {
		return x.Multiple
	}
	return false
}

func (x *EntityEdge) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *EntityEdge) GetReferenceByKey() bool {
	if x != nil {
		return x.ReferenceByKey
	}
	return false
}

func (x *EntityEdge) GetReferenceField() *ValueDecl {
	if x != nil {
		return x.ReferenceField
	}
	return nil
}

type EntityEdges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []*EntityEdge `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty"`
}

func (x *EntityEdges) Reset() {
	*x = EntityEdges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityEdges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityEdges) ProtoMessage() {}

func (x *EntityEdges) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityEdges.ProtoReflect.Descriptor instead.
func (*EntityEdges) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{28}
}

func (x *EntityEdges) GetVals() []*EntityEdge {
	if x != nil {
		return x.Vals
	}
	return nil
}

type EntityNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" db:"name,key=true" gorm:"primaryKey"`
	TypeDeclaration *TypeDeclaration `protobuf:"bytes,2,opt,name=type_declaration,json=typeDeclaration,proto3" json:"typeDeclaration,omitempty"`
	KeyField        *ValueDecl       `protobuf:"bytes,5,opt,name=key_field,json=keyField,proto3" json:"keyField,omitempty"`
}

func (x *EntityNode) Reset() {
	*x = EntityNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityNode) ProtoMessage() {}

func (x *EntityNode) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityNode.ProtoReflect.Descriptor instead.
func (*EntityNode) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{29}
}

func (x *EntityNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityNode) GetTypeDeclaration() *TypeDeclaration {
	if x != nil {
		return x.TypeDeclaration
	}
	return nil
}

func (x *EntityNode) GetKeyField() *ValueDecl {
	if x != nil {
		return x.KeyField
	}
	return nil
}

type EntityRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" db:"name,key=true" gorm:"primaryKey"`
	Type  RelationType  `protobuf:"varint,2,opt,name=type,proto3,enum=mojo.lang.RelationType" json:"type,omitempty"`
	From  *EntityNode   `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To    *EntityNode   `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Edges []*EntityEdge `protobuf:"bytes,10,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *EntityRelation) Reset() {
	*x = EntityRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRelation) ProtoMessage() {}

func (x *EntityRelation) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRelation.ProtoReflect.Descriptor instead.
func (*EntityRelation) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{30}
}

func (x *EntityRelation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityRelation) GetType() RelationType {
	if x != nil {
		return x.Type
	}
	return RelationType_RELATION_TYPE_UNSPECIFIED
}

func (x *EntityRelation) GetFrom() *EntityNode {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EntityRelation) GetTo() *EntityNode {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EntityRelation) GetEdges() []*EntityEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type EntityRelations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []*EntityRelation `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty"`
}

func (x *EntityRelations) Reset() {
	*x = EntityRelations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRelations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRelations) ProtoMessage() {}

func (x *EntityRelations) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRelations.ProtoReflect.Descriptor instead.
func (*EntityRelations) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{31}
}

func (x *EntityRelations) GetVals() []*EntityRelation {
	if x != nil {
		return x.Vals
	}
	return nil
}

type EntityRelationSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes         map[string]*EntityNode      `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Edges         map[string]*EntityEdge      `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Relations     map[string]*EntityRelation  `protobuf:"bytes,5,rep,name=relations,proto3" json:"relations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeEdges     map[string]*EntityEdges     `protobuf:"bytes,14,rep,name=node_edges,json=nodeEdges,proto3" json:"nodeEdges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeRelations map[string]*EntityRelations `protobuf:"bytes,15,rep,name=node_relations,json=nodeRelations,proto3" json:"nodeRelations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntityRelationSet) Reset() {
	*x = EntityRelationSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRelationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRelationSet) ProtoMessage() {}

func (x *EntityRelationSet) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRelationSet.ProtoReflect.Descriptor instead.
func (*EntityRelationSet) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{32}
}

func (x *EntityRelationSet) GetNodes() map[string]*EntityNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *EntityRelationSet) GetEdges() map[string]*EntityEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *EntityRelationSet) GetRelations() map[string]*EntityRelation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *EntityRelationSet) GetNodeEdges() map[string]*EntityEdges {
	if x != nil {
		return x.NodeEdges
	}
	return nil
}

func (x *EntityRelationSet) GetNodeRelations() map[string]*EntityRelations {
	if x != nil {
		return x.NodeRelations
	}
	return nil
}

type EnumDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing             *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Type                  *EnumType           `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Scope                 *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *EnumDecl) Reset() {
	*x = EnumDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumDecl) ProtoMessage() {}

func (x *EnumDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumDecl.ProtoReflect.Descriptor instead.
func (*EnumDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{33}
}

func (x *EnumDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *EnumDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *EnumDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *EnumDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *EnumDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *EnumDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *EnumDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *EnumDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnumDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *EnumDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *EnumDecl) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *EnumDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *EnumDecl) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *EnumDecl) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *EnumDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *EnumDecl) GetType() *EnumType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EnumDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type EnumType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition          *Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition            *Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Enumerators            []*ValueDecl `protobuf:"bytes,10,rep,name=enumerators,proto3" json:"enumerators,omitempty"`
	UnderlyingType         *NominalType `protobuf:"bytes,11,opt,name=underlying_type,json=underlyingType,proto3" json:"underlyingType,omitempty"`
	UnderlyingTypePosition *Position    `protobuf:"bytes,19,opt,name=underlying_type_position,json=underlyingTypePosition,proto3" json:"underlyingTypePosition,omitempty"`
}

func (x *EnumType) Reset() {
	*x = EnumType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumType) ProtoMessage() {}

func (x *EnumType) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumType.ProtoReflect.Descriptor instead.
func (*EnumType) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{34}
}

func (x *EnumType) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *EnumType) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *EnumType) GetEnumerators() []*ValueDecl {
	if x != nil {
		return x.Enumerators
	}
	return nil
}

func (x *EnumType) GetUnderlyingType() *NominalType {
	if x != nil {
		return x.UnderlyingType
	}
	return nil
}

func (x *EnumType) GetUnderlyingTypePosition() *Position {
	if x != nil {
		return x.UnderlyingTypePosition
	}
	return nil
}

type ErrorExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *ErrorExpr) Reset() {
	*x = ErrorExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorExpr) ProtoMessage() {}

func (x *ErrorExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorExpr.ProtoReflect.Descriptor instead.
func (*ErrorExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{35}
}

func (x *ErrorExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ErrorExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ErrorExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ErrorExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type ExplicitMemberExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Member        string      `protobuf:"bytes,20,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *ExplicitMemberExpr) Reset() {
	*x = ExplicitMemberExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitMemberExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitMemberExpr) ProtoMessage() {}

func (x *ExplicitMemberExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitMemberExpr.ProtoReflect.Descriptor instead.
func (*ExplicitMemberExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{36}
}

func (x *ExplicitMemberExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ExplicitMemberExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ExplicitMemberExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ExplicitMemberExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ExplicitMemberExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *ExplicitMemberExpr) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{37}
}

func (x *Expr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Expr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Expr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Expr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//	*Expression_NullLiteralExpr
	//	*Expression_IntegerLiteralExpr
	//	*Expression_FloatLiteralExpr
	//	*Expression_BoolLiteralExpr
	//	*Expression_StringLiteralExpr
	//	*Expression_ObjectLiteralExpr
	//	*Expression_ArrayLiteralExpr
	//	*Expression_MapLiteralExpr
	//	*Expression_RangeLiteralExpr
	//	*Expression_IdentifierExpr
	//	*Expression_NumericLiteralUnaryExpr
	//	*Expression_StringLiteralUnaryExpr
	//	*Expression_StructLiteralExpr
	//	*Expression_ClosureExpr
	//	*Expression_ParenthesizedExpr
	//	*Expression_ImplicitMemberExpr
	//	*Expression_WildcardExpr
	//	*Expression_StructConstructionExpr
	//	*Expression_TupleExpr
	//	*Expression_PrefixUnaryExpr
	//	*Expression_PostfixUnaryExpr
	//	*Expression_FunctionCallExpr
	//	*Expression_ExplicitMemberExpr
	//	*Expression_SubscriptExpr
	//	*Expression_BinaryExpr
	//	*Expression_ConditionalExpr
	//	*Expression_TypeCastingExpr
	//	*Expression_AssignmentExpr
	//	*Expression_ErrorExpr
	Expression isExpression_Expression `protobuf_oneof:"expression" json:"expression,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{38}
}

func (m *Expression) GetExpression() isExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *Expression) GetNullLiteralExpr() *NullLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_NullLiteralExpr); ok {
		return x.NullLiteralExpr
	}
	return nil
}

func (x *Expression) GetIntegerLiteralExpr() *IntegerLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_IntegerLiteralExpr); ok {
		return x.IntegerLiteralExpr
	}
	return nil
}

func (x *Expression) GetFloatLiteralExpr() *FloatLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_FloatLiteralExpr); ok {
		return x.FloatLiteralExpr
	}
	return nil
}

func (x *Expression) GetBoolLiteralExpr() *BoolLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_BoolLiteralExpr); ok {
		return x.BoolLiteralExpr
	}
	return nil
}

func (x *Expression) GetStringLiteralExpr() *StringLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_StringLiteralExpr); ok {
		return x.StringLiteralExpr
	}
	return nil
}

func (x *Expression) GetObjectLiteralExpr() *ObjectLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_ObjectLiteralExpr); ok {
		return x.ObjectLiteralExpr
	}
	return nil
}

func (x *Expression) GetArrayLiteralExpr() *ArrayLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_ArrayLiteralExpr); ok {
		return x.ArrayLiteralExpr
	}
	return nil
}

func (x *Expression) GetMapLiteralExpr() *MapLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_MapLiteralExpr); ok {
		return x.MapLiteralExpr
	}
	return nil
}

func (x *Expression) GetRangeLiteralExpr() *RangeLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_RangeLiteralExpr); ok {
		return x.RangeLiteralExpr
	}
	return nil
}

func (x *Expression) GetIdentifierExpr() *IdentifierExpr {
	if x, ok := x.GetExpression().(*Expression_IdentifierExpr); ok {
		return x.IdentifierExpr
	}
	return nil
}

func (x *Expression) GetNumericLiteralUnaryExpr() *NumericLiteralUnaryExpr {
	if x, ok := x.GetExpression().(*Expression_NumericLiteralUnaryExpr); ok {
		return x.NumericLiteralUnaryExpr
	}
	return nil
}

func (x *Expression) GetStringLiteralUnaryExpr() *StringLiteralUnaryExpr {
	if x, ok := x.GetExpression().(*Expression_StringLiteralUnaryExpr); ok {
		return x.StringLiteralUnaryExpr
	}
	return nil
}

func (x *Expression) GetStructLiteralExpr() *StructLiteralExpr {
	if x, ok := x.GetExpression().(*Expression_StructLiteralExpr); ok {
		return x.StructLiteralExpr
	}
	return nil
}

func (x *Expression) GetClosureExpr() *ClosureExpr {
	if x, ok := x.GetExpression().(*Expression_ClosureExpr); ok {
		return x.ClosureExpr
	}
	return nil
}

func (x *Expression) GetParenthesizedExpr() *ParenthesizedExpr {
	if x, ok := x.GetExpression().(*Expression_ParenthesizedExpr); ok {
		return x.ParenthesizedExpr
	}
	return nil
}

func (x *Expression) GetImplicitMemberExpr() *ImplicitMemberExpr {
	if x, ok := x.GetExpression().(*Expression_ImplicitMemberExpr); ok {
		return x.ImplicitMemberExpr
	}
	return nil
}

func (x *Expression) GetWildcardExpr() *WildcardExpr {
	if x, ok := x.GetExpression().(*Expression_WildcardExpr); ok {
		return x.WildcardExpr
	}
	return nil
}

func (x *Expression) GetStructConstructionExpr() *StructConstructionExpr {
	if x, ok := x.GetExpression().(*Expression_StructConstructionExpr); ok {
		return x.StructConstructionExpr
	}
	return nil
}

func (x *Expression) GetTupleExpr() *TupleExpr {
	if x, ok := x.GetExpression().(*Expression_TupleExpr); ok {
		return x.TupleExpr
	}
	return nil
}

func (x *Expression) GetPrefixUnaryExpr() *PrefixUnaryExpr {
	if x, ok := x.GetExpression().(*Expression_PrefixUnaryExpr); ok {
		return x.PrefixUnaryExpr
	}
	return nil
}

func (x *Expression) GetPostfixUnaryExpr() *PostfixUnaryExpr {
	if x, ok := x.GetExpression().(*Expression_PostfixUnaryExpr); ok {
		return x.PostfixUnaryExpr
	}
	return nil
}

func (x *Expression) GetFunctionCallExpr() *FunctionCallExpr {
	if x, ok := x.GetExpression().(*Expression_FunctionCallExpr); ok {
		return x.FunctionCallExpr
	}
	return nil
}

func (x *Expression) GetExplicitMemberExpr() *ExplicitMemberExpr {
	if x, ok := x.GetExpression().(*Expression_ExplicitMemberExpr); ok {
		return x.ExplicitMemberExpr
	}
	return nil
}

func (x *Expression) GetSubscriptExpr() *SubscriptExpr {
	if x, ok := x.GetExpression().(*Expression_SubscriptExpr); ok {
		return x.SubscriptExpr
	}
	return nil
}

func (x *Expression) GetBinaryExpr() *BinaryExpr {
	if x, ok := x.GetExpression().(*Expression_BinaryExpr); ok {
		return x.BinaryExpr
	}
	return nil
}

func (x *Expression) GetConditionalExpr() *ConditionalExpr {
	if x, ok := x.GetExpression().(*Expression_ConditionalExpr); ok {
		return x.ConditionalExpr
	}
	return nil
}

func (x *Expression) GetTypeCastingExpr() *TypeCastingExpr {
	if x, ok := x.GetExpression().(*Expression_TypeCastingExpr); ok {
		return x.TypeCastingExpr
	}
	return nil
}

func (x *Expression) GetAssignmentExpr() *AssignmentExpr {
	if x, ok := x.GetExpression().(*Expression_AssignmentExpr); ok {
		return x.AssignmentExpr
	}
	return nil
}

func (x *Expression) GetErrorExpr() *ErrorExpr {
	if x, ok := x.GetExpression().(*Expression_ErrorExpr); ok {
		return x.ErrorExpr
	}
	return nil
}

type isExpression_Expression interface {
	isExpression_Expression()
}

type Expression_NullLiteralExpr struct {
	NullLiteralExpr *NullLiteralExpr `protobuf:"bytes,1,opt,name=null_literal_expr,json=nullLiteralExpr,proto3,oneof" json:"nullLiteralExpr,omitempty"`
}

type Expression_IntegerLiteralExpr struct {
	IntegerLiteralExpr *IntegerLiteralExpr `protobuf:"bytes,2,opt,name=integer_literal_expr,json=integerLiteralExpr,proto3,oneof" json:"integerLiteralExpr,omitempty"`
}

type Expression_FloatLiteralExpr struct {
	FloatLiteralExpr *FloatLiteralExpr `protobuf:"bytes,3,opt,name=float_literal_expr,json=floatLiteralExpr,proto3,oneof" json:"floatLiteralExpr,omitempty"`
}

type Expression_BoolLiteralExpr struct {
	BoolLiteralExpr *BoolLiteralExpr `protobuf:"bytes,4,opt,name=bool_literal_expr,json=boolLiteralExpr,proto3,oneof" json:"boolLiteralExpr,omitempty"`
}

type Expression_StringLiteralExpr struct {
	StringLiteralExpr *StringLiteralExpr `protobuf:"bytes,5,opt,name=string_literal_expr,json=stringLiteralExpr,proto3,oneof" json:"stringLiteralExpr,omitempty"`
}

type Expression_ObjectLiteralExpr struct {
	ObjectLiteralExpr *ObjectLiteralExpr `protobuf:"bytes,6,opt,name=object_literal_expr,json=objectLiteralExpr,proto3,oneof" json:"objectLiteralExpr,omitempty"`
}

type Expression_ArrayLiteralExpr struct {
	ArrayLiteralExpr *ArrayLiteralExpr `protobuf:"bytes,7,opt,name=array_literal_expr,json=arrayLiteralExpr,proto3,oneof" json:"arrayLiteralExpr,omitempty"`
}

type Expression_MapLiteralExpr struct {
	MapLiteralExpr *MapLiteralExpr `protobuf:"bytes,8,opt,name=map_literal_expr,json=mapLiteralExpr,proto3,oneof" json:"mapLiteralExpr,omitempty"`
}

type Expression_RangeLiteralExpr struct {
	RangeLiteralExpr *RangeLiteralExpr `protobuf:"bytes,9,opt,name=range_literal_expr,json=rangeLiteralExpr,proto3,oneof" json:"rangeLiteralExpr,omitempty"`
}

type Expression_IdentifierExpr struct {
	IdentifierExpr *IdentifierExpr `protobuf:"bytes,10,opt,name=identifier_expr,json=identifierExpr,proto3,oneof" json:"identifierExpr,omitempty"`
}

type Expression_NumericLiteralUnaryExpr struct {
	NumericLiteralUnaryExpr *NumericLiteralUnaryExpr `protobuf:"bytes,11,opt,name=numeric_literal_unary_expr,json=numericLiteralUnaryExpr,proto3,oneof" json:"numericLiteralUnaryExpr,omitempty"`
}

type Expression_StringLiteralUnaryExpr struct {
	StringLiteralUnaryExpr *StringLiteralUnaryExpr `protobuf:"bytes,12,opt,name=string_literal_unary_expr,json=stringLiteralUnaryExpr,proto3,oneof" json:"stringLiteralUnaryExpr,omitempty"`
}

type Expression_StructLiteralExpr struct {
	StructLiteralExpr *StructLiteralExpr `protobuf:"bytes,13,opt,name=struct_literal_expr,json=structLiteralExpr,proto3,oneof" json:"structLiteralExpr,omitempty"`
}

type Expression_ClosureExpr struct {
	ClosureExpr *ClosureExpr `protobuf:"bytes,14,opt,name=closure_expr,json=closureExpr,proto3,oneof" json:"closureExpr,omitempty"`
}

type Expression_ParenthesizedExpr struct {
	ParenthesizedExpr *ParenthesizedExpr `protobuf:"bytes,15,opt,name=parenthesized_expr,json=parenthesizedExpr,proto3,oneof" json:"parenthesizedExpr,omitempty"`
}

type Expression_ImplicitMemberExpr struct {
	ImplicitMemberExpr *ImplicitMemberExpr `protobuf:"bytes,16,opt,name=implicit_member_expr,json=implicitMemberExpr,proto3,oneof" json:"implicitMemberExpr,omitempty"`
}

type Expression_WildcardExpr struct {
	WildcardExpr *WildcardExpr `protobuf:"bytes,17,opt,name=wildcard_expr,json=wildcardExpr,proto3,oneof" json:"wildcardExpr,omitempty"`
}

type Expression_StructConstructionExpr struct {
	StructConstructionExpr *StructConstructionExpr `protobuf:"bytes,18,opt,name=struct_construction_expr,json=structConstructionExpr,proto3,oneof" json:"structConstructionExpr,omitempty"`
}

type Expression_TupleExpr struct {
	TupleExpr *TupleExpr `protobuf:"bytes,19,opt,name=tuple_expr,json=tupleExpr,proto3,oneof" json:"tupleExpr,omitempty"`
}

type Expression_PrefixUnaryExpr struct {
	PrefixUnaryExpr *PrefixUnaryExpr `protobuf:"bytes,30,opt,name=prefix_unary_expr,json=prefixUnaryExpr,proto3,oneof" json:"prefixUnaryExpr,omitempty"`
}

type Expression_PostfixUnaryExpr struct {
	PostfixUnaryExpr *PostfixUnaryExpr `protobuf:"bytes,31,opt,name=postfix_unary_expr,json=postfixUnaryExpr,proto3,oneof" json:"postfixUnaryExpr,omitempty"`
}

type Expression_FunctionCallExpr struct {
	FunctionCallExpr *FunctionCallExpr `protobuf:"bytes,32,opt,name=function_call_expr,json=functionCallExpr,proto3,oneof" json:"functionCallExpr,omitempty"`
}

type Expression_ExplicitMemberExpr struct {
	ExplicitMemberExpr *ExplicitMemberExpr `protobuf:"bytes,33,opt,name=explicit_member_expr,json=explicitMemberExpr,proto3,oneof" json:"explicitMemberExpr,omitempty"`
}

type Expression_SubscriptExpr struct {
	SubscriptExpr *SubscriptExpr `protobuf:"bytes,34,opt,name=subscript_expr,json=subscriptExpr,proto3,oneof" json:"subscriptExpr,omitempty"`
}

type Expression_BinaryExpr struct {
	BinaryExpr *BinaryExpr `protobuf:"bytes,40,opt,name=binary_expr,json=binaryExpr,proto3,oneof" json:"binaryExpr,omitempty"`
}

type Expression_ConditionalExpr struct {
	ConditionalExpr *ConditionalExpr `protobuf:"bytes,41,opt,name=conditional_expr,json=conditionalExpr,proto3,oneof" json:"conditionalExpr,omitempty"`
}

type Expression_TypeCastingExpr struct {
	TypeCastingExpr *TypeCastingExpr `protobuf:"bytes,42,opt,name=type_casting_expr,json=typeCastingExpr,proto3,oneof" json:"typeCastingExpr,omitempty"`
}

type Expression_AssignmentExpr struct {
	AssignmentExpr *AssignmentExpr `protobuf:"bytes,43,opt,name=assignment_expr,json=assignmentExpr,proto3,oneof" json:"assignmentExpr,omitempty"`
}

type Expression_ErrorExpr struct {
	ErrorExpr *ErrorExpr `protobuf:"bytes,60,opt,name=error_expr,json=errorExpr,proto3,oneof" json:"errorExpr,omitempty"`
}

func (*Expression_NullLiteralExpr) isExpression_Expression() {}

func (*Expression_IntegerLiteralExpr) isExpression_Expression() {}

func (*Expression_FloatLiteralExpr) isExpression_Expression() {}

func (*Expression_BoolLiteralExpr) isExpression_Expression() {}

func (*Expression_StringLiteralExpr) isExpression_Expression() {}

func (*Expression_ObjectLiteralExpr) isExpression_Expression() {}

func (*Expression_ArrayLiteralExpr) isExpression_Expression() {}

func (*Expression_MapLiteralExpr) isExpression_Expression() {}

func (*Expression_RangeLiteralExpr) isExpression_Expression() {}

func (*Expression_IdentifierExpr) isExpression_Expression() {}

func (*Expression_NumericLiteralUnaryExpr) isExpression_Expression() {}

func (*Expression_StringLiteralUnaryExpr) isExpression_Expression() {}

func (*Expression_StructLiteralExpr) isExpression_Expression() {}

func (*Expression_ClosureExpr) isExpression_Expression() {}

func (*Expression_ParenthesizedExpr) isExpression_Expression() {}

func (*Expression_ImplicitMemberExpr) isExpression_Expression() {}

func (*Expression_WildcardExpr) isExpression_Expression() {}

func (*Expression_StructConstructionExpr) isExpression_Expression() {}

func (*Expression_TupleExpr) isExpression_Expression() {}

func (*Expression_PrefixUnaryExpr) isExpression_Expression() {}

func (*Expression_PostfixUnaryExpr) isExpression_Expression() {}

func (*Expression_FunctionCallExpr) isExpression_Expression() {}

func (*Expression_ExplicitMemberExpr) isExpression_Expression() {}

func (*Expression_SubscriptExpr) isExpression_Expression() {}

func (*Expression_BinaryExpr) isExpression_Expression() {}

func (*Expression_ConditionalExpr) isExpression_Expression() {}

func (*Expression_TypeCastingExpr) isExpression_Expression() {}

func (*Expression_AssignmentExpr) isExpression_Expression() {}

func (*Expression_ErrorExpr) isExpression_Expression() {}

type DynamicLookupExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *DynamicLookupExpr) Reset() {
	*x = DynamicLookupExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicLookupExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicLookupExpr) ProtoMessage() {}

func (x *DynamicLookupExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicLookupExpr.ProtoReflect.Descriptor instead.
func (*DynamicLookupExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{39}
}

func (x *DynamicLookupExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *DynamicLookupExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *DynamicLookupExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *DynamicLookupExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type UnresolvedMemberExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnresolvedMemberExpr) Reset() {
	*x = UnresolvedMemberExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnresolvedMemberExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnresolvedMemberExpr) ProtoMessage() {}

func (x *UnresolvedMemberExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnresolvedMemberExpr.ProtoReflect.Descriptor instead.
func (*UnresolvedMemberExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{40}
}

type IdentityExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *IdentityExpr) Reset() {
	*x = IdentityExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityExpr) ProtoMessage() {}

func (x *IdentityExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityExpr.ProtoReflect.Descriptor instead.
func (*IdentityExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{41}
}

func (x *IdentityExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *IdentityExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *IdentityExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *IdentityExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type KeyPathApplicationExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *KeyPathApplicationExpr) Reset() {
	*x = KeyPathApplicationExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPathApplicationExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPathApplicationExpr) ProtoMessage() {}

func (x *KeyPathApplicationExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPathApplicationExpr.ProtoReflect.Descriptor instead.
func (*KeyPathApplicationExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{42}
}

func (x *KeyPathApplicationExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *KeyPathApplicationExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *KeyPathApplicationExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *KeyPathApplicationExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type TupleElementExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *TupleElementExpr) Reset() {
	*x = TupleElementExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleElementExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleElementExpr) ProtoMessage() {}

func (x *TupleElementExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleElementExpr.ProtoReflect.Descriptor instead.
func (*TupleElementExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{43}
}

func (x *TupleElementExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *TupleElementExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *TupleElementExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *TupleElementExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type KeyPathExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyPathExpr) Reset() {
	*x = KeyPathExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPathExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPathExpr) ProtoMessage() {}

func (x *KeyPathExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPathExpr.ProtoReflect.Descriptor instead.
func (*KeyPathExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{44}
}

type FloatLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	IsNegative    bool      `protobuf:"varint,20,opt,name=is_negative,json=isNegative,proto3" json:"isNegative,omitempty"`
	Value         float64   `protobuf:"fixed64,30,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FloatLiteralExpr) Reset() {
	*x = FloatLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatLiteralExpr) ProtoMessage() {}

func (x *FloatLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatLiteralExpr.ProtoReflect.Descriptor instead.
func (*FloatLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{45}
}

func (x *FloatLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *FloatLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *FloatLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *FloatLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *FloatLiteralExpr) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

func (x *FloatLiteralExpr) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ForStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Body          *BlockStmt  `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	Iterator      *Expression `protobuf:"bytes,20,opt,name=iterator,proto3" json:"iterator,omitempty"`
	Sequence      *Expression `protobuf:"bytes,21,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *ForStmt) Reset() {
	*x = ForStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForStmt) ProtoMessage() {}

func (x *ForStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForStmt.ProtoReflect.Descriptor instead.
func (*ForStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{46}
}

func (x *ForStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ForStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ForStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ForStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ForStmt) GetBody() *BlockStmt {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ForStmt) GetIterator() *Expression {
	if x != nil {
		return x.Iterator
	}
	return nil
}

func (x *ForStmt) GetSequence() *Expression {
	if x != nil {
		return x.Sequence
	}
	return nil
}

type FunctionCallExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition    *Position      `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition      *Position      `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind             int32          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit         bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee           *Expression    `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	GenericArguments []*NominalType `protobuf:"bytes,15,rep,name=generic_arguments,json=genericArguments,proto3" json:"genericArguments,omitempty"`
	Arguments        []*Argument    `protobuf:"bytes,16,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *FunctionCallExpr) Reset() {
	*x = FunctionCallExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCallExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallExpr) ProtoMessage() {}

func (x *FunctionCallExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallExpr.ProtoReflect.Descriptor instead.
func (*FunctionCallExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{47}
}

func (x *FunctionCallExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *FunctionCallExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *FunctionCallExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *FunctionCallExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *FunctionCallExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *FunctionCallExpr) GetGenericArguments() []*NominalType {
	if x != nil {
		return x.GenericArguments
	}
	return nil
}

func (x *FunctionCallExpr) GetArguments() []*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type FunctionDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition     *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition       *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit          bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document          *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName       string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName    string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition   *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name              string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	FullName          string              `protobuf:"bytes,11,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Attributes        []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing         *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	NamePosition      *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Signature         *FunctionSignature  `protobuf:"bytes,20,opt,name=signature,proto3" json:"signature,omitempty"`
	Body              *BlockStmt          `protobuf:"bytes,21,opt,name=body,proto3" json:"body,omitempty"`
	Receiver          *NominalType        `protobuf:"bytes,22,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Scope             *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
	InterfaceDecl     *InterfaceDecl      `protobuf:"bytes,31,opt,name=interface_decl,json=interfaceDecl,proto3" json:"interfaceDecl,omitempty"`
}

func (x *FunctionDecl) Reset() {
	*x = FunctionDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionDecl) ProtoMessage() {}

func (x *FunctionDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionDecl.ProtoReflect.Descriptor instead.
func (*FunctionDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{48}
}

func (x *FunctionDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *FunctionDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *FunctionDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *FunctionDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *FunctionDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *FunctionDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *FunctionDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *FunctionDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionDecl) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *FunctionDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FunctionDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *FunctionDecl) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *FunctionDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *FunctionDecl) GetSignature() *FunctionSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *FunctionDecl) GetBody() *BlockStmt {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *FunctionDecl) GetReceiver() *NominalType {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *FunctionDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *FunctionDecl) GetInterfaceDecl() *InterfaceDecl {
	if x != nil {
		return x.InterfaceDecl
	}
	return nil
}

type FunctionSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position                    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position                    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Parameter     *FunctionSignature_Parameter `protobuf:"bytes,10,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Result        *FunctionSignature_Result    `protobuf:"bytes,11,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FunctionSignature) Reset() {
	*x = FunctionSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionSignature) ProtoMessage() {}

func (x *FunctionSignature) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionSignature.ProtoReflect.Descriptor instead.
func (*FunctionSignature) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{49}
}

func (x *FunctionSignature) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *FunctionSignature) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *FunctionSignature) GetParameter() *FunctionSignature_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *FunctionSignature) GetResult() *FunctionSignature_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type GenericParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing             *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Constraint            *NominalType        `protobuf:"bytes,20,opt,name=constraint,proto3" json:"constraint,omitempty"`
}

func (x *GenericParameter) Reset() {
	*x = GenericParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericParameter) ProtoMessage() {}

func (x *GenericParameter) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericParameter.ProtoReflect.Descriptor instead.
func (*GenericParameter) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{50}
}

func (x *GenericParameter) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *GenericParameter) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *GenericParameter) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *GenericParameter) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *GenericParameter) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *GenericParameter) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *GenericParameter) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *GenericParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenericParameter) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GenericParameter) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *GenericParameter) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *GenericParameter) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GenericParameter) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *GenericParameter) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *GenericParameter) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *GenericParameter) GetConstraint() *NominalType {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type GroupDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition   *Position       `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition     *Position       `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit        bool            `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document        *Document       `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName     string          `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName  string          `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition *Position       `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name            string          `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes      []*Attribute    `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Type            Identifier_Kind `protobuf:"varint,20,opt,name=type,proto3,enum=mojo.lang.Identifier_Kind" json:"type,omitempty"`
	Declarations    []*Declaration  `protobuf:"bytes,21,rep,name=declarations,proto3" json:"declarations,omitempty"`
}

func (x *GroupDecl) Reset() {
	*x = GroupDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDecl) ProtoMessage() {}

func (x *GroupDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDecl.ProtoReflect.Descriptor instead.
func (*GroupDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{51}
}

func (x *GroupDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *GroupDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *GroupDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *GroupDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *GroupDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *GroupDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *GroupDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *GroupDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GroupDecl) GetType() Identifier_Kind {
	if x != nil {
		return x.Type
	}
	return Identifier_KIND_UNSPECIFIED
}

func (x *GroupDecl) GetDeclarations() []*Declaration {
	if x != nil {
		return x.Declarations
	}
	return nil
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition  *Position       `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition    *Position       `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind           Identifier_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=mojo.lang.Identifier_Kind" json:"kind,omitempty"`
	Implicit       bool            `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	SourceFileName string          `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	PackageName    string          `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	Name           string          `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	FullName       string          `protobuf:"bytes,11,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Alias          string          `protobuf:"bytes,12,opt,name=alias,proto3" json:"alias,omitempty"`
	Declaration    *Declaration    `protobuf:"bytes,13,opt,name=declaration,proto3" json:"declaration,omitempty"`
	Enclosing      *Identifier     `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	Scope          *Scope          `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{52}
}

func (x *Identifier) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Identifier) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Identifier) GetKind() Identifier_Kind {
	if x != nil {
		return x.Kind
	}
	return Identifier_KIND_UNSPECIFIED
}

func (x *Identifier) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *Identifier) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *Identifier) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identifier) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Identifier) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Identifier) GetDeclaration() *Declaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *Identifier) GetEnclosing() *Identifier {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *Identifier) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type IdentifierExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition    *Position      `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition      *Position      `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind             int32          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit         bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Identifier       *Identifier    `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	GenericArguments []*NominalType `protobuf:"bytes,15,rep,name=generic_arguments,json=genericArguments,proto3" json:"genericArguments,omitempty"`
}

func (x *IdentifierExpr) Reset() {
	*x = IdentifierExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierExpr) ProtoMessage() {}

func (x *IdentifierExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierExpr.ProtoReflect.Descriptor instead.
func (*IdentifierExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{53}
}

func (x *IdentifierExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *IdentifierExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *IdentifierExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *IdentifierExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *IdentifierExpr) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *IdentifierExpr) GetGenericArguments() []*NominalType {
	if x != nil {
		return x.GenericArguments
	}
	return nil
}

type IfStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Condition     *Expression `protobuf:"bytes,20,opt,name=condition,proto3" json:"condition,omitempty"`
	ThenBranch    *BlockStmt  `protobuf:"bytes,21,opt,name=then_branch,json=thenBranch,proto3" json:"thenBranch,omitempty"`
	// Types that are assignable to ElseBranch:
	//	*IfStmt_BlockStmt
	//	*IfStmt_IfStmt
	ElseBranch isIfStmt_ElseBranch `protobuf_oneof:"else_branch" json:"elseBranch,omitempty"`
}

func (x *IfStmt) Reset() {
	*x = IfStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfStmt) ProtoMessage() {}

func (x *IfStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfStmt.ProtoReflect.Descriptor instead.
func (*IfStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{54}
}

func (x *IfStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *IfStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *IfStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *IfStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *IfStmt) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *IfStmt) GetThenBranch() *BlockStmt {
	if x != nil {
		return x.ThenBranch
	}
	return nil
}

func (m *IfStmt) GetElseBranch() isIfStmt_ElseBranch {
	if m != nil {
		return m.ElseBranch
	}
	return nil
}

func (x *IfStmt) GetBlockStmt() *BlockStmt {
	if x, ok := x.GetElseBranch().(*IfStmt_BlockStmt); ok {
		return x.BlockStmt
	}
	return nil
}

func (x *IfStmt) GetIfStmt() *IfStmt {
	if x, ok := x.GetElseBranch().(*IfStmt_IfStmt); ok {
		return x.IfStmt
	}
	return nil
}

type isIfStmt_ElseBranch interface {
	isIfStmt_ElseBranch()
}

type IfStmt_BlockStmt struct {
	BlockStmt *BlockStmt `protobuf:"bytes,22,opt,name=block_stmt,json=blockStmt,proto3,oneof" json:"blockStmt,omitempty"`
}

type IfStmt_IfStmt struct {
	IfStmt *IfStmt `protobuf:"bytes,23,opt,name=if_stmt,json=ifStmt,proto3,oneof" json:"ifStmt,omitempty"`
}

func (*IfStmt_BlockStmt) isIfStmt_ElseBranch() {}

func (*IfStmt_IfStmt) isIfStmt_ElseBranch() {}

type ImplicitMemberExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *ImplicitMemberExpr) Reset() {
	*x = ImplicitMemberExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplicitMemberExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplicitMemberExpr) ProtoMessage() {}

func (x *ImplicitMemberExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplicitMemberExpr.ProtoReflect.Descriptor instead.
func (*ImplicitMemberExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{55}
}

func (x *ImplicitMemberExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ImplicitMemberExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ImplicitMemberExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ImplicitMemberExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type ImportDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition      *Position     `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition        *Position     `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit           bool          `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document           *Document     `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName        string        `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName     string        `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition    *Position     `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Filter             string        `protobuf:"bytes,11,opt,name=filter,proto3" json:"filter,omitempty"`
	Attributes         []*Attribute  `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	ImportPackageName  string        `protobuf:"bytes,13,opt,name=import_package_name,json=importPackageName,proto3" json:"importPackageName,omitempty"`
	ImportPackageAlias string        `protobuf:"bytes,14,opt,name=import_package_alias,json=importPackageAlias,proto3" json:"importPackageAlias,omitempty"`
	ImportFileName     string        `protobuf:"bytes,15,opt,name=import_file_name,json=importFileName,proto3" json:"importFileName,omitempty"`
	Identifiers        []*Identifier `protobuf:"bytes,16,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
}

func (x *ImportDecl) Reset() {
	*x = ImportDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDecl) ProtoMessage() {}

func (x *ImportDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDecl.ProtoReflect.Descriptor instead.
func (*ImportDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{56}
}

func (x *ImportDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ImportDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ImportDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ImportDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ImportDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ImportDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *ImportDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *ImportDecl) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ImportDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ImportDecl) GetImportPackageName() string {
	if x != nil {
		return x.ImportPackageName
	}
	return ""
}

func (x *ImportDecl) GetImportPackageAlias() string {
	if x != nil {
		return x.ImportPackageAlias
	}
	return ""
}

func (x *ImportDecl) GetImportFileName() string {
	if x != nil {
		return x.ImportFileName
	}
	return ""
}

func (x *ImportDecl) GetIdentifiers() []*Identifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

type IntegerLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	IsNegative    bool      `protobuf:"varint,20,opt,name=is_negative,json=isNegative,proto3" json:"isNegative,omitempty"`
	Value         uint64    `protobuf:"varint,16,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntegerLiteralExpr) Reset() {
	*x = IntegerLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerLiteralExpr) ProtoMessage() {}

func (x *IntegerLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerLiteralExpr.ProtoReflect.Descriptor instead.
func (*IntegerLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{57}
}

func (x *IntegerLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *IntegerLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *IntegerLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *IntegerLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *IntegerLiteralExpr) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

func (x *IntegerLiteralExpr) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type InterfaceDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing             *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Type                  *InterfaceType      `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	TypeAliasDecls        []*TypeAliasDecl    `protobuf:"bytes,21,rep,name=type_alias_decls,json=typeAliasDecls,proto3" json:"typeAliasDecls,omitempty"`
	Scope                 *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *InterfaceDecl) Reset() {
	*x = InterfaceDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceDecl) ProtoMessage() {}

func (x *InterfaceDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceDecl.ProtoReflect.Descriptor instead.
func (*InterfaceDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{58}
}

func (x *InterfaceDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *InterfaceDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *InterfaceDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *InterfaceDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *InterfaceDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *InterfaceDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *InterfaceDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *InterfaceDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *InterfaceDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *InterfaceDecl) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *InterfaceDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *InterfaceDecl) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *InterfaceDecl) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *InterfaceDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *InterfaceDecl) GetType() *InterfaceType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *InterfaceDecl) GetTypeAliasDecls() []*TypeAliasDecl {
	if x != nil {
		return x.TypeAliasDecls
	}
	return nil
}

func (x *InterfaceDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type InterfaceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition    *Position       `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition      *Position       `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Methods          []*FunctionDecl `protobuf:"bytes,10,rep,name=methods,proto3" json:"methods,omitempty"`
	Inherits         []*NominalType  `protobuf:"bytes,11,rep,name=inherits,proto3" json:"inherits,omitempty"`
	InheritePosition *Position       `protobuf:"bytes,19,opt,name=inherite_position,json=inheritePosition,proto3" json:"inheritePosition,omitempty"`
}

func (x *InterfaceType) Reset() {
	*x = InterfaceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceType) ProtoMessage() {}

func (x *InterfaceType) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceType.ProtoReflect.Descriptor instead.
func (*InterfaceType) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{59}
}

func (x *InterfaceType) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *InterfaceType) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *InterfaceType) GetMethods() []*FunctionDecl {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *InterfaceType) GetInherits() []*NominalType {
	if x != nil {
		return x.Inherits
	}
	return nil
}

func (x *InterfaceType) GetInheritePosition() *Position {
	if x != nil {
		return x.InheritePosition
	}
	return nil
}

type LiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *LiteralExpr) Reset() {
	*x = LiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralExpr) ProtoMessage() {}

func (x *LiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralExpr.ProtoReflect.Descriptor instead.
func (*LiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{60}
}

func (x *LiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *LiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *LiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *LiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type LoopStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position  `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position  `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64      `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool       `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Body          *BlockStmt `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *LoopStmt) Reset() {
	*x = LoopStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoopStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopStmt) ProtoMessage() {}

func (x *LoopStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopStmt.ProtoReflect.Descriptor instead.
func (*LoopStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{61}
}

func (x *LoopStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *LoopStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *LoopStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *LoopStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *LoopStmt) GetBody() *BlockStmt {
	if x != nil {
		return x.Body
	}
	return nil
}

type MatchCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Pattern       *Pattern  `protobuf:"bytes,20,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Types that are assignable to Body:
	//	*MatchCase_BlockStmt
	//	*MatchCase_Expression
	Body isMatchCase_Body `protobuf_oneof:"body" json:"body,omitempty"`
}

func (x *MatchCase) Reset() {
	*x = MatchCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCase) ProtoMessage() {}

func (x *MatchCase) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCase.ProtoReflect.Descriptor instead.
func (*MatchCase) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{62}
}

func (x *MatchCase) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *MatchCase) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *MatchCase) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *MatchCase) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *MatchCase) GetPattern() *Pattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (m *MatchCase) GetBody() isMatchCase_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *MatchCase) GetBlockStmt() *BlockStmt {
	if x, ok := x.GetBody().(*MatchCase_BlockStmt); ok {
		return x.BlockStmt
	}
	return nil
}

func (x *MatchCase) GetExpression() *Expression {
	if x, ok := x.GetBody().(*MatchCase_Expression); ok {
		return x.Expression
	}
	return nil
}

type isMatchCase_Body interface {
	isMatchCase_Body()
}

type MatchCase_BlockStmt struct {
	BlockStmt *BlockStmt `protobuf:"bytes,21,opt,name=block_stmt,json=blockStmt,proto3,oneof" json:"blockStmt,omitempty"`
}

type MatchCase_Expression struct {
	Expression *Expression `protobuf:"bytes,22,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
}

func (*MatchCase_BlockStmt) isMatchCase_Body() {}

func (*MatchCase_Expression) isMatchCase_Body() {}

type MatchStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Subject       *Expression `protobuf:"bytes,20,opt,name=subject,proto3" json:"subject,omitempty"`
	Cases         *MatchCase  `protobuf:"bytes,22,opt,name=cases,proto3" json:"cases,omitempty"`
}

func (x *MatchStmt) Reset() {
	*x = MatchStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStmt) ProtoMessage() {}

func (x *MatchStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStmt.ProtoReflect.Descriptor instead.
func (*MatchStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{63}
}

func (x *MatchStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *MatchStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *MatchStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *MatchStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *MatchStmt) GetSubject() *Expression {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MatchStmt) GetCases() *MatchCase {
	if x != nil {
		return x.Cases
	}
	return nil
}

type NominalType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition    *Position        `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition      *Position        `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Document         *Document        `protobuf:"bytes,4,opt,name=document,proto3" json:"document,omitempty"`
	Implicit         bool             `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	PackageName      string           `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	Name             string           `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes       []*Attribute     `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	TypeDeclaration  *TypeDeclaration `protobuf:"bytes,13,opt,name=type_declaration,json=typeDeclaration,proto3" json:"typeDeclaration,omitempty"`
	Enclosing        *NominalType     `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	GenericArguments []*NominalType   `protobuf:"bytes,15,rep,name=generic_arguments,json=genericArguments,proto3" json:"genericArguments,omitempty"`
}

func (x *NominalType) Reset() {
	*x = NominalType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominalType) ProtoMessage() {}

func (x *NominalType) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominalType.ProtoReflect.Descriptor instead.
func (*NominalType) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{64}
}

func (x *NominalType) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *NominalType) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *NominalType) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *NominalType) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *NominalType) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *NominalType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NominalType) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *NominalType) GetTypeDeclaration() *TypeDeclaration {
	if x != nil {
		return x.TypeDeclaration
	}
	return nil
}

func (x *NominalType) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *NominalType) GetGenericArguments() []*NominalType {
	if x != nil {
		return x.GenericArguments
	}
	return nil
}

type NullLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *NullLiteralExpr) Reset() {
	*x = NullLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullLiteralExpr) ProtoMessage() {}

func (x *NullLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullLiteralExpr.ProtoReflect.Descriptor instead.
func (*NullLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{65}
}

func (x *NullLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *NullLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *NullLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *NullLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type NumericLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	IsNegative    bool      `protobuf:"varint,20,opt,name=is_negative,json=isNegative,proto3" json:"isNegative,omitempty"`
}

func (x *NumericLiteralExpr) Reset() {
	*x = NumericLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericLiteralExpr) ProtoMessage() {}

func (x *NumericLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericLiteralExpr.ProtoReflect.Descriptor instead.
func (*NumericLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{66}
}

func (x *NumericLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *NumericLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *NumericLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *NumericLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *NumericLiteralExpr) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

type NumericLiteralUnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Operator      *Operator   `protobuf:"bytes,20,opt,name=operator,proto3" json:"operator,omitempty"`
	Argument      *Expression `protobuf:"bytes,21,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *NumericLiteralUnaryExpr) Reset() {
	*x = NumericLiteralUnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericLiteralUnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericLiteralUnaryExpr) ProtoMessage() {}

func (x *NumericLiteralUnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericLiteralUnaryExpr.ProtoReflect.Descriptor instead.
func (*NumericLiteralUnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{67}
}

func (x *NumericLiteralUnaryExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *NumericLiteralUnaryExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *NumericLiteralUnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *NumericLiteralUnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *NumericLiteralUnaryExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *NumericLiteralUnaryExpr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *NumericLiteralUnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type ObjectLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position                  `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position                  `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32                      `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool                       `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Fields        []*ObjectLiteralExpr_Field `protobuf:"bytes,20,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ObjectLiteralExpr) Reset() {
	*x = ObjectLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectLiteralExpr) ProtoMessage() {}

func (x *ObjectLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectLiteralExpr.ProtoReflect.Descriptor instead.
func (*ObjectLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{68}
}

func (x *ObjectLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ObjectLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ObjectLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ObjectLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ObjectLiteralExpr) GetFields() []*ObjectLiteralExpr_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Symbol        string    `protobuf:"bytes,11,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Precedence    int32     `protobuf:"varint,12,opt,name=precedence,proto3" json:"precedence,omitempty"`
	Title         string    `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{69}
}

func (x *Operator) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Operator) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Operator) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *Operator) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Operator) GetPrecedence() int32 {
	if x != nil {
		return x.Precedence
	}
	return 0
}

func (x *Operator) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FullName             string                          `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Version              *core.Version                   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Implicit             bool                            `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Children             []*Package                      `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	Authors              []*Package_Author               `protobuf:"bytes,7,rep,name=authors,proto3" json:"authors,omitempty"`
	Summary              string                          `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
	Description          string                          `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Document             *CachedDocument                 `protobuf:"bytes,11,opt,name=document,proto3" json:"document,omitempty"`
	Repository           *core.Url                       `protobuf:"bytes,12,opt,name=repository,proto3" json:"repository,omitempty"`
	License              string                          `protobuf:"bytes,13,opt,name=license,proto3" json:"license,omitempty"`
	Exports              []string                        `protobuf:"bytes,15,rep,name=exports,proto3" json:"exports,omitempty"`
	SourceFiles          []*SourceFile                   `protobuf:"bytes,16,rep,name=source_files,json=sourceFiles,proto3" json:"sourceFiles,omitempty"`
	Scope                *Scope                          `protobuf:"bytes,20,opt,name=scope,proto3" json:"scope,omitempty"`
	ExtraInfo            *core.Object                    `protobuf:"bytes,25,opt,name=extra_info,json=extraInfo,proto3" json:"extraInfo,omitempty"`
	EntityRelationSet    *EntityRelationSet              `protobuf:"bytes,26,opt,name=entity_relation_set,json=entityRelationSet,proto3" json:"entityRelationSet,omitempty"`
	Dependencies         map[string]*Package_Requirement `protobuf:"bytes,30,rep,name=dependencies,proto3" json:"dependencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResolvedDependencies map[string]*Package             `protobuf:"bytes,31,rep,name=resolved_dependencies,json=resolvedDependencies,proto3" json:"resolvedDependencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{70}
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Package) GetVersion() *core.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Package) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *Package) GetChildren() []*Package {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Package) GetAuthors() []*Package_Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Package) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Package) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Package) GetDocument() *CachedDocument {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *Package) GetRepository() *core.Url {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *Package) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Package) GetExports() []string {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *Package) GetSourceFiles() []*SourceFile {
	if x != nil {
		return x.SourceFiles
	}
	return nil
}

func (x *Package) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Package) GetExtraInfo() *core.Object {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Package) GetEntityRelationSet() *EntityRelationSet {
	if x != nil {
		return x.EntityRelationSet
	}
	return nil
}

func (x *Package) GetDependencies() map[string]*Package_Requirement {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Package) GetResolvedDependencies() map[string]*Package {
	if x != nil {
		return x.ResolvedDependencies
	}
	return nil
}

type PackageDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition      *Position          `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition        *Position          `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit           bool               `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document           *Document          `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName        string             `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName     string             `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition    *Position          `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name               string             `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	PackageLiteralExpr *ObjectLiteralExpr `protobuf:"bytes,15,opt,name=package_literal_expr,json=packageLiteralExpr,proto3" json:"packageLiteralExpr,omitempty"`
	Package            *Package           `protobuf:"bytes,16,opt,name=package,proto3" json:"package,omitempty"`
	NamePosition       *Position          `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
}

func (x *PackageDecl) Reset() {
	*x = PackageDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageDecl) ProtoMessage() {}

func (x *PackageDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageDecl.ProtoReflect.Descriptor instead.
func (*PackageDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{71}
}

func (x *PackageDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *PackageDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *PackageDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *PackageDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *PackageDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PackageDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *PackageDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *PackageDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageDecl) GetPackageLiteralExpr() *ObjectLiteralExpr {
	if x != nil {
		return x.PackageLiteralExpr
	}
	return nil
}

func (x *PackageDecl) GetPackage() *Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *PackageDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

type ParenthesizedExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Expression    *Expression `protobuf:"bytes,10,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ParenthesizedExpr) Reset() {
	*x = ParenthesizedExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParenthesizedExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParenthesizedExpr) ProtoMessage() {}

func (x *ParenthesizedExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParenthesizedExpr.ProtoReflect.Descriptor instead.
func (*ParenthesizedExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{72}
}

func (x *ParenthesizedExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ParenthesizedExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ParenthesizedExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ParenthesizedExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ParenthesizedExpr) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename        string     `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Offset          int64      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Line            int64      `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Column          int64      `protobuf:"varint,4,opt,name=column,proto3" json:"column,omitempty"`
	LeadingComments []*Comment `protobuf:"bytes,10,rep,name=leading_comments,json=leadingComments,proto3" json:"leadingComments,omitempty"`
	TailingComments []*Comment `protobuf:"bytes,13,rep,name=tailing_comments,json=tailingComments,proto3" json:"tailingComments,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{73}
}

func (x *Position) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Position) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Position) GetLeadingComments() []*Comment {
	if x != nil {
		return x.LeadingComments
	}
	return nil
}

func (x *Position) GetTailingComments() []*Comment {
	if x != nil {
		return x.TailingComments
	}
	return nil
}

type PosSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []int64 `protobuf:"varint,1,rep,packed,name=vals,proto3" json:"vals,omitempty"`
}

func (x *PosSpan) Reset() {
	*x = PosSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosSpan) ProtoMessage() {}

func (x *PosSpan) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosSpan.ProtoReflect.Descriptor instead.
func (*PosSpan) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{74}
}

func (x *PosSpan) GetVals() []int64 {
	if x != nil {
		return x.Vals
	}
	return nil
}

type PostfixUnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Operator      *Operator   `protobuf:"bytes,20,opt,name=operator,proto3" json:"operator,omitempty"`
	Argument      *Expression `protobuf:"bytes,21,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *PostfixUnaryExpr) Reset() {
	*x = PostfixUnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostfixUnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostfixUnaryExpr) ProtoMessage() {}

func (x *PostfixUnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostfixUnaryExpr.ProtoReflect.Descriptor instead.
func (*PostfixUnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{75}
}

func (x *PostfixUnaryExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *PostfixUnaryExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *PostfixUnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *PostfixUnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *PostfixUnaryExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *PostfixUnaryExpr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *PostfixUnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type PrefixUnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Operator      *Operator   `protobuf:"bytes,20,opt,name=operator,proto3" json:"operator,omitempty"`
	Argument      *Expression `protobuf:"bytes,21,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *PrefixUnaryExpr) Reset() {
	*x = PrefixUnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixUnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixUnaryExpr) ProtoMessage() {}

func (x *PrefixUnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixUnaryExpr.ProtoReflect.Descriptor instead.
func (*PrefixUnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{76}
}

func (x *PrefixUnaryExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *PrefixUnaryExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *PrefixUnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *PrefixUnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *PrefixUnaryExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *PrefixUnaryExpr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *PrefixUnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type RangeLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position      `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position      `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool           `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value         *core.IntRange `protobuf:"bytes,20,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RangeLiteralExpr) Reset() {
	*x = RangeLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeLiteralExpr) ProtoMessage() {}

func (x *RangeLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeLiteralExpr.ProtoReflect.Descriptor instead.
func (*RangeLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{77}
}

func (x *RangeLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *RangeLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *RangeLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *RangeLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *RangeLiteralExpr) GetValue() *core.IntRange {
	if x != nil {
		return x.Value
	}
	return nil
}

type RepeatStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Body          *BlockStmt  `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	Condition     *Expression `protobuf:"bytes,20,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *RepeatStmt) Reset() {
	*x = RepeatStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatStmt) ProtoMessage() {}

func (x *RepeatStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatStmt.ProtoReflect.Descriptor instead.
func (*RepeatStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{78}
}

func (x *RepeatStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *RepeatStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *RepeatStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *RepeatStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *RepeatStmt) GetBody() *BlockStmt {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RepeatStmt) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

type ReturnStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Result        *Expression `protobuf:"bytes,20,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ReturnStmt) Reset() {
	*x = ReturnStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnStmt) ProtoMessage() {}

func (x *ReturnStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnStmt.ProtoReflect.Descriptor instead.
func (*ReturnStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{79}
}

func (x *ReturnStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ReturnStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ReturnStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ReturnStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ReturnStmt) GetResult() *Expression {
	if x != nil {
		return x.Result
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiers map[string]*Identifier `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Enclosing   *Scope                 `protobuf:"bytes,10,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{80}
}

func (x *Scope) GetIdentifiers() map[string]*Identifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Scope) GetEnclosing() *Scope {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

type SourceFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FullName              string        `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"fullName,omitempty"`
	Url                   *core.Url     `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Attributes            []*Attribute  `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	PackageName           string        `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	Imports               []*ImportDecl `protobuf:"bytes,11,rep,name=imports,proto3" json:"imports,omitempty"`
	Statements            []*Statement  `protobuf:"bytes,12,rep,name=statements,proto3" json:"statements,omitempty"`
	TailingComments       []*Comment    `protobuf:"bytes,13,rep,name=tailing_comments,json=tailingComments,proto3" json:"tailingComments,omitempty"`
	ResolvedIdentifiers   []*Identifier `protobuf:"bytes,20,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier `protobuf:"bytes,21,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	Dependencies          []*SourceFile `protobuf:"bytes,22,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Scope                 *Scope        `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *SourceFile) Reset() {
	*x = SourceFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceFile) ProtoMessage() {}

func (x *SourceFile) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceFile.ProtoReflect.Descriptor instead.
func (*SourceFile) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{81}
}

func (x *SourceFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceFile) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *SourceFile) GetUrl() *core.Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *SourceFile) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SourceFile) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SourceFile) GetImports() []*ImportDecl {
	if x != nil {
		return x.Imports
	}
	return nil
}

func (x *SourceFile) GetStatements() []*Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *SourceFile) GetTailingComments() []*Comment {
	if x != nil {
		return x.TailingComments
	}
	return nil
}

func (x *SourceFile) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *SourceFile) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *SourceFile) GetDependencies() []*SourceFile {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *SourceFile) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Statement:
	//	*Statement_ReturnStmt
	//	*Statement_BreakStmt
	//	*Statement_ContinueStmt
	//	*Statement_MatchStmt
	//	*Statement_IfStmt
	//	*Statement_ForStmt
	//	*Statement_WhileStmt
	//	*Statement_RepeatStmt
	//	*Statement_BlockStmt
	//	*Statement_Declaration
	//	*Statement_Expression
	Statement isStatement_Statement `protobuf_oneof:"statement" json:"statement,omitempty"`
}

func (x *Statement) Reset() {
	*x = Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{82}
}

func (m *Statement) GetStatement() isStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (x *Statement) GetReturnStmt() *ReturnStmt {
	if x, ok := x.GetStatement().(*Statement_ReturnStmt); ok {
		return x.ReturnStmt
	}
	return nil
}

func (x *Statement) GetBreakStmt() *BreakStmt {
	if x, ok := x.GetStatement().(*Statement_BreakStmt); ok {
		return x.BreakStmt
	}
	return nil
}

func (x *Statement) GetContinueStmt() *ContinueStmt {
	if x, ok := x.GetStatement().(*Statement_ContinueStmt); ok {
		return x.ContinueStmt
	}
	return nil
}

func (x *Statement) GetMatchStmt() *MatchStmt {
	if x, ok := x.GetStatement().(*Statement_MatchStmt); ok {
		return x.MatchStmt
	}
	return nil
}

func (x *Statement) GetIfStmt() *IfStmt {
	if x, ok := x.GetStatement().(*Statement_IfStmt); ok {
		return x.IfStmt
	}
	return nil
}

func (x *Statement) GetForStmt() *ForStmt {
	if x, ok := x.GetStatement().(*Statement_ForStmt); ok {
		return x.ForStmt
	}
	return nil
}

func (x *Statement) GetWhileStmt() *WhileStmt {
	if x, ok := x.GetStatement().(*Statement_WhileStmt); ok {
		return x.WhileStmt
	}
	return nil
}

func (x *Statement) GetRepeatStmt() *RepeatStmt {
	if x, ok := x.GetStatement().(*Statement_RepeatStmt); ok {
		return x.RepeatStmt
	}
	return nil
}

func (x *Statement) GetBlockStmt() *BlockStmt {
	if x, ok := x.GetStatement().(*Statement_BlockStmt); ok {
		return x.BlockStmt
	}
	return nil
}

func (x *Statement) GetDeclaration() *Declaration {
	if x, ok := x.GetStatement().(*Statement_Declaration); ok {
		return x.Declaration
	}
	return nil
}

func (x *Statement) GetExpression() *Expression {
	if x, ok := x.GetStatement().(*Statement_Expression); ok {
		return x.Expression
	}
	return nil
}

type isStatement_Statement interface {
	isStatement_Statement()
}

type Statement_ReturnStmt struct {
	ReturnStmt *ReturnStmt `protobuf:"bytes,1,opt,name=return_stmt,json=returnStmt,proto3,oneof" json:"returnStmt,omitempty"`
}

type Statement_BreakStmt struct {
	BreakStmt *BreakStmt `protobuf:"bytes,2,opt,name=break_stmt,json=breakStmt,proto3,oneof" json:"breakStmt,omitempty"`
}

type Statement_ContinueStmt struct {
	ContinueStmt *ContinueStmt `protobuf:"bytes,3,opt,name=continue_stmt,json=continueStmt,proto3,oneof" json:"continueStmt,omitempty"`
}

type Statement_MatchStmt struct {
	MatchStmt *MatchStmt `protobuf:"bytes,4,opt,name=match_stmt,json=matchStmt,proto3,oneof" json:"matchStmt,omitempty"`
}

type Statement_IfStmt struct {
	IfStmt *IfStmt `protobuf:"bytes,5,opt,name=if_stmt,json=ifStmt,proto3,oneof" json:"ifStmt,omitempty"`
}

type Statement_ForStmt struct {
	ForStmt *ForStmt `protobuf:"bytes,6,opt,name=for_stmt,json=forStmt,proto3,oneof" json:"forStmt,omitempty"`
}

type Statement_WhileStmt struct {
	WhileStmt *WhileStmt `protobuf:"bytes,7,opt,name=while_stmt,json=whileStmt,proto3,oneof" json:"whileStmt,omitempty"`
}

type Statement_RepeatStmt struct {
	RepeatStmt *RepeatStmt `protobuf:"bytes,8,opt,name=repeat_stmt,json=repeatStmt,proto3,oneof" json:"repeatStmt,omitempty"`
}

type Statement_BlockStmt struct {
	BlockStmt *BlockStmt `protobuf:"bytes,9,opt,name=block_stmt,json=blockStmt,proto3,oneof" json:"blockStmt,omitempty"`
}

type Statement_Declaration struct {
	Declaration *Declaration `protobuf:"bytes,10,opt,name=declaration,proto3,oneof" json:"declaration,omitempty"`
}

type Statement_Expression struct {
	Expression *Expression `protobuf:"bytes,11,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
}

func (*Statement_ReturnStmt) isStatement_Statement() {}

func (*Statement_BreakStmt) isStatement_Statement() {}

func (*Statement_ContinueStmt) isStatement_Statement() {}

func (*Statement_MatchStmt) isStatement_Statement() {}

func (*Statement_IfStmt) isStatement_Statement() {}

func (*Statement_ForStmt) isStatement_Statement() {}

func (*Statement_WhileStmt) isStatement_Statement() {}

func (*Statement_RepeatStmt) isStatement_Statement() {}

func (*Statement_BlockStmt) isStatement_Statement() {}

func (*Statement_Declaration) isStatement_Statement() {}

func (*Statement_Expression) isStatement_Statement() {}

type Stmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int64     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *Stmt) Reset() {
	*x = Stmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stmt) ProtoMessage() {}

func (x *Stmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stmt.ProtoReflect.Descriptor instead.
func (*Stmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{83}
}

func (x *Stmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Stmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Stmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Stmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type StringLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value         string    `protobuf:"bytes,20,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringLiteralExpr) Reset() {
	*x = StringLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringLiteralExpr) ProtoMessage() {}

func (x *StringLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringLiteralExpr.ProtoReflect.Descriptor instead.
func (*StringLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{84}
}

func (x *StringLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *StringLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *StringLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *StringLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *StringLiteralExpr) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StringLiteralUnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Operator      *Operator   `protobuf:"bytes,20,opt,name=operator,proto3" json:"operator,omitempty"`
	Argument      *Expression `protobuf:"bytes,21,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *StringLiteralUnaryExpr) Reset() {
	*x = StringLiteralUnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringLiteralUnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringLiteralUnaryExpr) ProtoMessage() {}

func (x *StringLiteralUnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringLiteralUnaryExpr.ProtoReflect.Descriptor instead.
func (*StringLiteralUnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{85}
}

func (x *StringLiteralUnaryExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *StringLiteralUnaryExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *StringLiteralUnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *StringLiteralUnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *StringLiteralUnaryExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *StringLiteralUnaryExpr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *StringLiteralUnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type StructConstructionExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *StructConstructionExpr) Reset() {
	*x = StructConstructionExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructConstructionExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructConstructionExpr) ProtoMessage() {}

func (x *StructConstructionExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructConstructionExpr.ProtoReflect.Descriptor instead.
func (*StructConstructionExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{86}
}

func (x *StructConstructionExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *StructConstructionExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *StructConstructionExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *StructConstructionExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type StructDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing             *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Type                  *StructType         `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	TypeAliasDecls        []*TypeAliasDecl    `protobuf:"bytes,21,rep,name=type_alias_decls,json=typeAliasDecls,proto3" json:"typeAliasDecls,omitempty"`
	EnumDecls             []*EnumDecl         `protobuf:"bytes,22,rep,name=enum_decls,json=enumDecls,proto3" json:"enumDecls,omitempty"`
	StructDecls           []*StructDecl       `protobuf:"bytes,23,rep,name=struct_decls,json=structDecls,proto3" json:"structDecls,omitempty"`
	Scope                 *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *StructDecl) Reset() {
	*x = StructDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructDecl) ProtoMessage() {}

func (x *StructDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructDecl.ProtoReflect.Descriptor instead.
func (*StructDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{87}
}

func (x *StructDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *StructDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *StructDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *StructDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *StructDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *StructDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *StructDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *StructDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StructDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *StructDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *StructDecl) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *StructDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *StructDecl) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *StructDecl) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *StructDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *StructDecl) GetType() *StructType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StructDecl) GetTypeAliasDecls() []*TypeAliasDecl {
	if x != nil {
		return x.TypeAliasDecls
	}
	return nil
}

func (x *StructDecl) GetEnumDecls() []*EnumDecl {
	if x != nil {
		return x.EnumDecls
	}
	return nil
}

func (x *StructDecl) GetStructDecls() []*StructDecl {
	if x != nil {
		return x.StructDecls
	}
	return nil
}

func (x *StructDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type StructLiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position          `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position          `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32              `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool               `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression        `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Value         *ObjectLiteralExpr `protobuf:"bytes,20,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StructLiteralExpr) Reset() {
	*x = StructLiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructLiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructLiteralExpr) ProtoMessage() {}

func (x *StructLiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructLiteralExpr.ProtoReflect.Descriptor instead.
func (*StructLiteralExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{88}
}

func (x *StructLiteralExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *StructLiteralExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *StructLiteralExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *StructLiteralExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *StructLiteralExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *StructLiteralExpr) GetValue() *ObjectLiteralExpr {
	if x != nil {
		return x.Value
	}
	return nil
}

type StructType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition   *Position      `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition     *Position      `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Fields          []*ValueDecl   `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
	Inherits        []*NominalType `protobuf:"bytes,11,rep,name=inherits,proto3" json:"inherits,omitempty"`
	Groups          []*GroupDecl   `protobuf:"bytes,12,rep,name=groups,proto3" json:"groups,omitempty"`
	InheritPosition *Position      `protobuf:"bytes,19,opt,name=inherit_position,json=inheritPosition,proto3" json:"inheritPosition,omitempty"`
}

func (x *StructType) Reset() {
	*x = StructType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructType) ProtoMessage() {}

func (x *StructType) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructType.ProtoReflect.Descriptor instead.
func (*StructType) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{89}
}

func (x *StructType) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *StructType) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *StructType) GetFields() []*ValueDecl {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *StructType) GetInherits() []*NominalType {
	if x != nil {
		return x.Inherits
	}
	return nil
}

func (x *StructType) GetGroups() []*GroupDecl {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *StructType) GetInheritPosition() *Position {
	if x != nil {
		return x.InheritPosition
	}
	return nil
}

type SubscriptExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Arguments     []*Argument `protobuf:"bytes,20,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *SubscriptExpr) Reset() {
	*x = SubscriptExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptExpr) ProtoMessage() {}

func (x *SubscriptExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptExpr.ProtoReflect.Descriptor instead.
func (*SubscriptExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{90}
}

func (x *SubscriptExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SubscriptExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *SubscriptExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *SubscriptExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *SubscriptExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *SubscriptExpr) GetArguments() []*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type TupleExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition    *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition      *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind             int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit         bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	HasElementLabels bool        `protobuf:"varint,10,opt,name=has_element_labels,json=hasElementLabels,proto3" json:"hasElementLabels,omitempty"`
	Elements         []*Argument `protobuf:"bytes,20,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *TupleExpr) Reset() {
	*x = TupleExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleExpr) ProtoMessage() {}

func (x *TupleExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleExpr.ProtoReflect.Descriptor instead.
func (*TupleExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{91}
}

func (x *TupleExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *TupleExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *TupleExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *TupleExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *TupleExpr) GetHasElementLabels() bool {
	if x != nil {
		return x.HasElementLabels
	}
	return false
}

func (x *TupleExpr) GetElements() []*Argument {
	if x != nil {
		return x.Elements
	}
	return nil
}

type TypeAliasDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing             *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Type                  *NominalType        `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Scope                 *Scope              `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *TypeAliasDecl) Reset() {
	*x = TypeAliasDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeAliasDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeAliasDecl) ProtoMessage() {}

func (x *TypeAliasDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeAliasDecl.ProtoReflect.Descriptor instead.
func (*TypeAliasDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{92}
}

func (x *TypeAliasDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *TypeAliasDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *TypeAliasDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *TypeAliasDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *TypeAliasDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *TypeAliasDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *TypeAliasDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *TypeAliasDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeAliasDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TypeAliasDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *TypeAliasDecl) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *TypeAliasDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *TypeAliasDecl) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *TypeAliasDecl) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *TypeAliasDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *TypeAliasDecl) GetType() *NominalType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TypeAliasDecl) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type TypeCastingExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *TypeCastingExpr) Reset() {
	*x = TypeCastingExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeCastingExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeCastingExpr) ProtoMessage() {}

func (x *TypeCastingExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeCastingExpr.ProtoReflect.Descriptor instead.
func (*TypeCastingExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{93}
}

func (x *TypeCastingExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *TypeCastingExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *TypeCastingExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *TypeCastingExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type TypeDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition         *Position           `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition           *Position           `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit              bool                `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document              *Document           `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName           string              `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName        string              `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition       *Position           `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name                  string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes            []*Attribute        `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	GenericParameters     []*GenericParameter `protobuf:"bytes,13,rep,name=generic_parameters,json=genericParameters,proto3" json:"genericParameters,omitempty"`
	Enclosing             *NominalType        `protobuf:"bytes,14,opt,name=enclosing,proto3" json:"enclosing,omitempty"`
	Group                 *GroupDecl          `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	ResolvedIdentifiers   []*Identifier       `protobuf:"bytes,16,rep,name=resolved_identifiers,json=resolvedIdentifiers,proto3" json:"resolvedIdentifiers,omitempty"`
	UnresolvedIdentifiers []*Identifier       `protobuf:"bytes,17,rep,name=unresolved_identifiers,json=unresolvedIdentifiers,proto3" json:"unresolvedIdentifiers,omitempty"`
	NamePosition          *Position           `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
}

func (x *TypeDecl) Reset() {
	*x = TypeDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDecl) ProtoMessage() {}

func (x *TypeDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDecl.ProtoReflect.Descriptor instead.
func (*TypeDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{94}
}

func (x *TypeDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *TypeDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *TypeDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *TypeDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *TypeDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *TypeDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *TypeDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *TypeDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TypeDecl) GetGenericParameters() []*GenericParameter {
	if x != nil {
		return x.GenericParameters
	}
	return nil
}

func (x *TypeDecl) GetEnclosing() *NominalType {
	if x != nil {
		return x.Enclosing
	}
	return nil
}

func (x *TypeDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *TypeDecl) GetResolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.ResolvedIdentifiers
	}
	return nil
}

func (x *TypeDecl) GetUnresolvedIdentifiers() []*Identifier {
	if x != nil {
		return x.UnresolvedIdentifiers
	}
	return nil
}

func (x *TypeDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

type TypeDeclaration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TypeDeclaration:
	//	*TypeDeclaration_EnumDecl
	//	*TypeDeclaration_StructDecl
	//	*TypeDeclaration_TypeAliasDecl
	//	*TypeDeclaration_InterfaceDecl
	//	*TypeDeclaration_GenericParameter
	TypeDeclaration isTypeDeclaration_TypeDeclaration `protobuf_oneof:"type_declaration" json:"typeDeclaration,omitempty"`
}

func (x *TypeDeclaration) Reset() {
	*x = TypeDeclaration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDeclaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDeclaration) ProtoMessage() {}

func (x *TypeDeclaration) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDeclaration.ProtoReflect.Descriptor instead.
func (*TypeDeclaration) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{95}
}

func (m *TypeDeclaration) GetTypeDeclaration() isTypeDeclaration_TypeDeclaration {
	if m != nil {
		return m.TypeDeclaration
	}
	return nil
}

func (x *TypeDeclaration) GetEnumDecl() *EnumDecl {
	if x, ok := x.GetTypeDeclaration().(*TypeDeclaration_EnumDecl); ok {
		return x.EnumDecl
	}
	return nil
}

func (x *TypeDeclaration) GetStructDecl() *StructDecl {
	if x, ok := x.GetTypeDeclaration().(*TypeDeclaration_StructDecl); ok {
		return x.StructDecl
	}
	return nil
}

func (x *TypeDeclaration) GetTypeAliasDecl() *TypeAliasDecl {
	if x, ok := x.GetTypeDeclaration().(*TypeDeclaration_TypeAliasDecl); ok {
		return x.TypeAliasDecl
	}
	return nil
}

func (x *TypeDeclaration) GetInterfaceDecl() *InterfaceDecl {
	if x, ok := x.GetTypeDeclaration().(*TypeDeclaration_InterfaceDecl); ok {
		return x.InterfaceDecl
	}
	return nil
}

func (x *TypeDeclaration) GetGenericParameter() *GenericParameter {
	if x, ok := x.GetTypeDeclaration().(*TypeDeclaration_GenericParameter); ok {
		return x.GenericParameter
	}
	return nil
}

type isTypeDeclaration_TypeDeclaration interface {
	isTypeDeclaration_TypeDeclaration()
}

type TypeDeclaration_EnumDecl struct {
	EnumDecl *EnumDecl `protobuf:"bytes,3,opt,name=enum_decl,json=enumDecl,proto3,oneof" json:"enumDecl,omitempty"`
}

type TypeDeclaration_StructDecl struct {
	StructDecl *StructDecl `protobuf:"bytes,4,opt,name=struct_decl,json=structDecl,proto3,oneof" json:"structDecl,omitempty"`
}

type TypeDeclaration_TypeAliasDecl struct {
	TypeAliasDecl *TypeAliasDecl `protobuf:"bytes,5,opt,name=type_alias_decl,json=typeAliasDecl,proto3,oneof" json:"typeAliasDecl,omitempty"`
}

type TypeDeclaration_InterfaceDecl struct {
	InterfaceDecl *InterfaceDecl `protobuf:"bytes,6,opt,name=interface_decl,json=interfaceDecl,proto3,oneof" json:"interfaceDecl,omitempty"`
}

type TypeDeclaration_GenericParameter struct {
	GenericParameter *GenericParameter `protobuf:"bytes,19,opt,name=generic_parameter,json=genericParameter,proto3,oneof" json:"genericParameter,omitempty"`
}

func (*TypeDeclaration_EnumDecl) isTypeDeclaration_TypeDeclaration() {}

func (*TypeDeclaration_StructDecl) isTypeDeclaration_TypeDeclaration() {}

func (*TypeDeclaration_TypeAliasDecl) isTypeDeclaration_TypeDeclaration() {}

func (*TypeDeclaration_InterfaceDecl) isTypeDeclaration_TypeDeclaration() {}

func (*TypeDeclaration_GenericParameter) isTypeDeclaration_TypeDeclaration() {}

type UnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Callee        *Expression `protobuf:"bytes,10,opt,name=callee,proto3" json:"callee,omitempty"`
	Operator      *Operator   `protobuf:"bytes,20,opt,name=operator,proto3" json:"operator,omitempty"`
	Argument      *Expression `protobuf:"bytes,21,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *UnaryExpr) Reset() {
	*x = UnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryExpr) ProtoMessage() {}

func (x *UnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryExpr.ProtoReflect.Descriptor instead.
func (*UnaryExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{96}
}

func (x *UnaryExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *UnaryExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *UnaryExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *UnaryExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *UnaryExpr) GetCallee() *Expression {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *UnaryExpr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *UnaryExpr) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type ValueDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition   *Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition     *Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit        bool         `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document        *Document    `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName     string       `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName  string       `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition *Position    `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name            string       `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes      []*Attribute `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Group           *GroupDecl   `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	NamePosition    *Position    `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Type            *NominalType `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Initializer     *Initializer `protobuf:"bytes,21,opt,name=initializer,proto3" json:"initializer,omitempty"`
}

func (x *ValueDecl) Reset() {
	*x = ValueDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueDecl) ProtoMessage() {}

func (x *ValueDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueDecl.ProtoReflect.Descriptor instead.
func (*ValueDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{97}
}

func (x *ValueDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ValueDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ValueDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *ValueDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ValueDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ValueDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *ValueDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *ValueDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValueDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ValueDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ValueDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *ValueDecl) GetType() *NominalType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ValueDecl) GetInitializer() *Initializer {
	if x != nil {
		return x.Initializer
	}
	return nil
}

type Initializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Value         *Expression `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Initializer) Reset() {
	*x = Initializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Initializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Initializer) ProtoMessage() {}

func (x *Initializer) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Initializer.ProtoReflect.Descriptor instead.
func (*Initializer) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{98}
}

func (x *Initializer) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Initializer) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Initializer) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type VariableDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition   *Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition     *Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit        bool         `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Document        *Document    `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	PackageName     string       `protobuf:"bytes,7,opt,name=package_name,json=packageName,proto3" json:"packageName,omitempty"`
	SourceFileName  string       `protobuf:"bytes,8,opt,name=source_file_name,json=sourceFileName,proto3" json:"sourceFileName,omitempty"`
	KeywordPosition *Position    `protobuf:"bytes,9,opt,name=keyword_position,json=keywordPosition,proto3" json:"keywordPosition,omitempty"`
	Name            string       `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Attributes      []*Attribute `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Group           *GroupDecl   `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	NamePosition    *Position    `protobuf:"bytes,19,opt,name=name_position,json=namePosition,proto3" json:"namePosition,omitempty"`
	Type            *NominalType `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Initializer     *Initializer `protobuf:"bytes,21,opt,name=initializer,proto3" json:"initializer,omitempty"`
}

func (x *VariableDecl) Reset() {
	*x = VariableDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDecl) ProtoMessage() {}

func (x *VariableDecl) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDecl.ProtoReflect.Descriptor instead.
func (*VariableDecl) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{99}
}

func (x *VariableDecl) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *VariableDecl) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *VariableDecl) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *VariableDecl) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *VariableDecl) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *VariableDecl) GetSourceFileName() string {
	if x != nil {
		return x.SourceFileName
	}
	return ""
}

func (x *VariableDecl) GetKeywordPosition() *Position {
	if x != nil {
		return x.KeywordPosition
	}
	return nil
}

func (x *VariableDecl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableDecl) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *VariableDecl) GetGroup() *GroupDecl {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *VariableDecl) GetNamePosition() *Position {
	if x != nil {
		return x.NamePosition
	}
	return nil
}

func (x *VariableDecl) GetType() *NominalType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *VariableDecl) GetInitializer() *Initializer {
	if x != nil {
		return x.Initializer
	}
	return nil
}

type WhileStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition      *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition        *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind               int64       `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit           bool        `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Body               *BlockStmt  `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	Condition          *Expression `protobuf:"bytes,20,opt,name=condition,proto3" json:"condition,omitempty"`
	ExecuteAtLeastOnce bool        `protobuf:"varint,21,opt,name=execute_at_least_once,json=executeAtLeastOnce,proto3" json:"executeAtLeastOnce,omitempty"`
}

func (x *WhileStmt) Reset() {
	*x = WhileStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhileStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhileStmt) ProtoMessage() {}

func (x *WhileStmt) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhileStmt.ProtoReflect.Descriptor instead.
func (*WhileStmt) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{100}
}

func (x *WhileStmt) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *WhileStmt) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *WhileStmt) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *WhileStmt) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *WhileStmt) GetBody() *BlockStmt {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *WhileStmt) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *WhileStmt) GetExecuteAtLeastOnce() bool {
	if x != nil {
		return x.ExecuteAtLeastOnce
	}
	return false
}

type WildcardExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Kind          int32     `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Implicit      bool      `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
}

func (x *WildcardExpr) Reset() {
	*x = WildcardExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildcardExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildcardExpr) ProtoMessage() {}

func (x *WildcardExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildcardExpr.ProtoReflect.Descriptor instead.
func (*WildcardExpr) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{101}
}

func (x *WildcardExpr) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *WildcardExpr) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *WildcardExpr) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *WildcardExpr) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

type MapLiteralExpr_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   *Expression `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Numeric bool        `protobuf:"varint,3,opt,name=numeric,proto3" json:"numeric,omitempty"`
}

func (x *MapLiteralExpr_Entry) Reset() {
	*x = MapLiteralExpr_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLiteralExpr_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLiteralExpr_Entry) ProtoMessage() {}

func (x *MapLiteralExpr_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLiteralExpr_Entry.ProtoReflect.Descriptor instead.
func (*MapLiteralExpr_Entry) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{25, 0}
}

func (x *MapLiteralExpr_Entry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapLiteralExpr_Entry) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MapLiteralExpr_Entry) GetNumeric() bool {
	if x != nil {
		return x.Numeric
	}
	return false
}

type Document_Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Following     bool      `protobuf:"varint,3,opt,name=following,proto3" json:"following,omitempty"`
	Private       bool      `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	Text          string    `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Document_Line) Reset() {
	*x = Document_Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document_Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document_Line) ProtoMessage() {}

func (x *Document_Line) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document_Line.ProtoReflect.Descriptor instead.
func (*Document_Line) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{26, 0}
}

func (x *Document_Line) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Document_Line) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *Document_Line) GetFollowing() bool {
	if x != nil {
		return x.Following
	}
	return false
}

func (x *Document_Line) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Document_Line) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type FunctionSignature_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Decls         []*ValueDecl `protobuf:"bytes,10,rep,name=decls,proto3" json:"decls,omitempty"`
}

func (x *FunctionSignature_Parameter) Reset() {
	*x = FunctionSignature_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionSignature_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionSignature_Parameter) ProtoMessage() {}

func (x *FunctionSignature_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionSignature_Parameter.ProtoReflect.Descriptor instead.
func (*FunctionSignature_Parameter) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{49, 0}
}

func (x *FunctionSignature_Parameter) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *FunctionSignature_Parameter) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *FunctionSignature_Parameter) GetDecls() []*ValueDecl {
	if x != nil {
		return x.Decls
	}
	return nil
}

type FunctionSignature_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position    `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position    `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Implicit      bool         `protobuf:"varint,5,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Type          *NominalType `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FunctionSignature_Result) Reset() {
	*x = FunctionSignature_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionSignature_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionSignature_Result) ProtoMessage() {}

func (x *FunctionSignature_Result) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionSignature_Result.ProtoReflect.Descriptor instead.
func (*FunctionSignature_Result) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{49, 1}
}

func (x *FunctionSignature_Result) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *FunctionSignature_Result) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *FunctionSignature_Result) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *FunctionSignature_Result) GetType() *NominalType {
	if x != nil {
		return x.Type
	}
	return nil
}

type ObjectLiteralExpr_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *Position   `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   *Position   `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"endPosition,omitempty"`
	Name          string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Value         *Expression `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ObjectLiteralExpr_Field) Reset() {
	*x = ObjectLiteralExpr_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectLiteralExpr_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectLiteralExpr_Field) ProtoMessage() {}

func (x *ObjectLiteralExpr_Field) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectLiteralExpr_Field.ProtoReflect.Descriptor instead.
func (*ObjectLiteralExpr_Field) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{68, 0}
}

func (x *ObjectLiteralExpr_Field) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *ObjectLiteralExpr_Field) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *ObjectLiteralExpr_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectLiteralExpr_Field) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type Package_Requirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    *Package_Requirement_Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Registry   string                       `protobuf:"bytes,3,opt,name=registry,proto3" json:"registry,omitempty"`
	Path       string                       `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Repository *core.Url                    `protobuf:"bytes,5,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch     string                       `protobuf:"bytes,6,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit     *Package_Requirement_Commit  `protobuf:"bytes,7,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *Package_Requirement) Reset() {
	*x = Package_Requirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Requirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Requirement) ProtoMessage() {}

func (x *Package_Requirement) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Requirement.ProtoReflect.Descriptor instead.
func (*Package_Requirement) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{70, 0}
}

func (x *Package_Requirement) GetVersion() *Package_Requirement_Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Package_Requirement) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *Package_Requirement) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Package_Requirement) GetRepository() *core.Url {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *Package_Requirement) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Package_Requirement) GetCommit() *Package_Requirement_Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type Package_Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author       string             `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Organization string             `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Email        *core.EmailAddress `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Package_Author) Reset() {
	*x = Package_Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Author) ProtoMessage() {}

func (x *Package_Author) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Author.ProtoReflect.Descriptor instead.
func (*Package_Author) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{70, 1}
}

func (x *Package_Author) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Package_Author) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *Package_Author) GetEmail() *core.EmailAddress {
	if x != nil {
		return x.Email
	}
	return nil
}

type Package_Requirement_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Package_Requirement_Version_Type `protobuf:"varint,1,opt,name=type,proto3,enum=mojo.lang.Package_Requirement_Version_Type" json:"type,omitempty"`
	Range *core.VersionRange               `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Package_Requirement_Version) Reset() {
	*x = Package_Requirement_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Requirement_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Requirement_Version) ProtoMessage() {}

func (x *Package_Requirement_Version) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Requirement_Version.ProtoReflect.Descriptor instead.
func (*Package_Requirement_Version) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{70, 0, 0}
}

func (x *Package_Requirement_Version) GetType() Package_Requirement_Version_Type {
	if x != nil {
		return x.Type
	}
	return Package_Requirement_Version_TYPE_CARET
}

func (x *Package_Requirement_Version) GetRange() *core.VersionRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type Package_Requirement_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string          `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Date *core.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Package_Requirement_Commit) Reset() {
	*x = Package_Requirement_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_lang_lang_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Requirement_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Requirement_Commit) ProtoMessage() {}

func (x *Package_Requirement_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_lang_lang_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Requirement_Commit.ProtoReflect.Descriptor instead.
func (*Package_Requirement_Commit) Descriptor() ([]byte, []int) {
	return file_mojo_lang_lang_proto_rawDescGZIP(), []int{70, 0, 1}
}

func (x *Package_Requirement_Commit) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Package_Requirement_Commit) GetDate() *core.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

var File_mojo_lang_lang_proto protoreflect.FileDescriptor

var file_mojo_lang_lang_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x1a, 0x1d, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x72, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x08,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe9, 0x01, 0x0a, 0x10, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x0e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc2,
	0x04, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x42, 0x04, 0xda, 0xcf, 0x24,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xf5, 0x06, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24,
	0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xf7, 0x07, 0x0a, 0x0d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x63, 0x6c, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75, 0x6e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x65, 0x66,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x13, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcb, 0x01, 0x0a,
	0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0a, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xaf, 0x01,
	0x0a, 0x09, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22,
	0xa9, 0x07, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12,
	0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xdc, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x68, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x65, 0x64, 0x22, 0xb3,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74,
	0x68, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6c, 0x73,
	0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0xf8, 0x04, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65,
	0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x22, 0xe0, 0x05, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0,
	0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d,
	0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xb2, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x22, 0xd4, 0x02, 0x0a, 0x04, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x07, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x63, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x32,
	0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x44, 0x65,
	0x63, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x63,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x42, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c,
	0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x63, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x63, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x63, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44,
	0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44,
	0x65, 0x63, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x63, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x63, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44,
	0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x63, 0x6c, 0x12, 0x4a, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x63, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x22, 0xe8, 0x03, 0x0a, 0x08, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x1a, 0xc6, 0x01, 0x0a, 0x04, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x64,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0xda, 0xcf, 0x24, 0x00, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0xda, 0xcf, 0x24, 0x00, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x38, 0x0a, 0x0b, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x76, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x04, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xd2, 0xcf, 0x24, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xd2, 0xcf, 0x24, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0xda, 0xcf, 0x24, 0x00, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0xda, 0xcf, 0x24, 0x00, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x45, 0x64, 0x67, 0x65, 0x42, 0x04, 0xda, 0xcf, 0x24, 0x00, 0x52, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xaf, 0x06, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x73,
	0x12, 0x56, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x45, 0x64, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x12, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x06, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d,
	0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2a,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x63, 0x6c, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75, 0x6e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x52,
	0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a,
	0x18, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xff,
	0x01, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xaa, 0x01, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xa1, 0x11,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x4e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x4e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x11, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x4b, 0x0a, 0x12, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x10, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x45, 0x0a,
	0x10, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x61, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x5e, 0x0a, 0x19, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x57, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x5d, 0x0a, 0x18, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x09, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x48, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x6f, 0x73,
	0x74, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x48, 0x0a, 0x11,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x70, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x35, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x55,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x22, 0x0d, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x22,
	0xed, 0x01, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xbd, 0x02, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6d, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xdd, 0x02, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x8e, 0x07, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x6c,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x42, 0x04, 0xe0, 0xd5, 0x24,
	0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6c,
	0x22, 0xff, 0x04, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xab, 0x01,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xe8, 0x06, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x65,
	0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15,
	0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x8f, 0x04,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xfa, 0x05, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0xda, 0xcf, 0x24, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xfa, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x49, 0x41, 0x53, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12,
	0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x0d, 0x12, 0x11, 0x0a,
	0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e,
	0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x13, 0x22, 0xb0, 0x02, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x8c, 0x03, 0x0a, 0x06, 0x49, 0x66, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x33,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x0a,
	0x74, 0x68, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49,
	0x66, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x06, 0x69, 0x66, 0x53, 0x74, 0x6d, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0xb8,
	0x01, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xed, 0x04, 0x0a, 0x0a, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x07, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a,
	0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x0e, 0x74,
	0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x08, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x6f,
	0x70, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0xd5, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6d,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a,
	0x0a, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x0b, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xda, 0xcf, 0x24, 0x00, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x11, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x17, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb2, 0x03, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xbc, 0x01,
	0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8, 0x01, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x9f, 0x0d, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x33,
	0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c,
	0x0a, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x9a, 0x04, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x1a, 0xc9, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x49, 0x4c, 0x44, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x49, 0x4c, 0x44, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x46,
	0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x73, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x5f, 0x0a, 0x11, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x19,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x04, 0x0a, 0x0b, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x11, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x53, 0x70, 0x61, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04,
	0x76, 0x61, 0x6c, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a,
	0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xc8, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x10,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x8f, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69,
	0x6e, 0x67, 0x1a, 0x55, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x04, 0x0a, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x07, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x74,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75, 0x6e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xfc, 0x04, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74,
	0x6d, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a,
	0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x6d, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x69,
	0x66, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x66, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x69, 0x66, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x77, 0x68,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x57, 0x68, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xcf, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x31, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x22, 0xaf, 0x08, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x63,
	0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24,
	0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x0e,
	0x74, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x32,
	0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x63,
	0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x63,
	0x6c, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8e, 0x02, 0x0a,
	0x09, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x07,
	0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12,
	0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xa8, 0x06, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x75,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x63, 0x6c,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x48, 0x00, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x4a, 0x0a,
	0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x02,
	0x0a, 0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12,
	0x2d, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xf5, 0x04, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x6c,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x10, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x0b, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x04, 0x0a, 0x0c,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x3a, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe0, 0xd5,
	0x24, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x22, 0xc1, 0x02, 0x0a, 0x09, 0x57, 0x68, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x57,
	0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x2a,
	0x87, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x32, 0x4f, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x32, 0x4f, 0x5f, 0x54, 0x57, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x32, 0x4f, 0x5f, 0x53, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x32, 0x4f, 0x5f, 0x42, 0x49,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x11, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x32, 0x4d, 0x10, 0xf0, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x32, 0x4d, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x32, 0x4d, 0x5f, 0x53, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x32, 0x4d, 0x10, 0x80, 0x1e, 0x12,
	0x20, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x32, 0x4d, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x80,
	0x02, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x32, 0x4d, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x80, 0x04, 0x12, 0x24, 0x0a, 0x1f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x32, 0x4d, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x80, 0x06, 0x42, 0x56, 0x0a, 0x16, 0x6f, 0x72, 0x67,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x42, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x3b, 0x6c, 0x61, 0x6e,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mojo_lang_lang_proto_rawDescOnce sync.Once
	file_mojo_lang_lang_proto_rawDescData = file_mojo_lang_lang_proto_rawDesc
)

func file_mojo_lang_lang_proto_rawDescGZIP() []byte {
	file_mojo_lang_lang_proto_rawDescOnce.Do(func() {
		file_mojo_lang_lang_proto_rawDescData = protoimpl.X.CompressGZIP(file_mojo_lang_lang_proto_rawDescData)
	})
	return file_mojo_lang_lang_proto_rawDescData
}

var file_mojo_lang_lang_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mojo_lang_lang_proto_msgTypes = make([]protoimpl.MessageInfo, 119)
var file_mojo_lang_lang_proto_goTypes = []interface{}{
	(RelationType)(0),                     // 0: mojo.lang.RelationType
	(Identifier_Kind)(0),                  // 1: mojo.lang.Identifier.Kind
	(Package_Requirement_Version_Type)(0), // 2: mojo.lang.Package.Requirement.Version.Type
	(*ApplyExpr)(nil),                     // 3: mojo.lang.ApplyExpr
	(*Argument)(nil),                      // 4: mojo.lang.Argument
	(*ArrayLiteralExpr)(nil),              // 5: mojo.lang.ArrayLiteralExpr
	(*AssignmentExpr)(nil),                // 6: mojo.lang.AssignmentExpr
	(*Attribute)(nil),                     // 7: mojo.lang.Attribute
	(*AttributeAliasDecl)(nil),            // 8: mojo.lang.AttributeAliasDecl
	(*AttributeDecl)(nil),                 // 9: mojo.lang.AttributeDecl
	(*BinaryExpr)(nil),                    // 10: mojo.lang.BinaryExpr
	(*BlockStmt)(nil),                     // 11: mojo.lang.BlockStmt
	(*BoolLiteralExpr)(nil),               // 12: mojo.lang.BoolLiteralExpr
	(*BranchStmt)(nil),                    // 13: mojo.lang.BranchStmt
	(*BreakStmt)(nil),                     // 14: mojo.lang.BreakStmt
	(*ClosureExpr)(nil),                   // 15: mojo.lang.ClosureExpr
	(*Comment)(nil),                       // 16: mojo.lang.Comment
	(*BlockComment)(nil),                  // 17: mojo.lang.BlockComment
	(*LineComment)(nil),                   // 18: mojo.lang.LineComment
	(*MultiLineComment)(nil),              // 19: mojo.lang.MultiLineComment
	(*LineBreakComment)(nil),              // 20: mojo.lang.LineBreakComment
	(*ConditionalExpr)(nil),               // 21: mojo.lang.ConditionalExpr
	(*ConstantDecl)(nil),                  // 22: mojo.lang.ConstantDecl
	(*ConstructorDecl)(nil),               // 23: mojo.lang.ConstructorDecl
	(*ContinueStmt)(nil),                  // 24: mojo.lang.ContinueStmt
	(*ControlTransferStmt)(nil),           // 25: mojo.lang.ControlTransferStmt
	(*Decl)(nil),                          // 26: mojo.lang.Decl
	(*Declaration)(nil),                   // 27: mojo.lang.Declaration
	(*MapLiteralExpr)(nil),                // 28: mojo.lang.MapLiteralExpr
	(*Document)(nil),                      // 29: mojo.lang.Document
	(*EntityEdge)(nil),                    // 30: mojo.lang.EntityEdge
	(*EntityEdges)(nil),                   // 31: mojo.lang.EntityEdges
	(*EntityNode)(nil),                    // 32: mojo.lang.EntityNode
	(*EntityRelation)(nil),                // 33: mojo.lang.EntityRelation
	(*EntityRelations)(nil),               // 34: mojo.lang.EntityRelations
	(*EntityRelationSet)(nil),             // 35: mojo.lang.EntityRelationSet
	(*EnumDecl)(nil),                      // 36: mojo.lang.EnumDecl
	(*EnumType)(nil),                      // 37: mojo.lang.EnumType
	(*ErrorExpr)(nil),                     // 38: mojo.lang.ErrorExpr
	(*ExplicitMemberExpr)(nil),            // 39: mojo.lang.ExplicitMemberExpr
	(*Expr)(nil),                          // 40: mojo.lang.Expr
	(*Expression)(nil),                    // 41: mojo.lang.Expression
	(*DynamicLookupExpr)(nil),             // 42: mojo.lang.DynamicLookupExpr
	(*UnresolvedMemberExpr)(nil),          // 43: mojo.lang.UnresolvedMemberExpr
	(*IdentityExpr)(nil),                  // 44: mojo.lang.IdentityExpr
	(*KeyPathApplicationExpr)(nil),        // 45: mojo.lang.KeyPathApplicationExpr
	(*TupleElementExpr)(nil),              // 46: mojo.lang.TupleElementExpr
	(*KeyPathExpr)(nil),                   // 47: mojo.lang.KeyPathExpr
	(*FloatLiteralExpr)(nil),              // 48: mojo.lang.FloatLiteralExpr
	(*ForStmt)(nil),                       // 49: mojo.lang.ForStmt
	(*FunctionCallExpr)(nil),              // 50: mojo.lang.FunctionCallExpr
	(*FunctionDecl)(nil),                  // 51: mojo.lang.FunctionDecl
	(*FunctionSignature)(nil),             // 52: mojo.lang.FunctionSignature
	(*GenericParameter)(nil),              // 53: mojo.lang.GenericParameter
	(*GroupDecl)(nil),                     // 54: mojo.lang.GroupDecl
	(*Identifier)(nil),                    // 55: mojo.lang.Identifier
	(*IdentifierExpr)(nil),                // 56: mojo.lang.IdentifierExpr
	(*IfStmt)(nil),                        // 57: mojo.lang.IfStmt
	(*ImplicitMemberExpr)(nil),            // 58: mojo.lang.ImplicitMemberExpr
	(*ImportDecl)(nil),                    // 59: mojo.lang.ImportDecl
	(*IntegerLiteralExpr)(nil),            // 60: mojo.lang.IntegerLiteralExpr
	(*InterfaceDecl)(nil),                 // 61: mojo.lang.InterfaceDecl
	(*InterfaceType)(nil),                 // 62: mojo.lang.InterfaceType
	(*LiteralExpr)(nil),                   // 63: mojo.lang.LiteralExpr
	(*LoopStmt)(nil),                      // 64: mojo.lang.LoopStmt
	(*MatchCase)(nil),                     // 65: mojo.lang.MatchCase
	(*MatchStmt)(nil),                     // 66: mojo.lang.MatchStmt
	(*NominalType)(nil),                   // 67: mojo.lang.NominalType
	(*NullLiteralExpr)(nil),               // 68: mojo.lang.NullLiteralExpr
	(*NumericLiteralExpr)(nil),            // 69: mojo.lang.NumericLiteralExpr
	(*NumericLiteralUnaryExpr)(nil),       // 70: mojo.lang.NumericLiteralUnaryExpr
	(*ObjectLiteralExpr)(nil),             // 71: mojo.lang.ObjectLiteralExpr
	(*Operator)(nil),                      // 72: mojo.lang.Operator
	(*Package)(nil),                       // 73: mojo.lang.Package
	(*PackageDecl)(nil),                   // 74: mojo.lang.PackageDecl
	(*ParenthesizedExpr)(nil),             // 75: mojo.lang.ParenthesizedExpr
	(*Position)(nil),                      // 76: mojo.lang.Position
	(*PosSpan)(nil),                       // 77: mojo.lang.PosSpan
	(*PostfixUnaryExpr)(nil),              // 78: mojo.lang.PostfixUnaryExpr
	(*PrefixUnaryExpr)(nil),               // 79: mojo.lang.PrefixUnaryExpr
	(*RangeLiteralExpr)(nil),              // 80: mojo.lang.RangeLiteralExpr
	(*RepeatStmt)(nil),                    // 81: mojo.lang.RepeatStmt
	(*ReturnStmt)(nil),                    // 82: mojo.lang.ReturnStmt
	(*Scope)(nil),                         // 83: mojo.lang.Scope
	(*SourceFile)(nil),                    // 84: mojo.lang.SourceFile
	(*Statement)(nil),                     // 85: mojo.lang.Statement
	(*Stmt)(nil),                          // 86: mojo.lang.Stmt
	(*StringLiteralExpr)(nil),             // 87: mojo.lang.StringLiteralExpr
	(*StringLiteralUnaryExpr)(nil),        // 88: mojo.lang.StringLiteralUnaryExpr
	(*StructConstructionExpr)(nil),        // 89: mojo.lang.StructConstructionExpr
	(*StructDecl)(nil),                    // 90: mojo.lang.StructDecl
	(*StructLiteralExpr)(nil),             // 91: mojo.lang.StructLiteralExpr
	(*StructType)(nil),                    // 92: mojo.lang.StructType
	(*SubscriptExpr)(nil),                 // 93: mojo.lang.SubscriptExpr
	(*TupleExpr)(nil),                     // 94: mojo.lang.TupleExpr
	(*TypeAliasDecl)(nil),                 // 95: mojo.lang.TypeAliasDecl
	(*TypeCastingExpr)(nil),               // 96: mojo.lang.TypeCastingExpr
	(*TypeDecl)(nil),                      // 97: mojo.lang.TypeDecl
	(*TypeDeclaration)(nil),               // 98: mojo.lang.TypeDeclaration
	(*UnaryExpr)(nil),                     // 99: mojo.lang.UnaryExpr
	(*ValueDecl)(nil),                     // 100: mojo.lang.ValueDecl
	(*Initializer)(nil),                   // 101: mojo.lang.Initializer
	(*VariableDecl)(nil),                  // 102: mojo.lang.VariableDecl
	(*WhileStmt)(nil),                     // 103: mojo.lang.WhileStmt
	(*WildcardExpr)(nil),                  // 104: mojo.lang.WildcardExpr
	(*MapLiteralExpr_Entry)(nil),          // 105: mojo.lang.MapLiteralExpr.Entry
	(*Document_Line)(nil),                 // 106: mojo.lang.Document.Line
	nil,                                   // 107: mojo.lang.EntityRelationSet.NodesEntry
	nil,                                   // 108: mojo.lang.EntityRelationSet.EdgesEntry
	nil,                                   // 109: mojo.lang.EntityRelationSet.RelationsEntry
	nil,                                   // 110: mojo.lang.EntityRelationSet.NodeEdgesEntry
	nil,                                   // 111: mojo.lang.EntityRelationSet.NodeRelationsEntry
	(*FunctionSignature_Parameter)(nil),   // 112: mojo.lang.FunctionSignature.Parameter
	(*FunctionSignature_Result)(nil),      // 113: mojo.lang.FunctionSignature.Result
	(*ObjectLiteralExpr_Field)(nil),       // 114: mojo.lang.ObjectLiteralExpr.Field
	(*Package_Requirement)(nil),           // 115: mojo.lang.Package.Requirement
	(*Package_Author)(nil),                // 116: mojo.lang.Package.Author
	nil,                                   // 117: mojo.lang.Package.DependenciesEntry
	nil,                                   // 118: mojo.lang.Package.ResolvedDependenciesEntry
	(*Package_Requirement_Version)(nil),   // 119: mojo.lang.Package.Requirement.Version
	(*Package_Requirement_Commit)(nil),    // 120: mojo.lang.Package.Requirement.Commit
	nil,                                   // 121: mojo.lang.Scope.IdentifiersEntry
	(*document.Document)(nil),             // 122: mojo.document.Document
	(*Pattern)(nil),                       // 123: mojo.lang.Pattern
	(*core.Version)(nil),                  // 124: mojo.core.Version
	(*CachedDocument)(nil),                // 125: mojo.lang.CachedDocument
	(*core.Url)(nil),                      // 126: mojo.core.Url
	(*core.Object)(nil),                   // 127: mojo.core.Object
	(*core.IntRange)(nil),                 // 128: mojo.core.IntRange
	(*core.EmailAddress)(nil),             // 129: mojo.core.EmailAddress
	(*core.VersionRange)(nil),             // 130: mojo.core.VersionRange
	(*core.Timestamp)(nil),                // 131: mojo.core.Timestamp
}
var file_mojo_lang_lang_proto_depIdxs = []int32{
	76,  // 0: mojo.lang.ApplyExpr.start_position:type_name -> mojo.lang.Position
	76,  // 1: mojo.lang.ApplyExpr.end_position:type_name -> mojo.lang.Position
	41,  // 2: mojo.lang.ApplyExpr.callee:type_name -> mojo.lang.Expression
	76,  // 3: mojo.lang.Argument.start_position:type_name -> mojo.lang.Position
	76,  // 4: mojo.lang.Argument.end_position:type_name -> mojo.lang.Position
	41,  // 5: mojo.lang.Argument.value:type_name -> mojo.lang.Expression
	76,  // 6: mojo.lang.ArrayLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 7: mojo.lang.ArrayLiteralExpr.end_position:type_name -> mojo.lang.Position
	41,  // 8: mojo.lang.ArrayLiteralExpr.elements:type_name -> mojo.lang.Expression
	76,  // 9: mojo.lang.AssignmentExpr.start_position:type_name -> mojo.lang.Position
	76,  // 10: mojo.lang.AssignmentExpr.end_position:type_name -> mojo.lang.Position
	41,  // 11: mojo.lang.AssignmentExpr.callee:type_name -> mojo.lang.Expression
	72,  // 12: mojo.lang.AssignmentExpr.operator:type_name -> mojo.lang.Operator
	41,  // 13: mojo.lang.AssignmentExpr.left_hand_argument:type_name -> mojo.lang.Expression
	41,  // 14: mojo.lang.AssignmentExpr.right_hand_argument:type_name -> mojo.lang.Expression
	76,  // 15: mojo.lang.Attribute.start_position:type_name -> mojo.lang.Position
	76,  // 16: mojo.lang.Attribute.end_position:type_name -> mojo.lang.Position
	29,  // 17: mojo.lang.Attribute.document:type_name -> mojo.lang.Document
	9,   // 18: mojo.lang.Attribute.declaration:type_name -> mojo.lang.AttributeDecl
	67,  // 19: mojo.lang.Attribute.generic_arguments:type_name -> mojo.lang.NominalType
	4,   // 20: mojo.lang.Attribute.arguments:type_name -> mojo.lang.Argument
	76,  // 21: mojo.lang.Attribute.name_position:type_name -> mojo.lang.Position
	41,  // 22: mojo.lang.Attribute.value:type_name -> mojo.lang.Expression
	76,  // 23: mojo.lang.AttributeAliasDecl.start_position:type_name -> mojo.lang.Position
	76,  // 24: mojo.lang.AttributeAliasDecl.end_position:type_name -> mojo.lang.Position
	29,  // 25: mojo.lang.AttributeAliasDecl.document:type_name -> mojo.lang.Document
	76,  // 26: mojo.lang.AttributeAliasDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 27: mojo.lang.AttributeAliasDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 28: mojo.lang.AttributeAliasDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	54,  // 29: mojo.lang.AttributeAliasDecl.group:type_name -> mojo.lang.GroupDecl
	55,  // 30: mojo.lang.AttributeAliasDecl.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 31: mojo.lang.AttributeAliasDecl.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 32: mojo.lang.AttributeAliasDecl.name_position:type_name -> mojo.lang.Position
	7,   // 33: mojo.lang.AttributeAliasDecl.attribute:type_name -> mojo.lang.Attribute
	83,  // 34: mojo.lang.AttributeAliasDecl.scope:type_name -> mojo.lang.Scope
	76,  // 35: mojo.lang.AttributeDecl.start_position:type_name -> mojo.lang.Position
	76,  // 36: mojo.lang.AttributeDecl.end_position:type_name -> mojo.lang.Position
	29,  // 37: mojo.lang.AttributeDecl.document:type_name -> mojo.lang.Document
	76,  // 38: mojo.lang.AttributeDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 39: mojo.lang.AttributeDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 40: mojo.lang.AttributeDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	54,  // 41: mojo.lang.AttributeDecl.group:type_name -> mojo.lang.GroupDecl
	55,  // 42: mojo.lang.AttributeDecl.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 43: mojo.lang.AttributeDecl.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 44: mojo.lang.AttributeDecl.name_position:type_name -> mojo.lang.Position
	67,  // 45: mojo.lang.AttributeDecl.nominal_type:type_name -> mojo.lang.NominalType
	92,  // 46: mojo.lang.AttributeDecl.struct_type:type_name -> mojo.lang.StructType
	41,  // 47: mojo.lang.AttributeDecl.default_value:type_name -> mojo.lang.Expression
	83,  // 48: mojo.lang.AttributeDecl.scope:type_name -> mojo.lang.Scope
	76,  // 49: mojo.lang.BinaryExpr.start_position:type_name -> mojo.lang.Position
	76,  // 50: mojo.lang.BinaryExpr.end_position:type_name -> mojo.lang.Position
	41,  // 51: mojo.lang.BinaryExpr.callee:type_name -> mojo.lang.Expression
	72,  // 52: mojo.lang.BinaryExpr.operator:type_name -> mojo.lang.Operator
	41,  // 53: mojo.lang.BinaryExpr.left_hand_argument:type_name -> mojo.lang.Expression
	41,  // 54: mojo.lang.BinaryExpr.right_hand_argument:type_name -> mojo.lang.Expression
	76,  // 55: mojo.lang.BlockStmt.start_position:type_name -> mojo.lang.Position
	76,  // 56: mojo.lang.BlockStmt.end_position:type_name -> mojo.lang.Position
	85,  // 57: mojo.lang.BlockStmt.statements:type_name -> mojo.lang.Statement
	76,  // 58: mojo.lang.BoolLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 59: mojo.lang.BoolLiteralExpr.end_position:type_name -> mojo.lang.Position
	76,  // 60: mojo.lang.BranchStmt.start_position:type_name -> mojo.lang.Position
	76,  // 61: mojo.lang.BranchStmt.end_position:type_name -> mojo.lang.Position
	76,  // 62: mojo.lang.BreakStmt.start_position:type_name -> mojo.lang.Position
	76,  // 63: mojo.lang.BreakStmt.end_position:type_name -> mojo.lang.Position
	76,  // 64: mojo.lang.ClosureExpr.start_position:type_name -> mojo.lang.Position
	76,  // 65: mojo.lang.ClosureExpr.end_position:type_name -> mojo.lang.Position
	29,  // 66: mojo.lang.ClosureExpr.document:type_name -> mojo.lang.Document
	76,  // 67: mojo.lang.ClosureExpr.keyword_position:type_name -> mojo.lang.Position
	7,   // 68: mojo.lang.ClosureExpr.attributes:type_name -> mojo.lang.Attribute
	53,  // 69: mojo.lang.ClosureExpr.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 70: mojo.lang.ClosureExpr.enclosing:type_name -> mojo.lang.NominalType
	76,  // 71: mojo.lang.ClosureExpr.name_position:type_name -> mojo.lang.Position
	52,  // 72: mojo.lang.ClosureExpr.signature:type_name -> mojo.lang.FunctionSignature
	11,  // 73: mojo.lang.ClosureExpr.body:type_name -> mojo.lang.BlockStmt
	67,  // 74: mojo.lang.ClosureExpr.receiver:type_name -> mojo.lang.NominalType
	83,  // 75: mojo.lang.ClosureExpr.scope:type_name -> mojo.lang.Scope
	61,  // 76: mojo.lang.ClosureExpr.interface_decl:type_name -> mojo.lang.InterfaceDecl
	17,  // 77: mojo.lang.Comment.block_comment:type_name -> mojo.lang.BlockComment
	19,  // 78: mojo.lang.Comment.multi_line_comment:type_name -> mojo.lang.MultiLineComment
	20,  // 79: mojo.lang.Comment.line_break_comment:type_name -> mojo.lang.LineBreakComment
	29,  // 80: mojo.lang.Comment.document:type_name -> mojo.lang.Document
	76,  // 81: mojo.lang.BlockComment.start_position:type_name -> mojo.lang.Position
	76,  // 82: mojo.lang.BlockComment.end_position:type_name -> mojo.lang.Position
	76,  // 83: mojo.lang.LineComment.start_position:type_name -> mojo.lang.Position
	76,  // 84: mojo.lang.LineComment.end_position:type_name -> mojo.lang.Position
	76,  // 85: mojo.lang.MultiLineComment.start_position:type_name -> mojo.lang.Position
	76,  // 86: mojo.lang.MultiLineComment.end_position:type_name -> mojo.lang.Position
	18,  // 87: mojo.lang.MultiLineComment.lines:type_name -> mojo.lang.LineComment
	76,  // 88: mojo.lang.LineBreakComment.start_position:type_name -> mojo.lang.Position
	76,  // 89: mojo.lang.LineBreakComment.end_position:type_name -> mojo.lang.Position
	76,  // 90: mojo.lang.ConditionalExpr.start_position:type_name -> mojo.lang.Position
	76,  // 91: mojo.lang.ConditionalExpr.end_position:type_name -> mojo.lang.Position
	41,  // 92: mojo.lang.ConditionalExpr.condition:type_name -> mojo.lang.Expression
	41,  // 93: mojo.lang.ConditionalExpr.then_branch:type_name -> mojo.lang.Expression
	41,  // 94: mojo.lang.ConditionalExpr.else_branch:type_name -> mojo.lang.Expression
	76,  // 95: mojo.lang.ConstantDecl.start_position:type_name -> mojo.lang.Position
	76,  // 96: mojo.lang.ConstantDecl.end_position:type_name -> mojo.lang.Position
	29,  // 97: mojo.lang.ConstantDecl.document:type_name -> mojo.lang.Document
	76,  // 98: mojo.lang.ConstantDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 99: mojo.lang.ConstantDecl.attributes:type_name -> mojo.lang.Attribute
	54,  // 100: mojo.lang.ConstantDecl.group:type_name -> mojo.lang.GroupDecl
	76,  // 101: mojo.lang.ConstantDecl.name_position:type_name -> mojo.lang.Position
	67,  // 102: mojo.lang.ConstantDecl.type:type_name -> mojo.lang.NominalType
	101, // 103: mojo.lang.ConstantDecl.initializer:type_name -> mojo.lang.Initializer
	76,  // 104: mojo.lang.ConstructorDecl.start_position:type_name -> mojo.lang.Position
	76,  // 105: mojo.lang.ConstructorDecl.end_position:type_name -> mojo.lang.Position
	29,  // 106: mojo.lang.ConstructorDecl.document:type_name -> mojo.lang.Document
	76,  // 107: mojo.lang.ConstructorDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 108: mojo.lang.ConstructorDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 109: mojo.lang.ConstructorDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	76,  // 110: mojo.lang.ConstructorDecl.name_position:type_name -> mojo.lang.Position
	52,  // 111: mojo.lang.ConstructorDecl.signature:type_name -> mojo.lang.FunctionSignature
	11,  // 112: mojo.lang.ConstructorDecl.body:type_name -> mojo.lang.BlockStmt
	83,  // 113: mojo.lang.ConstructorDecl.scope:type_name -> mojo.lang.Scope
	76,  // 114: mojo.lang.ContinueStmt.start_position:type_name -> mojo.lang.Position
	76,  // 115: mojo.lang.ContinueStmt.end_position:type_name -> mojo.lang.Position
	76,  // 116: mojo.lang.ControlTransferStmt.start_position:type_name -> mojo.lang.Position
	76,  // 117: mojo.lang.ControlTransferStmt.end_position:type_name -> mojo.lang.Position
	76,  // 118: mojo.lang.Decl.start_position:type_name -> mojo.lang.Position
	76,  // 119: mojo.lang.Decl.end_position:type_name -> mojo.lang.Position
	29,  // 120: mojo.lang.Decl.document:type_name -> mojo.lang.Document
	76,  // 121: mojo.lang.Decl.keyword_position:type_name -> mojo.lang.Position
	74,  // 122: mojo.lang.Declaration.package_decl:type_name -> mojo.lang.PackageDecl
	59,  // 123: mojo.lang.Declaration.import_decl:type_name -> mojo.lang.ImportDecl
	36,  // 124: mojo.lang.Declaration.enum_decl:type_name -> mojo.lang.EnumDecl
	90,  // 125: mojo.lang.Declaration.struct_decl:type_name -> mojo.lang.StructDecl
	95,  // 126: mojo.lang.Declaration.type_alias_decl:type_name -> mojo.lang.TypeAliasDecl
	61,  // 127: mojo.lang.Declaration.interface_decl:type_name -> mojo.lang.InterfaceDecl
	22,  // 128: mojo.lang.Declaration.constant_decl:type_name -> mojo.lang.ConstantDecl
	102, // 129: mojo.lang.Declaration.variable_decl:type_name -> mojo.lang.VariableDecl
	9,   // 130: mojo.lang.Declaration.attribute_decl:type_name -> mojo.lang.AttributeDecl
	8,   // 131: mojo.lang.Declaration.attribute_alias_decl:type_name -> mojo.lang.AttributeAliasDecl
	51,  // 132: mojo.lang.Declaration.function_decl:type_name -> mojo.lang.FunctionDecl
	23,  // 133: mojo.lang.Declaration.constructor_decl:type_name -> mojo.lang.ConstructorDecl
	53,  // 134: mojo.lang.Declaration.generic_parameter:type_name -> mojo.lang.GenericParameter
	54,  // 135: mojo.lang.Declaration.group_decl:type_name -> mojo.lang.GroupDecl
	76,  // 136: mojo.lang.MapLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 137: mojo.lang.MapLiteralExpr.end_position:type_name -> mojo.lang.Position
	105, // 138: mojo.lang.MapLiteralExpr.entries:type_name -> mojo.lang.MapLiteralExpr.Entry
	76,  // 139: mojo.lang.Document.start_position:type_name -> mojo.lang.Position
	76,  // 140: mojo.lang.Document.end_position:type_name -> mojo.lang.Position
	106, // 141: mojo.lang.Document.lines:type_name -> mojo.lang.Document.Line
	122, // 142: mojo.lang.Document.structured:type_name -> mojo.document.Document
	32,  // 143: mojo.lang.EntityEdge.from:type_name -> mojo.lang.EntityNode
	32,  // 144: mojo.lang.EntityEdge.to:type_name -> mojo.lang.EntityNode
	100, // 145: mojo.lang.EntityEdge.reference_field:type_name -> mojo.lang.ValueDecl
	30,  // 146: mojo.lang.EntityEdges.vals:type_name -> mojo.lang.EntityEdge
	98,  // 147: mojo.lang.EntityNode.type_declaration:type_name -> mojo.lang.TypeDeclaration
	100, // 148: mojo.lang.EntityNode.key_field:type_name -> mojo.lang.ValueDecl
	0,   // 149: mojo.lang.EntityRelation.type:type_name -> mojo.lang.RelationType
	32,  // 150: mojo.lang.EntityRelation.from:type_name -> mojo.lang.EntityNode
	32,  // 151: mojo.lang.EntityRelation.to:type_name -> mojo.lang.EntityNode
	30,  // 152: mojo.lang.EntityRelation.edges:type_name -> mojo.lang.EntityEdge
	33,  // 153: mojo.lang.EntityRelations.vals:type_name -> mojo.lang.EntityRelation
	107, // 154: mojo.lang.EntityRelationSet.nodes:type_name -> mojo.lang.EntityRelationSet.NodesEntry
	108, // 155: mojo.lang.EntityRelationSet.edges:type_name -> mojo.lang.EntityRelationSet.EdgesEntry
	109, // 156: mojo.lang.EntityRelationSet.relations:type_name -> mojo.lang.EntityRelationSet.RelationsEntry
	110, // 157: mojo.lang.EntityRelationSet.node_edges:type_name -> mojo.lang.EntityRelationSet.NodeEdgesEntry
	111, // 158: mojo.lang.EntityRelationSet.node_relations:type_name -> mojo.lang.EntityRelationSet.NodeRelationsEntry
	76,  // 159: mojo.lang.EnumDecl.start_position:type_name -> mojo.lang.Position
	76,  // 160: mojo.lang.EnumDecl.end_position:type_name -> mojo.lang.Position
	29,  // 161: mojo.lang.EnumDecl.document:type_name -> mojo.lang.Document
	76,  // 162: mojo.lang.EnumDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 163: mojo.lang.EnumDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 164: mojo.lang.EnumDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 165: mojo.lang.EnumDecl.enclosing:type_name -> mojo.lang.NominalType
	54,  // 166: mojo.lang.EnumDecl.group:type_name -> mojo.lang.GroupDecl
	55,  // 167: mojo.lang.EnumDecl.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 168: mojo.lang.EnumDecl.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 169: mojo.lang.EnumDecl.name_position:type_name -> mojo.lang.Position
	37,  // 170: mojo.lang.EnumDecl.type:type_name -> mojo.lang.EnumType
	83,  // 171: mojo.lang.EnumDecl.scope:type_name -> mojo.lang.Scope
	76,  // 172: mojo.lang.EnumType.start_position:type_name -> mojo.lang.Position
	76,  // 173: mojo.lang.EnumType.end_position:type_name -> mojo.lang.Position
	100, // 174: mojo.lang.EnumType.enumerators:type_name -> mojo.lang.ValueDecl
	67,  // 175: mojo.lang.EnumType.underlying_type:type_name -> mojo.lang.NominalType
	76,  // 176: mojo.lang.EnumType.underlying_type_position:type_name -> mojo.lang.Position
	76,  // 177: mojo.lang.ErrorExpr.start_position:type_name -> mojo.lang.Position
	76,  // 178: mojo.lang.ErrorExpr.end_position:type_name -> mojo.lang.Position
	76,  // 179: mojo.lang.ExplicitMemberExpr.start_position:type_name -> mojo.lang.Position
	76,  // 180: mojo.lang.ExplicitMemberExpr.end_position:type_name -> mojo.lang.Position
	41,  // 181: mojo.lang.ExplicitMemberExpr.callee:type_name -> mojo.lang.Expression
	76,  // 182: mojo.lang.Expr.start_position:type_name -> mojo.lang.Position
	76,  // 183: mojo.lang.Expr.end_position:type_name -> mojo.lang.Position
	68,  // 184: mojo.lang.Expression.null_literal_expr:type_name -> mojo.lang.NullLiteralExpr
	60,  // 185: mojo.lang.Expression.integer_literal_expr:type_name -> mojo.lang.IntegerLiteralExpr
	48,  // 186: mojo.lang.Expression.float_literal_expr:type_name -> mojo.lang.FloatLiteralExpr
	12,  // 187: mojo.lang.Expression.bool_literal_expr:type_name -> mojo.lang.BoolLiteralExpr
	87,  // 188: mojo.lang.Expression.string_literal_expr:type_name -> mojo.lang.StringLiteralExpr
	71,  // 189: mojo.lang.Expression.object_literal_expr:type_name -> mojo.lang.ObjectLiteralExpr
	5,   // 190: mojo.lang.Expression.array_literal_expr:type_name -> mojo.lang.ArrayLiteralExpr
	28,  // 191: mojo.lang.Expression.map_literal_expr:type_name -> mojo.lang.MapLiteralExpr
	80,  // 192: mojo.lang.Expression.range_literal_expr:type_name -> mojo.lang.RangeLiteralExpr
	56,  // 193: mojo.lang.Expression.identifier_expr:type_name -> mojo.lang.IdentifierExpr
	70,  // 194: mojo.lang.Expression.numeric_literal_unary_expr:type_name -> mojo.lang.NumericLiteralUnaryExpr
	88,  // 195: mojo.lang.Expression.string_literal_unary_expr:type_name -> mojo.lang.StringLiteralUnaryExpr
	91,  // 196: mojo.lang.Expression.struct_literal_expr:type_name -> mojo.lang.StructLiteralExpr
	15,  // 197: mojo.lang.Expression.closure_expr:type_name -> mojo.lang.ClosureExpr
	75,  // 198: mojo.lang.Expression.parenthesized_expr:type_name -> mojo.lang.ParenthesizedExpr
	58,  // 199: mojo.lang.Expression.implicit_member_expr:type_name -> mojo.lang.ImplicitMemberExpr
	104, // 200: mojo.lang.Expression.wildcard_expr:type_name -> mojo.lang.WildcardExpr
	89,  // 201: mojo.lang.Expression.struct_construction_expr:type_name -> mojo.lang.StructConstructionExpr
	94,  // 202: mojo.lang.Expression.tuple_expr:type_name -> mojo.lang.TupleExpr
	79,  // 203: mojo.lang.Expression.prefix_unary_expr:type_name -> mojo.lang.PrefixUnaryExpr
	78,  // 204: mojo.lang.Expression.postfix_unary_expr:type_name -> mojo.lang.PostfixUnaryExpr
	50,  // 205: mojo.lang.Expression.function_call_expr:type_name -> mojo.lang.FunctionCallExpr
	39,  // 206: mojo.lang.Expression.explicit_member_expr:type_name -> mojo.lang.ExplicitMemberExpr
	93,  // 207: mojo.lang.Expression.subscript_expr:type_name -> mojo.lang.SubscriptExpr
	10,  // 208: mojo.lang.Expression.binary_expr:type_name -> mojo.lang.BinaryExpr
	21,  // 209: mojo.lang.Expression.conditional_expr:type_name -> mojo.lang.ConditionalExpr
	96,  // 210: mojo.lang.Expression.type_casting_expr:type_name -> mojo.lang.TypeCastingExpr
	6,   // 211: mojo.lang.Expression.assignment_expr:type_name -> mojo.lang.AssignmentExpr
	38,  // 212: mojo.lang.Expression.error_expr:type_name -> mojo.lang.ErrorExpr
	76,  // 213: mojo.lang.DynamicLookupExpr.start_position:type_name -> mojo.lang.Position
	76,  // 214: mojo.lang.DynamicLookupExpr.end_position:type_name -> mojo.lang.Position
	76,  // 215: mojo.lang.IdentityExpr.start_position:type_name -> mojo.lang.Position
	76,  // 216: mojo.lang.IdentityExpr.end_position:type_name -> mojo.lang.Position
	76,  // 217: mojo.lang.KeyPathApplicationExpr.start_position:type_name -> mojo.lang.Position
	76,  // 218: mojo.lang.KeyPathApplicationExpr.end_position:type_name -> mojo.lang.Position
	76,  // 219: mojo.lang.TupleElementExpr.start_position:type_name -> mojo.lang.Position
	76,  // 220: mojo.lang.TupleElementExpr.end_position:type_name -> mojo.lang.Position
	76,  // 221: mojo.lang.FloatLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 222: mojo.lang.FloatLiteralExpr.end_position:type_name -> mojo.lang.Position
	76,  // 223: mojo.lang.ForStmt.start_position:type_name -> mojo.lang.Position
	76,  // 224: mojo.lang.ForStmt.end_position:type_name -> mojo.lang.Position
	11,  // 225: mojo.lang.ForStmt.body:type_name -> mojo.lang.BlockStmt
	41,  // 226: mojo.lang.ForStmt.iterator:type_name -> mojo.lang.Expression
	41,  // 227: mojo.lang.ForStmt.sequence:type_name -> mojo.lang.Expression
	76,  // 228: mojo.lang.FunctionCallExpr.start_position:type_name -> mojo.lang.Position
	76,  // 229: mojo.lang.FunctionCallExpr.end_position:type_name -> mojo.lang.Position
	41,  // 230: mojo.lang.FunctionCallExpr.callee:type_name -> mojo.lang.Expression
	67,  // 231: mojo.lang.FunctionCallExpr.generic_arguments:type_name -> mojo.lang.NominalType
	4,   // 232: mojo.lang.FunctionCallExpr.arguments:type_name -> mojo.lang.Argument
	76,  // 233: mojo.lang.FunctionDecl.start_position:type_name -> mojo.lang.Position
	76,  // 234: mojo.lang.FunctionDecl.end_position:type_name -> mojo.lang.Position
	29,  // 235: mojo.lang.FunctionDecl.document:type_name -> mojo.lang.Document
	76,  // 236: mojo.lang.FunctionDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 237: mojo.lang.FunctionDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 238: mojo.lang.FunctionDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 239: mojo.lang.FunctionDecl.enclosing:type_name -> mojo.lang.NominalType
	76,  // 240: mojo.lang.FunctionDecl.name_position:type_name -> mojo.lang.Position
	52,  // 241: mojo.lang.FunctionDecl.signature:type_name -> mojo.lang.FunctionSignature
	11,  // 242: mojo.lang.FunctionDecl.body:type_name -> mojo.lang.BlockStmt
	67,  // 243: mojo.lang.FunctionDecl.receiver:type_name -> mojo.lang.NominalType
	83,  // 244: mojo.lang.FunctionDecl.scope:type_name -> mojo.lang.Scope
	61,  // 245: mojo.lang.FunctionDecl.interface_decl:type_name -> mojo.lang.InterfaceDecl
	76,  // 246: mojo.lang.FunctionSignature.start_position:type_name -> mojo.lang.Position
	76,  // 247: mojo.lang.FunctionSignature.end_position:type_name -> mojo.lang.Position
	112, // 248: mojo.lang.FunctionSignature.parameter:type_name -> mojo.lang.FunctionSignature.Parameter
	113, // 249: mojo.lang.FunctionSignature.result:type_name -> mojo.lang.FunctionSignature.Result
	76,  // 250: mojo.lang.GenericParameter.start_position:type_name -> mojo.lang.Position
	76,  // 251: mojo.lang.GenericParameter.end_position:type_name -> mojo.lang.Position
	29,  // 252: mojo.lang.GenericParameter.document:type_name -> mojo.lang.Document
	76,  // 253: mojo.lang.GenericParameter.keyword_position:type_name -> mojo.lang.Position
	7,   // 254: mojo.lang.GenericParameter.attributes:type_name -> mojo.lang.Attribute
	53,  // 255: mojo.lang.GenericParameter.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 256: mojo.lang.GenericParameter.enclosing:type_name -> mojo.lang.NominalType
	54,  // 257: mojo.lang.GenericParameter.group:type_name -> mojo.lang.GroupDecl
	55,  // 258: mojo.lang.GenericParameter.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 259: mojo.lang.GenericParameter.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 260: mojo.lang.GenericParameter.name_position:type_name -> mojo.lang.Position
	67,  // 261: mojo.lang.GenericParameter.constraint:type_name -> mojo.lang.NominalType
	76,  // 262: mojo.lang.GroupDecl.start_position:type_name -> mojo.lang.Position
	76,  // 263: mojo.lang.GroupDecl.end_position:type_name -> mojo.lang.Position
	29,  // 264: mojo.lang.GroupDecl.document:type_name -> mojo.lang.Document
	76,  // 265: mojo.lang.GroupDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 266: mojo.lang.GroupDecl.attributes:type_name -> mojo.lang.Attribute
	1,   // 267: mojo.lang.GroupDecl.type:type_name -> mojo.lang.Identifier.Kind
	27,  // 268: mojo.lang.GroupDecl.declarations:type_name -> mojo.lang.Declaration
	76,  // 269: mojo.lang.Identifier.start_position:type_name -> mojo.lang.Position
	76,  // 270: mojo.lang.Identifier.end_position:type_name -> mojo.lang.Position
	1,   // 271: mojo.lang.Identifier.kind:type_name -> mojo.lang.Identifier.Kind
	27,  // 272: mojo.lang.Identifier.declaration:type_name -> mojo.lang.Declaration
	55,  // 273: mojo.lang.Identifier.enclosing:type_name -> mojo.lang.Identifier
	83,  // 274: mojo.lang.Identifier.scope:type_name -> mojo.lang.Scope
	76,  // 275: mojo.lang.IdentifierExpr.start_position:type_name -> mojo.lang.Position
	76,  // 276: mojo.lang.IdentifierExpr.end_position:type_name -> mojo.lang.Position
	55,  // 277: mojo.lang.IdentifierExpr.identifier:type_name -> mojo.lang.Identifier
	67,  // 278: mojo.lang.IdentifierExpr.generic_arguments:type_name -> mojo.lang.NominalType
	76,  // 279: mojo.lang.IfStmt.start_position:type_name -> mojo.lang.Position
	76,  // 280: mojo.lang.IfStmt.end_position:type_name -> mojo.lang.Position
	41,  // 281: mojo.lang.IfStmt.condition:type_name -> mojo.lang.Expression
	11,  // 282: mojo.lang.IfStmt.then_branch:type_name -> mojo.lang.BlockStmt
	11,  // 283: mojo.lang.IfStmt.block_stmt:type_name -> mojo.lang.BlockStmt
	57,  // 284: mojo.lang.IfStmt.if_stmt:type_name -> mojo.lang.IfStmt
	76,  // 285: mojo.lang.ImplicitMemberExpr.start_position:type_name -> mojo.lang.Position
	76,  // 286: mojo.lang.ImplicitMemberExpr.end_position:type_name -> mojo.lang.Position
	76,  // 287: mojo.lang.ImportDecl.start_position:type_name -> mojo.lang.Position
	76,  // 288: mojo.lang.ImportDecl.end_position:type_name -> mojo.lang.Position
	29,  // 289: mojo.lang.ImportDecl.document:type_name -> mojo.lang.Document
	76,  // 290: mojo.lang.ImportDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 291: mojo.lang.ImportDecl.attributes:type_name -> mojo.lang.Attribute
	55,  // 292: mojo.lang.ImportDecl.identifiers:type_name -> mojo.lang.Identifier
	76,  // 293: mojo.lang.IntegerLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 294: mojo.lang.IntegerLiteralExpr.end_position:type_name -> mojo.lang.Position
	76,  // 295: mojo.lang.InterfaceDecl.start_position:type_name -> mojo.lang.Position
	76,  // 296: mojo.lang.InterfaceDecl.end_position:type_name -> mojo.lang.Position
	29,  // 297: mojo.lang.InterfaceDecl.document:type_name -> mojo.lang.Document
	76,  // 298: mojo.lang.InterfaceDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 299: mojo.lang.InterfaceDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 300: mojo.lang.InterfaceDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 301: mojo.lang.InterfaceDecl.enclosing:type_name -> mojo.lang.NominalType
	54,  // 302: mojo.lang.InterfaceDecl.group:type_name -> mojo.lang.GroupDecl
	55,  // 303: mojo.lang.InterfaceDecl.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 304: mojo.lang.InterfaceDecl.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 305: mojo.lang.InterfaceDecl.name_position:type_name -> mojo.lang.Position
	62,  // 306: mojo.lang.InterfaceDecl.type:type_name -> mojo.lang.InterfaceType
	95,  // 307: mojo.lang.InterfaceDecl.type_alias_decls:type_name -> mojo.lang.TypeAliasDecl
	83,  // 308: mojo.lang.InterfaceDecl.scope:type_name -> mojo.lang.Scope
	76,  // 309: mojo.lang.InterfaceType.start_position:type_name -> mojo.lang.Position
	76,  // 310: mojo.lang.InterfaceType.end_position:type_name -> mojo.lang.Position
	51,  // 311: mojo.lang.InterfaceType.methods:type_name -> mojo.lang.FunctionDecl
	67,  // 312: mojo.lang.InterfaceType.inherits:type_name -> mojo.lang.NominalType
	76,  // 313: mojo.lang.InterfaceType.inherite_position:type_name -> mojo.lang.Position
	76,  // 314: mojo.lang.LiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 315: mojo.lang.LiteralExpr.end_position:type_name -> mojo.lang.Position
	76,  // 316: mojo.lang.LoopStmt.start_position:type_name -> mojo.lang.Position
	76,  // 317: mojo.lang.LoopStmt.end_position:type_name -> mojo.lang.Position
	11,  // 318: mojo.lang.LoopStmt.body:type_name -> mojo.lang.BlockStmt
	76,  // 319: mojo.lang.MatchCase.start_position:type_name -> mojo.lang.Position
	76,  // 320: mojo.lang.MatchCase.end_position:type_name -> mojo.lang.Position
	123, // 321: mojo.lang.MatchCase.pattern:type_name -> mojo.lang.Pattern
	11,  // 322: mojo.lang.MatchCase.block_stmt:type_name -> mojo.lang.BlockStmt
	41,  // 323: mojo.lang.MatchCase.expression:type_name -> mojo.lang.Expression
	76,  // 324: mojo.lang.MatchStmt.start_position:type_name -> mojo.lang.Position
	76,  // 325: mojo.lang.MatchStmt.end_position:type_name -> mojo.lang.Position
	41,  // 326: mojo.lang.MatchStmt.subject:type_name -> mojo.lang.Expression
	65,  // 327: mojo.lang.MatchStmt.cases:type_name -> mojo.lang.MatchCase
	76,  // 328: mojo.lang.NominalType.start_position:type_name -> mojo.lang.Position
	76,  // 329: mojo.lang.NominalType.end_position:type_name -> mojo.lang.Position
	29,  // 330: mojo.lang.NominalType.document:type_name -> mojo.lang.Document
	7,   // 331: mojo.lang.NominalType.attributes:type_name -> mojo.lang.Attribute
	98,  // 332: mojo.lang.NominalType.type_declaration:type_name -> mojo.lang.TypeDeclaration
	67,  // 333: mojo.lang.NominalType.enclosing:type_name -> mojo.lang.NominalType
	67,  // 334: mojo.lang.NominalType.generic_arguments:type_name -> mojo.lang.NominalType
	76,  // 335: mojo.lang.NullLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 336: mojo.lang.NullLiteralExpr.end_position:type_name -> mojo.lang.Position
	76,  // 337: mojo.lang.NumericLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 338: mojo.lang.NumericLiteralExpr.end_position:type_name -> mojo.lang.Position
	76,  // 339: mojo.lang.NumericLiteralUnaryExpr.start_position:type_name -> mojo.lang.Position
	76,  // 340: mojo.lang.NumericLiteralUnaryExpr.end_position:type_name -> mojo.lang.Position
	41,  // 341: mojo.lang.NumericLiteralUnaryExpr.callee:type_name -> mojo.lang.Expression
	72,  // 342: mojo.lang.NumericLiteralUnaryExpr.operator:type_name -> mojo.lang.Operator
	41,  // 343: mojo.lang.NumericLiteralUnaryExpr.argument:type_name -> mojo.lang.Expression
	76,  // 344: mojo.lang.ObjectLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 345: mojo.lang.ObjectLiteralExpr.end_position:type_name -> mojo.lang.Position
	114, // 346: mojo.lang.ObjectLiteralExpr.fields:type_name -> mojo.lang.ObjectLiteralExpr.Field
	76,  // 347: mojo.lang.Operator.start_position:type_name -> mojo.lang.Position
	76,  // 348: mojo.lang.Operator.end_position:type_name -> mojo.lang.Position
	124, // 349: mojo.lang.Package.version:type_name -> mojo.core.Version
	73,  // 350: mojo.lang.Package.children:type_name -> mojo.lang.Package
	116, // 351: mojo.lang.Package.authors:type_name -> mojo.lang.Package.Author
	125, // 352: mojo.lang.Package.document:type_name -> mojo.lang.CachedDocument
	126, // 353: mojo.lang.Package.repository:type_name -> mojo.core.Url
	84,  // 354: mojo.lang.Package.source_files:type_name -> mojo.lang.SourceFile
	83,  // 355: mojo.lang.Package.scope:type_name -> mojo.lang.Scope
	127, // 356: mojo.lang.Package.extra_info:type_name -> mojo.core.Object
	35,  // 357: mojo.lang.Package.entity_relation_set:type_name -> mojo.lang.EntityRelationSet
	117, // 358: mojo.lang.Package.dependencies:type_name -> mojo.lang.Package.DependenciesEntry
	118, // 359: mojo.lang.Package.resolved_dependencies:type_name -> mojo.lang.Package.ResolvedDependenciesEntry
	76,  // 360: mojo.lang.PackageDecl.start_position:type_name -> mojo.lang.Position
	76,  // 361: mojo.lang.PackageDecl.end_position:type_name -> mojo.lang.Position
	29,  // 362: mojo.lang.PackageDecl.document:type_name -> mojo.lang.Document
	76,  // 363: mojo.lang.PackageDecl.keyword_position:type_name -> mojo.lang.Position
	71,  // 364: mojo.lang.PackageDecl.package_literal_expr:type_name -> mojo.lang.ObjectLiteralExpr
	73,  // 365: mojo.lang.PackageDecl.package:type_name -> mojo.lang.Package
	76,  // 366: mojo.lang.PackageDecl.name_position:type_name -> mojo.lang.Position
	76,  // 367: mojo.lang.ParenthesizedExpr.start_position:type_name -> mojo.lang.Position
	76,  // 368: mojo.lang.ParenthesizedExpr.end_position:type_name -> mojo.lang.Position
	41,  // 369: mojo.lang.ParenthesizedExpr.expression:type_name -> mojo.lang.Expression
	16,  // 370: mojo.lang.Position.leading_comments:type_name -> mojo.lang.Comment
	16,  // 371: mojo.lang.Position.tailing_comments:type_name -> mojo.lang.Comment
	76,  // 372: mojo.lang.PostfixUnaryExpr.start_position:type_name -> mojo.lang.Position
	76,  // 373: mojo.lang.PostfixUnaryExpr.end_position:type_name -> mojo.lang.Position
	41,  // 374: mojo.lang.PostfixUnaryExpr.callee:type_name -> mojo.lang.Expression
	72,  // 375: mojo.lang.PostfixUnaryExpr.operator:type_name -> mojo.lang.Operator
	41,  // 376: mojo.lang.PostfixUnaryExpr.argument:type_name -> mojo.lang.Expression
	76,  // 377: mojo.lang.PrefixUnaryExpr.start_position:type_name -> mojo.lang.Position
	76,  // 378: mojo.lang.PrefixUnaryExpr.end_position:type_name -> mojo.lang.Position
	41,  // 379: mojo.lang.PrefixUnaryExpr.callee:type_name -> mojo.lang.Expression
	72,  // 380: mojo.lang.PrefixUnaryExpr.operator:type_name -> mojo.lang.Operator
	41,  // 381: mojo.lang.PrefixUnaryExpr.argument:type_name -> mojo.lang.Expression
	76,  // 382: mojo.lang.RangeLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 383: mojo.lang.RangeLiteralExpr.end_position:type_name -> mojo.lang.Position
	128, // 384: mojo.lang.RangeLiteralExpr.value:type_name -> mojo.core.IntRange
	76,  // 385: mojo.lang.RepeatStmt.start_position:type_name -> mojo.lang.Position
	76,  // 386: mojo.lang.RepeatStmt.end_position:type_name -> mojo.lang.Position
	11,  // 387: mojo.lang.RepeatStmt.body:type_name -> mojo.lang.BlockStmt
	41,  // 388: mojo.lang.RepeatStmt.condition:type_name -> mojo.lang.Expression
	76,  // 389: mojo.lang.ReturnStmt.start_position:type_name -> mojo.lang.Position
	76,  // 390: mojo.lang.ReturnStmt.end_position:type_name -> mojo.lang.Position
	41,  // 391: mojo.lang.ReturnStmt.result:type_name -> mojo.lang.Expression
	121, // 392: mojo.lang.Scope.identifiers:type_name -> mojo.lang.Scope.IdentifiersEntry
	83,  // 393: mojo.lang.Scope.enclosing:type_name -> mojo.lang.Scope
	126, // 394: mojo.lang.SourceFile.url:type_name -> mojo.core.Url
	7,   // 395: mojo.lang.SourceFile.attributes:type_name -> mojo.lang.Attribute
	59,  // 396: mojo.lang.SourceFile.imports:type_name -> mojo.lang.ImportDecl
	85,  // 397: mojo.lang.SourceFile.statements:type_name -> mojo.lang.Statement
	16,  // 398: mojo.lang.SourceFile.tailing_comments:type_name -> mojo.lang.Comment
	55,  // 399: mojo.lang.SourceFile.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 400: mojo.lang.SourceFile.unresolved_identifiers:type_name -> mojo.lang.Identifier
	84,  // 401: mojo.lang.SourceFile.dependencies:type_name -> mojo.lang.SourceFile
	83,  // 402: mojo.lang.SourceFile.scope:type_name -> mojo.lang.Scope
	82,  // 403: mojo.lang.Statement.return_stmt:type_name -> mojo.lang.ReturnStmt
	14,  // 404: mojo.lang.Statement.break_stmt:type_name -> mojo.lang.BreakStmt
	24,  // 405: mojo.lang.Statement.continue_stmt:type_name -> mojo.lang.ContinueStmt
	66,  // 406: mojo.lang.Statement.match_stmt:type_name -> mojo.lang.MatchStmt
	57,  // 407: mojo.lang.Statement.if_stmt:type_name -> mojo.lang.IfStmt
	49,  // 408: mojo.lang.Statement.for_stmt:type_name -> mojo.lang.ForStmt
	103, // 409: mojo.lang.Statement.while_stmt:type_name -> mojo.lang.WhileStmt
	81,  // 410: mojo.lang.Statement.repeat_stmt:type_name -> mojo.lang.RepeatStmt
	11,  // 411: mojo.lang.Statement.block_stmt:type_name -> mojo.lang.BlockStmt
	27,  // 412: mojo.lang.Statement.declaration:type_name -> mojo.lang.Declaration
	41,  // 413: mojo.lang.Statement.expression:type_name -> mojo.lang.Expression
	76,  // 414: mojo.lang.Stmt.start_position:type_name -> mojo.lang.Position
	76,  // 415: mojo.lang.Stmt.end_position:type_name -> mojo.lang.Position
	76,  // 416: mojo.lang.StringLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 417: mojo.lang.StringLiteralExpr.end_position:type_name -> mojo.lang.Position
	76,  // 418: mojo.lang.StringLiteralUnaryExpr.start_position:type_name -> mojo.lang.Position
	76,  // 419: mojo.lang.StringLiteralUnaryExpr.end_position:type_name -> mojo.lang.Position
	41,  // 420: mojo.lang.StringLiteralUnaryExpr.callee:type_name -> mojo.lang.Expression
	72,  // 421: mojo.lang.StringLiteralUnaryExpr.operator:type_name -> mojo.lang.Operator
	41,  // 422: mojo.lang.StringLiteralUnaryExpr.argument:type_name -> mojo.lang.Expression
	76,  // 423: mojo.lang.StructConstructionExpr.start_position:type_name -> mojo.lang.Position
	76,  // 424: mojo.lang.StructConstructionExpr.end_position:type_name -> mojo.lang.Position
	76,  // 425: mojo.lang.StructDecl.start_position:type_name -> mojo.lang.Position
	76,  // 426: mojo.lang.StructDecl.end_position:type_name -> mojo.lang.Position
	29,  // 427: mojo.lang.StructDecl.document:type_name -> mojo.lang.Document
	76,  // 428: mojo.lang.StructDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 429: mojo.lang.StructDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 430: mojo.lang.StructDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 431: mojo.lang.StructDecl.enclosing:type_name -> mojo.lang.NominalType
	54,  // 432: mojo.lang.StructDecl.group:type_name -> mojo.lang.GroupDecl
	55,  // 433: mojo.lang.StructDecl.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 434: mojo.lang.StructDecl.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 435: mojo.lang.StructDecl.name_position:type_name -> mojo.lang.Position
	92,  // 436: mojo.lang.StructDecl.type:type_name -> mojo.lang.StructType
	95,  // 437: mojo.lang.StructDecl.type_alias_decls:type_name -> mojo.lang.TypeAliasDecl
	36,  // 438: mojo.lang.StructDecl.enum_decls:type_name -> mojo.lang.EnumDecl
	90,  // 439: mojo.lang.StructDecl.struct_decls:type_name -> mojo.lang.StructDecl
	83,  // 440: mojo.lang.StructDecl.scope:type_name -> mojo.lang.Scope
	76,  // 441: mojo.lang.StructLiteralExpr.start_position:type_name -> mojo.lang.Position
	76,  // 442: mojo.lang.StructLiteralExpr.end_position:type_name -> mojo.lang.Position
	41,  // 443: mojo.lang.StructLiteralExpr.callee:type_name -> mojo.lang.Expression
	71,  // 444: mojo.lang.StructLiteralExpr.value:type_name -> mojo.lang.ObjectLiteralExpr
	76,  // 445: mojo.lang.StructType.start_position:type_name -> mojo.lang.Position
	76,  // 446: mojo.lang.StructType.end_position:type_name -> mojo.lang.Position
	100, // 447: mojo.lang.StructType.fields:type_name -> mojo.lang.ValueDecl
	67,  // 448: mojo.lang.StructType.inherits:type_name -> mojo.lang.NominalType
	54,  // 449: mojo.lang.StructType.groups:type_name -> mojo.lang.GroupDecl
	76,  // 450: mojo.lang.StructType.inherit_position:type_name -> mojo.lang.Position
	76,  // 451: mojo.lang.SubscriptExpr.start_position:type_name -> mojo.lang.Position
	76,  // 452: mojo.lang.SubscriptExpr.end_position:type_name -> mojo.lang.Position
	41,  // 453: mojo.lang.SubscriptExpr.callee:type_name -> mojo.lang.Expression
	4,   // 454: mojo.lang.SubscriptExpr.arguments:type_name -> mojo.lang.Argument
	76,  // 455: mojo.lang.TupleExpr.start_position:type_name -> mojo.lang.Position
	76,  // 456: mojo.lang.TupleExpr.end_position:type_name -> mojo.lang.Position
	4,   // 457: mojo.lang.TupleExpr.elements:type_name -> mojo.lang.Argument
	76,  // 458: mojo.lang.TypeAliasDecl.start_position:type_name -> mojo.lang.Position
	76,  // 459: mojo.lang.TypeAliasDecl.end_position:type_name -> mojo.lang.Position
	29,  // 460: mojo.lang.TypeAliasDecl.document:type_name -> mojo.lang.Document
	76,  // 461: mojo.lang.TypeAliasDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 462: mojo.lang.TypeAliasDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 463: mojo.lang.TypeAliasDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 464: mojo.lang.TypeAliasDecl.enclosing:type_name -> mojo.lang.NominalType
	54,  // 465: mojo.lang.TypeAliasDecl.group:type_name -> mojo.lang.GroupDecl
	55,  // 466: mojo.lang.TypeAliasDecl.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 467: mojo.lang.TypeAliasDecl.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 468: mojo.lang.TypeAliasDecl.name_position:type_name -> mojo.lang.Position
	67,  // 469: mojo.lang.TypeAliasDecl.type:type_name -> mojo.lang.NominalType
	83,  // 470: mojo.lang.TypeAliasDecl.scope:type_name -> mojo.lang.Scope
	76,  // 471: mojo.lang.TypeCastingExpr.start_position:type_name -> mojo.lang.Position
	76,  // 472: mojo.lang.TypeCastingExpr.end_position:type_name -> mojo.lang.Position
	76,  // 473: mojo.lang.TypeDecl.start_position:type_name -> mojo.lang.Position
	76,  // 474: mojo.lang.TypeDecl.end_position:type_name -> mojo.lang.Position
	29,  // 475: mojo.lang.TypeDecl.document:type_name -> mojo.lang.Document
	76,  // 476: mojo.lang.TypeDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 477: mojo.lang.TypeDecl.attributes:type_name -> mojo.lang.Attribute
	53,  // 478: mojo.lang.TypeDecl.generic_parameters:type_name -> mojo.lang.GenericParameter
	67,  // 479: mojo.lang.TypeDecl.enclosing:type_name -> mojo.lang.NominalType
	54,  // 480: mojo.lang.TypeDecl.group:type_name -> mojo.lang.GroupDecl
	55,  // 481: mojo.lang.TypeDecl.resolved_identifiers:type_name -> mojo.lang.Identifier
	55,  // 482: mojo.lang.TypeDecl.unresolved_identifiers:type_name -> mojo.lang.Identifier
	76,  // 483: mojo.lang.TypeDecl.name_position:type_name -> mojo.lang.Position
	36,  // 484: mojo.lang.TypeDeclaration.enum_decl:type_name -> mojo.lang.EnumDecl
	90,  // 485: mojo.lang.TypeDeclaration.struct_decl:type_name -> mojo.lang.StructDecl
	95,  // 486: mojo.lang.TypeDeclaration.type_alias_decl:type_name -> mojo.lang.TypeAliasDecl
	61,  // 487: mojo.lang.TypeDeclaration.interface_decl:type_name -> mojo.lang.InterfaceDecl
	53,  // 488: mojo.lang.TypeDeclaration.generic_parameter:type_name -> mojo.lang.GenericParameter
	76,  // 489: mojo.lang.UnaryExpr.start_position:type_name -> mojo.lang.Position
	76,  // 490: mojo.lang.UnaryExpr.end_position:type_name -> mojo.lang.Position
	41,  // 491: mojo.lang.UnaryExpr.callee:type_name -> mojo.lang.Expression
	72,  // 492: mojo.lang.UnaryExpr.operator:type_name -> mojo.lang.Operator
	41,  // 493: mojo.lang.UnaryExpr.argument:type_name -> mojo.lang.Expression
	76,  // 494: mojo.lang.ValueDecl.start_position:type_name -> mojo.lang.Position
	76,  // 495: mojo.lang.ValueDecl.end_position:type_name -> mojo.lang.Position
	29,  // 496: mojo.lang.ValueDecl.document:type_name -> mojo.lang.Document
	76,  // 497: mojo.lang.ValueDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 498: mojo.lang.ValueDecl.attributes:type_name -> mojo.lang.Attribute
	54,  // 499: mojo.lang.ValueDecl.group:type_name -> mojo.lang.GroupDecl
	76,  // 500: mojo.lang.ValueDecl.name_position:type_name -> mojo.lang.Position
	67,  // 501: mojo.lang.ValueDecl.type:type_name -> mojo.lang.NominalType
	101, // 502: mojo.lang.ValueDecl.initializer:type_name -> mojo.lang.Initializer
	76,  // 503: mojo.lang.Initializer.start_position:type_name -> mojo.lang.Position
	76,  // 504: mojo.lang.Initializer.end_position:type_name -> mojo.lang.Position
	41,  // 505: mojo.lang.Initializer.value:type_name -> mojo.lang.Expression
	76,  // 506: mojo.lang.VariableDecl.start_position:type_name -> mojo.lang.Position
	76,  // 507: mojo.lang.VariableDecl.end_position:type_name -> mojo.lang.Position
	29,  // 508: mojo.lang.VariableDecl.document:type_name -> mojo.lang.Document
	76,  // 509: mojo.lang.VariableDecl.keyword_position:type_name -> mojo.lang.Position
	7,   // 510: mojo.lang.VariableDecl.attributes:type_name -> mojo.lang.Attribute
	54,  // 511: mojo.lang.VariableDecl.group:type_name -> mojo.lang.GroupDecl
	76,  // 512: mojo.lang.VariableDecl.name_position:type_name -> mojo.lang.Position
	67,  // 513: mojo.lang.VariableDecl.type:type_name -> mojo.lang.NominalType
	101, // 514: mojo.lang.VariableDecl.initializer:type_name -> mojo.lang.Initializer
	76,  // 515: mojo.lang.WhileStmt.start_position:type_name -> mojo.lang.Position
	76,  // 516: mojo.lang.WhileStmt.end_position:type_name -> mojo.lang.Position
	11,  // 517: mojo.lang.WhileStmt.body:type_name -> mojo.lang.BlockStmt
	41,  // 518: mojo.lang.WhileStmt.condition:type_name -> mojo.lang.Expression
	76,  // 519: mojo.lang.WildcardExpr.start_position:type_name -> mojo.lang.Position
	76,  // 520: mojo.lang.WildcardExpr.end_position:type_name -> mojo.lang.Position
	41,  // 521: mojo.lang.MapLiteralExpr.Entry.value:type_name -> mojo.lang.Expression
	76,  // 522: mojo.lang.Document.Line.start_position:type_name -> mojo.lang.Position
	76,  // 523: mojo.lang.Document.Line.end_position:type_name -> mojo.lang.Position
	32,  // 524: mojo.lang.EntityRelationSet.NodesEntry.value:type_name -> mojo.lang.EntityNode
	30,  // 525: mojo.lang.EntityRelationSet.EdgesEntry.value:type_name -> mojo.lang.EntityEdge
	33,  // 526: mojo.lang.EntityRelationSet.RelationsEntry.value:type_name -> mojo.lang.EntityRelation
	31,  // 527: mojo.lang.EntityRelationSet.NodeEdgesEntry.value:type_name -> mojo.lang.EntityEdges
	34,  // 528: mojo.lang.EntityRelationSet.NodeRelationsEntry.value:type_name -> mojo.lang.EntityRelations
	76,  // 529: mojo.lang.FunctionSignature.Parameter.start_position:type_name -> mojo.lang.Position
	76,  // 530: mojo.lang.FunctionSignature.Parameter.end_position:type_name -> mojo.lang.Position
	100, // 531: mojo.lang.FunctionSignature.Parameter.decls:type_name -> mojo.lang.ValueDecl
	76,  // 532: mojo.lang.FunctionSignature.Result.start_position:type_name -> mojo.lang.Position
	76,  // 533: mojo.lang.FunctionSignature.Result.end_position:type_name -> mojo.lang.Position
	67,  // 534: mojo.lang.FunctionSignature.Result.type:type_name -> mojo.lang.NominalType
	76,  // 535: mojo.lang.ObjectLiteralExpr.Field.start_position:type_name -> mojo.lang.Position
	76,  // 536: mojo.lang.ObjectLiteralExpr.Field.end_position:type_name -> mojo.lang.Position
	41,  // 537: mojo.lang.ObjectLiteralExpr.Field.value:type_name -> mojo.lang.Expression
	119, // 538: mojo.lang.Package.Requirement.version:type_name -> mojo.lang.Package.Requirement.Version
	126, // 539: mojo.lang.Package.Requirement.repository:type_name -> mojo.core.Url
	120, // 540: mojo.lang.Package.Requirement.commit:type_name -> mojo.lang.Package.Requirement.Commit
	129, // 541: mojo.lang.Package.Author.email:type_name -> mojo.core.EmailAddress
	115, // 542: mojo.lang.Package.DependenciesEntry.value:type_name -> mojo.lang.Package.Requirement
	73,  // 543: mojo.lang.Package.ResolvedDependenciesEntry.value:type_name -> mojo.lang.Package
	2,   // 544: mojo.lang.Package.Requirement.Version.type:type_name -> mojo.lang.Package.Requirement.Version.Type
	130, // 545: mojo.lang.Package.Requirement.Version.range:type_name -> mojo.core.VersionRange
	131, // 546: mojo.lang.Package.Requirement.Commit.date:type_name -> mojo.core.Timestamp
	55,  // 547: mojo.lang.Scope.IdentifiersEntry.value:type_name -> mojo.lang.Identifier
	548, // [548:548] is the sub-list for method output_type
	548, // [548:548] is the sub-list for method input_type
	548, // [548:548] is the sub-list for extension type_name
	548, // [548:548] is the sub-list for extension extendee
	0,   // [0:548] is the sub-list for field type_name
}

func init() { file_mojo_lang_lang_proto_init() }
func file_mojo_lang_lang_proto_init() {
	if File_mojo_lang_lang_proto != nil {
		return
	}
	file_mojo_lang_cached_document_proto_init()
	file_mojo_lang_pattern_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mojo_lang_lang_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeAliasDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosureExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLineComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineBreakComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstantDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstructorDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlTransferStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Declaration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityEdges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRelations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRelationSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplicitMemberExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicLookupExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnresolvedMemberExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPathApplicationExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleElementExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPathExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCallExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplicitMemberExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoopStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominalType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericLiteralUnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParenthesizedExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostfixUnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixUnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringLiteralUnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructConstructionExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructLiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeAliasDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeCastingExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDeclaration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Initializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhileStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildcardExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLiteralExpr_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document_Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionSignature_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionSignature_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectLiteralExpr_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Requirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Requirement_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_lang_lang_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Requirement_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mojo_lang_lang_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AttributeDecl_NominalType)(nil),
		(*AttributeDecl_StructType)(nil),
	}
	file_mojo_lang_lang_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Comment_BlockComment)(nil),
		(*Comment_MultiLineComment)(nil),
		(*Comment_LineBreakComment)(nil),
		(*Comment_Document)(nil),
	}
	file_mojo_lang_lang_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Declaration_PackageDecl)(nil),
		(*Declaration_ImportDecl)(nil),
		(*Declaration_EnumDecl)(nil),
		(*Declaration_StructDecl)(nil),
		(*Declaration_TypeAliasDecl)(nil),
		(*Declaration_InterfaceDecl)(nil),
		(*Declaration_ConstantDecl)(nil),
		(*Declaration_VariableDecl)(nil),
		(*Declaration_AttributeDecl)(nil),
		(*Declaration_AttributeAliasDecl)(nil),
		(*Declaration_FunctionDecl)(nil),
		(*Declaration_ConstructorDecl)(nil),
		(*Declaration_GenericParameter)(nil),
		(*Declaration_GroupDecl)(nil),
	}
	file_mojo_lang_lang_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*Expression_NullLiteralExpr)(nil),
		(*Expression_IntegerLiteralExpr)(nil),
		(*Expression_FloatLiteralExpr)(nil),
		(*Expression_BoolLiteralExpr)(nil),
		(*Expression_StringLiteralExpr)(nil),
		(*Expression_ObjectLiteralExpr)(nil),
		(*Expression_ArrayLiteralExpr)(nil),
		(*Expression_MapLiteralExpr)(nil),
		(*Expression_RangeLiteralExpr)(nil),
		(*Expression_IdentifierExpr)(nil),
		(*Expression_NumericLiteralUnaryExpr)(nil),
		(*Expression_StringLiteralUnaryExpr)(nil),
		(*Expression_StructLiteralExpr)(nil),
		(*Expression_ClosureExpr)(nil),
		(*Expression_ParenthesizedExpr)(nil),
		(*Expression_ImplicitMemberExpr)(nil),
		(*Expression_WildcardExpr)(nil),
		(*Expression_StructConstructionExpr)(nil),
		(*Expression_TupleExpr)(nil),
		(*Expression_PrefixUnaryExpr)(nil),
		(*Expression_PostfixUnaryExpr)(nil),
		(*Expression_FunctionCallExpr)(nil),
		(*Expression_ExplicitMemberExpr)(nil),
		(*Expression_SubscriptExpr)(nil),
		(*Expression_BinaryExpr)(nil),
		(*Expression_ConditionalExpr)(nil),
		(*Expression_TypeCastingExpr)(nil),
		(*Expression_AssignmentExpr)(nil),
		(*Expression_ErrorExpr)(nil),
	}
	file_mojo_lang_lang_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*IfStmt_BlockStmt)(nil),
		(*IfStmt_IfStmt)(nil),
	}
	file_mojo_lang_lang_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*MatchCase_BlockStmt)(nil),
		(*MatchCase_Expression)(nil),
	}
	file_mojo_lang_lang_proto_msgTypes[82].OneofWrappers = []interface{}{
		(*Statement_ReturnStmt)(nil),
		(*Statement_BreakStmt)(nil),
		(*Statement_ContinueStmt)(nil),
		(*Statement_MatchStmt)(nil),
		(*Statement_IfStmt)(nil),
		(*Statement_ForStmt)(nil),
		(*Statement_WhileStmt)(nil),
		(*Statement_RepeatStmt)(nil),
		(*Statement_BlockStmt)(nil),
		(*Statement_Declaration)(nil),
		(*Statement_Expression)(nil),
	}
	file_mojo_lang_lang_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*TypeDeclaration_EnumDecl)(nil),
		(*TypeDeclaration_StructDecl)(nil),
		(*TypeDeclaration_TypeAliasDecl)(nil),
		(*TypeDeclaration_InterfaceDecl)(nil),
		(*TypeDeclaration_GenericParameter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mojo_lang_lang_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   119,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mojo_lang_lang_proto_goTypes,
		DependencyIndexes: file_mojo_lang_lang_proto_depIdxs,
		EnumInfos:         file_mojo_lang_lang_proto_enumTypes,
		MessageInfos:      file_mojo_lang_lang_proto_msgTypes,
	}.Build()
	File_mojo_lang_lang_proto = out.File
	file_mojo_lang_lang_proto_rawDesc = nil
	file_mojo_lang_lang_proto_goTypes = nil
	file_mojo_lang_lang_proto_depIdxs = nil
}
