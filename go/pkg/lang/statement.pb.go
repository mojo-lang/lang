// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mojo/lang/statement.proto

package lang

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

/// There are 3 main classes of nodes: Expressions nodes,
/// statement nodes, and declaration nodes. The node names usually
/// match the corresponding Go spec production names to which they
/// correspond. The node fields correspond to the individual parts
/// of the respective productions.
///
/// All nodes contain position information marking the beginning of
/// the corresponding source text segment; it is accessible via the
/// Pos accessor method. Nodes may contain additional position info
/// for language constructs where comments may be found between parts
/// of the construct (typically any larger, parenthesized subpart).
/// That position information is needed to properly position comments
/// when printing the construct.
///
///
type Statement struct {
	// Types that are valid to be assigned to Statement:
	//	*Statement_Declaration
	//	*Statement_Expression
	Statement            isStatement_Statement `protobuf_oneof:"statement"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Statement) Reset()         { *m = Statement{} }
func (m *Statement) String() string { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()    {}
func (*Statement) Descriptor() ([]byte, []int) {
	return fileDescriptor_1853c2e35562cc19, []int{0}
}

func (m *Statement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statement.Unmarshal(m, b)
}
func (m *Statement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statement.Marshal(b, m, deterministic)
}
func (m *Statement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statement.Merge(m, src)
}
func (m *Statement) XXX_Size() int {
	return xxx_messageInfo_Statement.Size(m)
}
func (m *Statement) XXX_DiscardUnknown() {
	xxx_messageInfo_Statement.DiscardUnknown(m)
}

var xxx_messageInfo_Statement proto.InternalMessageInfo

type isStatement_Statement interface {
	isStatement_Statement()
}

type Statement_Declaration struct {
	Declaration *Declaration `protobuf:"bytes,10,opt,name=declaration,proto3,oneof"`
}

type Statement_Expression struct {
	Expression *Expression `protobuf:"bytes,11,opt,name=expression,proto3,oneof"`
}

func (*Statement_Declaration) isStatement_Statement() {}

func (*Statement_Expression) isStatement_Statement() {}

func (m *Statement) GetStatement() isStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *Statement) GetDeclaration() *Declaration {
	if x, ok := m.GetStatement().(*Statement_Declaration); ok {
		return x.Declaration
	}
	return nil
}

func (m *Statement) GetExpression() *Expression {
	if x, ok := m.GetStatement().(*Statement_Expression); ok {
		return x.Expression
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Statement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Statement_OneofMarshaler, _Statement_OneofUnmarshaler, _Statement_OneofSizer, []interface{}{
		(*Statement_Declaration)(nil),
		(*Statement_Expression)(nil),
	}
}

func _Statement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Statement)
	// statement
	switch x := m.Statement.(type) {
	case *Statement_Declaration:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Declaration); err != nil {
			return err
		}
	case *Statement_Expression:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Expression); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Statement.Statement has unexpected type %T", x)
	}
	return nil
}

func _Statement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Statement)
	switch tag {
	case 10: // statement.declaration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Declaration)
		err := b.DecodeMessage(msg)
		m.Statement = &Statement_Declaration{msg}
		return true, err
	case 11: // statement.expression
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Expression)
		err := b.DecodeMessage(msg)
		m.Statement = &Statement_Expression{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Statement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Statement)
	// statement
	switch x := m.Statement.(type) {
	case *Statement_Declaration:
		s := proto.Size(x.Declaration)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Statement_Expression:
		s := proto.Size(x.Expression)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Statement)(nil), "mojo.lang.Statement")
}

func init() { proto.RegisterFile("mojo/lang/statement.proto", fileDescriptor_1853c2e35562cc19) }

var fileDescriptor_1853c2e35562cc19 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0xcd, 0xcf, 0xca,
	0xd7, 0xcf, 0x49, 0xcc, 0x4b, 0xd7, 0x2f, 0x2e, 0x49, 0x2c, 0x49, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x49, 0xe9, 0x81, 0xa4, 0xa4, 0xa4, 0x11, 0xaa,
	0x52, 0x52, 0x93, 0x73, 0x12, 0x8b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x20, 0xea, 0xa4, 0xa4, 0x10,
	0x92, 0xa9, 0x15, 0x05, 0x45, 0xa9, 0xc5, 0xc5, 0x70, 0x39, 0xa5, 0x5e, 0x46, 0x2e, 0xce, 0x60,
	0x98, 0xb9, 0x42, 0x56, 0x5c, 0xdc, 0x48, 0xda, 0x25, 0xb8, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0xc4,
	0xf4, 0xe0, 0xf6, 0xe8, 0xb9, 0x20, 0x64, 0x3d, 0x18, 0x82, 0x90, 0x15, 0x0b, 0x99, 0x73, 0x71,
	0x21, 0x4c, 0x97, 0xe0, 0x06, 0x6b, 0x15, 0x45, 0xd2, 0xea, 0x0a, 0x97, 0xf4, 0x60, 0x08, 0x42,
	0x52, 0xea, 0xc4, 0xcd, 0xc5, 0x09, 0xf7, 0x99, 0x53, 0x18, 0x97, 0x58, 0x7e, 0x51, 0x3a, 0x58,
	0x1b, 0x58, 0x17, 0x5c, 0xbf, 0x13, 0x1f, 0xdc, 0x99, 0x01, 0x20, 0x97, 0x07, 0x30, 0x46, 0x69,
	0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x83, 0xd4, 0xe9, 0x82, 0xbd,
	0x08, 0x26, 0xd2, 0xf3, 0xf5, 0x0b, 0xb2, 0x21, 0x6c, 0x6b, 0x10, 0x91, 0xc4, 0x06, 0xf6, 0xae,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x6c, 0xb6, 0xb9, 0x4f, 0x01, 0x00, 0x00,
}
