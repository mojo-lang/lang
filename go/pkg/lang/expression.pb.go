// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mojo/lang/expression.proto

package lang

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Expression struct {
	// Types that are valid to be assigned to Expression:
	//	*Expression_NullLiteralExpr
	//	*Expression_BoolLiteralExpr
	//	*Expression_IntegerLiteralExpr
	//	*Expression_FloatLiteralExpr
	//	*Expression_StringLiteralExpr
	//	*Expression_ArrayLiteralExpr
	//	*Expression_DictionaryLiteralExpr
	//	*Expression_ObjectLiteralExpr
	Expression           isExpression_Expression `protobuf_oneof:"expression"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Expression) Reset()         { *m = Expression{} }
func (m *Expression) String() string { return proto.CompactTextString(m) }
func (*Expression) ProtoMessage()    {}
func (*Expression) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{0}
}

func (m *Expression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression.Unmarshal(m, b)
}
func (m *Expression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression.Marshal(b, m, deterministic)
}
func (m *Expression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression.Merge(m, src)
}
func (m *Expression) XXX_Size() int {
	return xxx_messageInfo_Expression.Size(m)
}
func (m *Expression) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression.DiscardUnknown(m)
}

var xxx_messageInfo_Expression proto.InternalMessageInfo

type isExpression_Expression interface {
	isExpression_Expression()
}

type Expression_NullLiteralExpr struct {
	NullLiteralExpr *NullLiteralExpr `protobuf:"bytes,1,opt,name=null_literal_expr,json=nullLiteralExpr,proto3,oneof"`
}

type Expression_BoolLiteralExpr struct {
	BoolLiteralExpr *BoolLiteralExpr `protobuf:"bytes,2,opt,name=bool_literal_expr,json=boolLiteralExpr,proto3,oneof"`
}

type Expression_IntegerLiteralExpr struct {
	IntegerLiteralExpr *IntegerLiteralExpr `protobuf:"bytes,3,opt,name=integer_literal_expr,json=integerLiteralExpr,proto3,oneof"`
}

type Expression_FloatLiteralExpr struct {
	FloatLiteralExpr *FloatLiteralExpr `protobuf:"bytes,4,opt,name=float_literal_expr,json=floatLiteralExpr,proto3,oneof"`
}

type Expression_StringLiteralExpr struct {
	StringLiteralExpr *StringLiteralExpr `protobuf:"bytes,5,opt,name=string_literal_expr,json=stringLiteralExpr,proto3,oneof"`
}

type Expression_ArrayLiteralExpr struct {
	ArrayLiteralExpr *ArrayLiteralExpr `protobuf:"bytes,6,opt,name=array_literal_expr,json=arrayLiteralExpr,proto3,oneof"`
}

type Expression_DictionaryLiteralExpr struct {
	DictionaryLiteralExpr *DictionaryLiteralExpr `protobuf:"bytes,7,opt,name=dictionary_literal_expr,json=dictionaryLiteralExpr,proto3,oneof"`
}

type Expression_ObjectLiteralExpr struct {
	ObjectLiteralExpr *ObjectLiteralExpr `protobuf:"bytes,8,opt,name=object_literal_expr,json=objectLiteralExpr,proto3,oneof"`
}

func (*Expression_NullLiteralExpr) isExpression_Expression() {}

func (*Expression_BoolLiteralExpr) isExpression_Expression() {}

func (*Expression_IntegerLiteralExpr) isExpression_Expression() {}

func (*Expression_FloatLiteralExpr) isExpression_Expression() {}

func (*Expression_StringLiteralExpr) isExpression_Expression() {}

func (*Expression_ArrayLiteralExpr) isExpression_Expression() {}

func (*Expression_DictionaryLiteralExpr) isExpression_Expression() {}

func (*Expression_ObjectLiteralExpr) isExpression_Expression() {}

func (m *Expression) GetExpression() isExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *Expression) GetNullLiteralExpr() *NullLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_NullLiteralExpr); ok {
		return x.NullLiteralExpr
	}
	return nil
}

func (m *Expression) GetBoolLiteralExpr() *BoolLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_BoolLiteralExpr); ok {
		return x.BoolLiteralExpr
	}
	return nil
}

func (m *Expression) GetIntegerLiteralExpr() *IntegerLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_IntegerLiteralExpr); ok {
		return x.IntegerLiteralExpr
	}
	return nil
}

func (m *Expression) GetFloatLiteralExpr() *FloatLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_FloatLiteralExpr); ok {
		return x.FloatLiteralExpr
	}
	return nil
}

func (m *Expression) GetStringLiteralExpr() *StringLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_StringLiteralExpr); ok {
		return x.StringLiteralExpr
	}
	return nil
}

func (m *Expression) GetArrayLiteralExpr() *ArrayLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_ArrayLiteralExpr); ok {
		return x.ArrayLiteralExpr
	}
	return nil
}

func (m *Expression) GetDictionaryLiteralExpr() *DictionaryLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_DictionaryLiteralExpr); ok {
		return x.DictionaryLiteralExpr
	}
	return nil
}

func (m *Expression) GetObjectLiteralExpr() *ObjectLiteralExpr {
	if x, ok := m.GetExpression().(*Expression_ObjectLiteralExpr); ok {
		return x.ObjectLiteralExpr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Expression) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Expression_OneofMarshaler, _Expression_OneofUnmarshaler, _Expression_OneofSizer, []interface{}{
		(*Expression_NullLiteralExpr)(nil),
		(*Expression_BoolLiteralExpr)(nil),
		(*Expression_IntegerLiteralExpr)(nil),
		(*Expression_FloatLiteralExpr)(nil),
		(*Expression_StringLiteralExpr)(nil),
		(*Expression_ArrayLiteralExpr)(nil),
		(*Expression_DictionaryLiteralExpr)(nil),
		(*Expression_ObjectLiteralExpr)(nil),
	}
}

func _Expression_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Expression)
	// expression
	switch x := m.Expression.(type) {
	case *Expression_NullLiteralExpr:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NullLiteralExpr); err != nil {
			return err
		}
	case *Expression_BoolLiteralExpr:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BoolLiteralExpr); err != nil {
			return err
		}
	case *Expression_IntegerLiteralExpr:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IntegerLiteralExpr); err != nil {
			return err
		}
	case *Expression_FloatLiteralExpr:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FloatLiteralExpr); err != nil {
			return err
		}
	case *Expression_StringLiteralExpr:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringLiteralExpr); err != nil {
			return err
		}
	case *Expression_ArrayLiteralExpr:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArrayLiteralExpr); err != nil {
			return err
		}
	case *Expression_DictionaryLiteralExpr:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DictionaryLiteralExpr); err != nil {
			return err
		}
	case *Expression_ObjectLiteralExpr:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ObjectLiteralExpr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Expression.Expression has unexpected type %T", x)
	}
	return nil
}

func _Expression_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Expression)
	switch tag {
	case 1: // expression.null_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NullLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_NullLiteralExpr{msg}
		return true, err
	case 2: // expression.bool_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BoolLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_BoolLiteralExpr{msg}
		return true, err
	case 3: // expression.integer_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IntegerLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_IntegerLiteralExpr{msg}
		return true, err
	case 4: // expression.float_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FloatLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_FloatLiteralExpr{msg}
		return true, err
	case 5: // expression.string_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_StringLiteralExpr{msg}
		return true, err
	case 6: // expression.array_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ArrayLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_ArrayLiteralExpr{msg}
		return true, err
	case 7: // expression.dictionary_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DictionaryLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_DictionaryLiteralExpr{msg}
		return true, err
	case 8: // expression.object_literal_expr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectLiteralExpr)
		err := b.DecodeMessage(msg)
		m.Expression = &Expression_ObjectLiteralExpr{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Expression_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Expression)
	// expression
	switch x := m.Expression.(type) {
	case *Expression_NullLiteralExpr:
		s := proto.Size(x.NullLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_BoolLiteralExpr:
		s := proto.Size(x.BoolLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_IntegerLiteralExpr:
		s := proto.Size(x.IntegerLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_FloatLiteralExpr:
		s := proto.Size(x.FloatLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_StringLiteralExpr:
		s := proto.Size(x.StringLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_ArrayLiteralExpr:
		s := proto.Size(x.ArrayLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_DictionaryLiteralExpr:
		s := proto.Size(x.DictionaryLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_ObjectLiteralExpr:
		s := proto.Size(x.ObjectLiteralExpr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

/// The 'null' literal.
///
type NullLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool     `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullLiteralExpr) Reset()         { *m = NullLiteralExpr{} }
func (m *NullLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*NullLiteralExpr) ProtoMessage()    {}
func (*NullLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{1}
}

func (m *NullLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullLiteralExpr.Unmarshal(m, b)
}
func (m *NullLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullLiteralExpr.Marshal(b, m, deterministic)
}
func (m *NullLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullLiteralExpr.Merge(m, src)
}
func (m *NullLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_NullLiteralExpr.Size(m)
}
func (m *NullLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_NullLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_NullLiteralExpr proto.InternalMessageInfo

func (m *NullLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *NullLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *NullLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *NullLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

/// \brief Integer literal with a '+' or '-' sign, like '+4' or '- 2'.
///
/// After semantic analysis assigns types, this is guaranteed to only have
/// a BuiltinIntegerType.
type IntegerLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool     `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	IsNegative           bool     `protobuf:"varint,9,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	Value                int64    `protobuf:"varint,10,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegerLiteralExpr) Reset()         { *m = IntegerLiteralExpr{} }
func (m *IntegerLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*IntegerLiteralExpr) ProtoMessage()    {}
func (*IntegerLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{2}
}

func (m *IntegerLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerLiteralExpr.Unmarshal(m, b)
}
func (m *IntegerLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerLiteralExpr.Marshal(b, m, deterministic)
}
func (m *IntegerLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerLiteralExpr.Merge(m, src)
}
func (m *IntegerLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_IntegerLiteralExpr.Size(m)
}
func (m *IntegerLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerLiteralExpr proto.InternalMessageInfo

func (m *IntegerLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *IntegerLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *IntegerLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *IntegerLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

func (m *IntegerLiteralExpr) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

func (m *IntegerLiteralExpr) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

/// FloatLiteralExpr - Floating point literal, like '4.0'.  After semantic
/// analysis assigns types, this is guaranteed to only have a
/// BuiltinFloatingPointType.
type FloatLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool     `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	IsNegative           bool     `protobuf:"varint,9,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	Value                float64  `protobuf:"fixed64,10,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FloatLiteralExpr) Reset()         { *m = FloatLiteralExpr{} }
func (m *FloatLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*FloatLiteralExpr) ProtoMessage()    {}
func (*FloatLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{3}
}

func (m *FloatLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatLiteralExpr.Unmarshal(m, b)
}
func (m *FloatLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatLiteralExpr.Marshal(b, m, deterministic)
}
func (m *FloatLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatLiteralExpr.Merge(m, src)
}
func (m *FloatLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_FloatLiteralExpr.Size(m)
}
func (m *FloatLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_FloatLiteralExpr proto.InternalMessageInfo

func (m *FloatLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *FloatLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *FloatLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *FloatLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

func (m *FloatLiteralExpr) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

func (m *FloatLiteralExpr) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

/// A Boolean literal ('true' or 'false')
///
type BoolLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool     `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value                bool     `protobuf:"varint,10,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolLiteralExpr) Reset()         { *m = BoolLiteralExpr{} }
func (m *BoolLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*BoolLiteralExpr) ProtoMessage()    {}
func (*BoolLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{4}
}

func (m *BoolLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolLiteralExpr.Unmarshal(m, b)
}
func (m *BoolLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolLiteralExpr.Marshal(b, m, deterministic)
}
func (m *BoolLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolLiteralExpr.Merge(m, src)
}
func (m *BoolLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_BoolLiteralExpr.Size(m)
}
func (m *BoolLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_BoolLiteralExpr proto.InternalMessageInfo

func (m *BoolLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *BoolLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *BoolLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *BoolLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

func (m *BoolLiteralExpr) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

/// StringLiteralExpr - String literal, like '"foo"'.
type StringLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool     `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value                string   `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringLiteralExpr) Reset()         { *m = StringLiteralExpr{} }
func (m *StringLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*StringLiteralExpr) ProtoMessage()    {}
func (*StringLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{5}
}

func (m *StringLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringLiteralExpr.Unmarshal(m, b)
}
func (m *StringLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringLiteralExpr.Marshal(b, m, deterministic)
}
func (m *StringLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringLiteralExpr.Merge(m, src)
}
func (m *StringLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_StringLiteralExpr.Size(m)
}
func (m *StringLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_StringLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_StringLiteralExpr proto.InternalMessageInfo

func (m *StringLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *StringLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *StringLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *StringLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

func (m *StringLiteralExpr) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

/// An array literal expression [a, b, c].
type ArrayLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool              `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value                map[string]string `protobuf:"bytes,10,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ArrayLiteralExpr) Reset()         { *m = ArrayLiteralExpr{} }
func (m *ArrayLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*ArrayLiteralExpr) ProtoMessage()    {}
func (*ArrayLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{6}
}

func (m *ArrayLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayLiteralExpr.Unmarshal(m, b)
}
func (m *ArrayLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayLiteralExpr.Marshal(b, m, deterministic)
}
func (m *ArrayLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayLiteralExpr.Merge(m, src)
}
func (m *ArrayLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_ArrayLiteralExpr.Size(m)
}
func (m *ArrayLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayLiteralExpr proto.InternalMessageInfo

func (m *ArrayLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *ArrayLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *ArrayLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *ArrayLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

func (m *ArrayLiteralExpr) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

/// \brief A dictionary literal expression {a : x, b : y, c : z}.
type DictionaryLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool              `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Value                map[string]string `protobuf:"bytes,10,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DictionaryLiteralExpr) Reset()         { *m = DictionaryLiteralExpr{} }
func (m *DictionaryLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*DictionaryLiteralExpr) ProtoMessage()    {}
func (*DictionaryLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{7}
}

func (m *DictionaryLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DictionaryLiteralExpr.Unmarshal(m, b)
}
func (m *DictionaryLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DictionaryLiteralExpr.Marshal(b, m, deterministic)
}
func (m *DictionaryLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DictionaryLiteralExpr.Merge(m, src)
}
func (m *DictionaryLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_DictionaryLiteralExpr.Size(m)
}
func (m *DictionaryLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_DictionaryLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_DictionaryLiteralExpr proto.InternalMessageInfo

func (m *DictionaryLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *DictionaryLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *DictionaryLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *DictionaryLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

func (m *DictionaryLiteralExpr) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

// ObjectLiteralExpr - An expression of the form
// '{red: 1, blue: 0, green: 0, alpha: 1}' with a name and a list
// argument. The components of the list argument are meant to be themselves
// constant.
type ObjectLiteralExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool     `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectLiteralExpr) Reset()         { *m = ObjectLiteralExpr{} }
func (m *ObjectLiteralExpr) String() string { return proto.CompactTextString(m) }
func (*ObjectLiteralExpr) ProtoMessage()    {}
func (*ObjectLiteralExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{8}
}

func (m *ObjectLiteralExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectLiteralExpr.Unmarshal(m, b)
}
func (m *ObjectLiteralExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectLiteralExpr.Marshal(b, m, deterministic)
}
func (m *ObjectLiteralExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectLiteralExpr.Merge(m, src)
}
func (m *ObjectLiteralExpr) XXX_Size() int {
	return xxx_messageInfo_ObjectLiteralExpr.Size(m)
}
func (m *ObjectLiteralExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectLiteralExpr.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectLiteralExpr proto.InternalMessageInfo

func (m *ObjectLiteralExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *ObjectLiteralExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *ObjectLiteralExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *ObjectLiteralExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

/// TupleExpr - Parenthesized expressions like `(a: x+x)` and '(x, y, 4)'.  Also
/// used to represent the operands to a binary operator.  Note that
/// expressions like '(4)' are represented with a ParenExpr.
type TupleExpr struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TupleExpr) Reset()         { *m = TupleExpr{} }
func (m *TupleExpr) String() string { return proto.CompactTextString(m) }
func (*TupleExpr) ProtoMessage()    {}
func (*TupleExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{9}
}

func (m *TupleExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TupleExpr.Unmarshal(m, b)
}
func (m *TupleExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TupleExpr.Marshal(b, m, deterministic)
}
func (m *TupleExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TupleExpr.Merge(m, src)
}
func (m *TupleExpr) XXX_Size() int {
	return xxx_messageInfo_TupleExpr.Size(m)
}
func (m *TupleExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_TupleExpr.DiscardUnknown(m)
}

var xxx_messageInfo_TupleExpr proto.InternalMessageInfo

/// MemberRefExpr - This represents 'a.b' where we are referring to a member
/// of a type, such as a property or variable.
///
/// Note that methods found via 'dot' syntax are expressed as DotSyntaxCallExpr
/// nodes, because 'a.f' is actually an application of 'a' (the implicit object
/// argument) to the function 'f'.
type MemberExpr struct {
	/// position of first character belonging to the Expr
	StartPosition *Position `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	/// position of first character immediately after the Expr
	EndPosition *Position `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	///
	Kind int32 `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	/// Whether the Expr represents something directly written in source or
	/// it was implicitly generated by the type-checker.
	Implicit             bool     `protobuf:"varint,4,opt,name=implicit,proto3" json:"implicit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemberExpr) Reset()         { *m = MemberExpr{} }
func (m *MemberExpr) String() string { return proto.CompactTextString(m) }
func (*MemberExpr) ProtoMessage()    {}
func (*MemberExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_464badb6761c8431, []int{10}
}

func (m *MemberExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberExpr.Unmarshal(m, b)
}
func (m *MemberExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberExpr.Marshal(b, m, deterministic)
}
func (m *MemberExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberExpr.Merge(m, src)
}
func (m *MemberExpr) XXX_Size() int {
	return xxx_messageInfo_MemberExpr.Size(m)
}
func (m *MemberExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberExpr.DiscardUnknown(m)
}

var xxx_messageInfo_MemberExpr proto.InternalMessageInfo

func (m *MemberExpr) GetStartPosition() *Position {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (m *MemberExpr) GetEndPosition() *Position {
	if m != nil {
		return m.EndPosition
	}
	return nil
}

func (m *MemberExpr) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *MemberExpr) GetImplicit() bool {
	if m != nil {
		return m.Implicit
	}
	return false
}

func init() {
	proto.RegisterType((*Expression)(nil), "mojo.lang.Expression")
	proto.RegisterType((*NullLiteralExpr)(nil), "mojo.lang.NullLiteralExpr")
	proto.RegisterType((*IntegerLiteralExpr)(nil), "mojo.lang.IntegerLiteralExpr")
	proto.RegisterType((*FloatLiteralExpr)(nil), "mojo.lang.FloatLiteralExpr")
	proto.RegisterType((*BoolLiteralExpr)(nil), "mojo.lang.BoolLiteralExpr")
	proto.RegisterType((*StringLiteralExpr)(nil), "mojo.lang.StringLiteralExpr")
	proto.RegisterType((*ArrayLiteralExpr)(nil), "mojo.lang.ArrayLiteralExpr")
	proto.RegisterMapType((map[string]string)(nil), "mojo.lang.ArrayLiteralExpr.ValueEntry")
	proto.RegisterType((*DictionaryLiteralExpr)(nil), "mojo.lang.DictionaryLiteralExpr")
	proto.RegisterMapType((map[string]string)(nil), "mojo.lang.DictionaryLiteralExpr.ValueEntry")
	proto.RegisterType((*ObjectLiteralExpr)(nil), "mojo.lang.ObjectLiteralExpr")
	proto.RegisterType((*TupleExpr)(nil), "mojo.lang.TupleExpr")
	proto.RegisterType((*MemberExpr)(nil), "mojo.lang.MemberExpr")
}

func init() { proto.RegisterFile("mojo/lang/expression.proto", fileDescriptor_464badb6761c8431) }

var fileDescriptor_464badb6761c8431 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x71, 0xba, 0x8e, 0xf6, 0x74, 0xd0, 0xd6, 0xdb, 0xa0, 0x2a, 0x20, 0xa6, 0x5c, 0xa0,
	0x09, 0x44, 0x2a, 0x0d, 0x09, 0x4d, 0x83, 0x9b, 0x55, 0x0c, 0x0d, 0x01, 0x63, 0x04, 0x04, 0xd2,
	0x6e, 0xaa, 0xa4, 0xf5, 0x82, 0xb7, 0x34, 0x8e, 0x1c, 0x77, 0xa2, 0x4f, 0xc2, 0x5b, 0x20, 0x6e,
	0x10, 0xbc, 0x03, 0xe2, 0x51, 0x10, 0xaf, 0x80, 0xec, 0xb6, 0x49, 0xec, 0x0c, 0xb8, 0xe1, 0x26,
	0xdc, 0x44, 0xf6, 0xf1, 0xef, 0x6f, 0xe7, 0x3f, 0x3b, 0xb5, 0x0d, 0xdd, 0x31, 0x3b, 0x61, 0xbd,
	0xd0, 0x8b, 0x82, 0x1e, 0x79, 0x1f, 0x73, 0x92, 0x24, 0x94, 0x45, 0x4e, 0xcc, 0x99, 0x60, 0xb8,
	0x2e, 0xd7, 0x1c, 0xb9, 0xd6, 0xed, 0x64, 0xb2, 0x98, 0x25, 0x54, 0xa4, 0x22, 0xfb, 0x43, 0x15,
	0x60, 0x2f, 0xdd, 0x89, 0xf7, 0xa1, 0x1d, 0x4d, 0xc2, 0x70, 0x10, 0x52, 0x41, 0xb8, 0x17, 0x0e,
	0x24, 0xb4, 0x83, 0x36, 0xd0, 0x66, 0x63, 0xab, 0xeb, 0xa4, 0x3c, 0xe7, 0x60, 0x12, 0x86, 0xcf,
	0x66, 0x12, 0xb9, 0x79, 0xff, 0x82, 0xdb, 0x8c, 0xf4, 0x90, 0x24, 0xf9, 0x8c, 0x19, 0x24, 0xab,
	0x40, 0xea, 0x33, 0x66, 0x92, 0x7c, 0x3d, 0x84, 0x5f, 0xc2, 0x1a, 0x8d, 0x04, 0x09, 0x08, 0xd7,
	0x61, 0x15, 0x05, 0xbb, 0x91, 0x83, 0x3d, 0x99, 0xc9, 0x74, 0x1e, 0xa6, 0x85, 0x28, 0x7e, 0x0a,
	0xf8, 0x38, 0x64, 0x9e, 0xd0, 0x81, 0x4b, 0x0a, 0x78, 0x2d, 0x07, 0x7c, 0x2c, 0x45, 0x3a, 0xae,
	0x75, 0x6c, 0xc4, 0xf0, 0x01, 0xac, 0x26, 0x82, 0xd3, 0x28, 0xd0, 0x69, 0x55, 0x45, 0xbb, 0x9e,
	0xa3, 0xbd, 0x52, 0x2a, 0x1d, 0xd7, 0x4e, 0xcc, 0xa0, 0x4c, 0xce, 0xe3, 0xdc, 0x9b, 0xea, 0xb8,
	0xe5, 0x42, 0x72, 0xbb, 0x52, 0x64, 0x24, 0xe7, 0x19, 0x31, 0x7c, 0x04, 0x57, 0x47, 0x74, 0x28,
	0xff, 0xe1, 0x1e, 0x37, 0x88, 0x17, 0x15, 0x71, 0x23, 0x47, 0x7c, 0x94, 0x2a, 0x75, 0xec, 0xfa,
	0xe8, 0xbc, 0x05, 0x69, 0x9c, 0xf9, 0x27, 0x64, 0x68, 0x94, 0xb1, 0x56, 0x30, 0xfe, 0x42, 0xa9,
	0x0c, 0xe3, 0xcc, 0x0c, 0xf6, 0x57, 0x00, 0xb2, 0x26, 0xb6, 0x3f, 0x23, 0x68, 0x1a, 0x7d, 0x86,
	0x77, 0xe0, 0x72, 0x22, 0x3c, 0x2e, 0x06, 0x8b, 0x2e, 0x9e, 0xf7, 0xe6, 0x6a, 0xee, 0x8f, 0x1d,
	0xce, 0x97, 0xdc, 0x4b, 0x4a, 0xba, 0x98, 0xe2, 0xfb, 0xb0, 0x42, 0xa2, 0x51, 0xb6, 0xd3, 0xfa,
	0xfd, 0xce, 0x06, 0x89, 0x46, 0xe9, 0x3e, 0x0c, 0x4b, 0xa7, 0x34, 0x1a, 0xa9, 0x76, 0xab, 0xba,
	0x6a, 0x8c, 0xbb, 0x50, 0xa3, 0xe3, 0x38, 0xa4, 0x43, 0x2a, 0x54, 0xd7, 0xd4, 0xdc, 0x74, 0x6e,
	0xff, 0x44, 0x80, 0x8b, 0x8d, 0x58, 0x86, 0xd4, 0xf1, 0x4d, 0x68, 0xd0, 0x64, 0x10, 0x91, 0xc0,
	0x13, 0xf4, 0x8c, 0x74, 0xea, 0x6a, 0x19, 0x68, 0x72, 0x30, 0x8f, 0xe0, 0x35, 0xa8, 0x9e, 0x79,
	0xe1, 0x84, 0x74, 0x60, 0x03, 0x6d, 0x56, 0xdc, 0xd9, 0xc4, 0xfe, 0x81, 0xa0, 0x65, 0xfe, 0x52,
	0xfe, 0x43, 0xbf, 0x68, 0xe1, 0xf7, 0x1b, 0x82, 0xa6, 0x71, 0x6e, 0x95, 0xc2, 0xae, 0xe6, 0xa6,
	0xb6, 0x70, 0xf3, 0x1d, 0x41, 0xbb, 0x70, 0x32, 0x95, 0xcf, 0x4f, 0x7d, 0xe1, 0xe7, 0xa3, 0x05,
	0x2d, 0xf3, 0x68, 0x2c, 0x85, 0x9d, 0x87, 0x99, 0x9d, 0xca, 0x66, 0x63, 0xeb, 0xd6, 0x1f, 0x8e,
	0x7a, 0xe7, 0x8d, 0x14, 0xee, 0x45, 0x82, 0x4f, 0xe7, 0xb6, 0xbb, 0xdb, 0x00, 0x59, 0x10, 0xb7,
	0xa0, 0x72, 0x4a, 0xa6, 0xca, 0x64, 0xdd, 0x95, 0xc3, 0xac, 0x58, 0x56, 0xae, 0x58, 0x3b, 0xd6,
	0x36, 0xb2, 0xbf, 0x5a, 0xb0, 0x7e, 0xee, 0xc9, 0x5f, 0x8a, 0xaa, 0xed, 0xea, 0x55, 0xbb, 0xf3,
	0xb7, 0xeb, 0xec, 0x9f, 0x96, 0xee, 0x0b, 0x82, 0x76, 0xe1, 0x72, 0x2b, 0xc5, 0x2d, 0xd5, 0x80,
	0xfa, 0xeb, 0x49, 0x1c, 0x12, 0x99, 0xb0, 0xfd, 0x09, 0x01, 0x3c, 0x27, 0x63, 0x9f, 0xf0, 0xb2,
	0xe4, 0xdf, 0x7f, 0x0b, 0x57, 0x18, 0x0f, 0x14, 0x56, 0x51, 0x53, 0x7e, 0xbf, 0x99, 0x3d, 0x67,
	0x0f, 0xe5, 0x13, 0xf7, 0x10, 0x1d, 0xdd, 0x0e, 0xa8, 0x78, 0x37, 0xf1, 0x9d, 0x21, 0x1b, 0xf7,
	0xa4, 0xf0, 0xae, 0x7a, 0x09, 0xab, 0x4f, 0xc0, 0x7a, 0xf1, 0xe9, 0x6c, 0xfc, 0x40, 0x7e, 0xfc,
	0x65, 0xf5, 0x2e, 0xbe, 0xf7, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x25, 0x56, 0xa0, 0x5a, 0x0b,
	0x00, 0x00,
}
