// Code generated by mojo. DO NOT EDIT.

syntax = "proto3";

package mojo.lang;

import "mojo/core/email_address.proto";
import "mojo/core/url.proto";
import "mojo/core/value.proto";
import "mojo/core/version.proto";
import "mojo/core/version_range.proto";
import "mojo/lang/bool_literal_expr.proto";
import "mojo/lang/branch_stmt.proto";
import "mojo/lang/break_stmt.proto";
import "mojo/lang/cached_document.proto";
import "mojo/lang/continue_stmt.proto";
import "mojo/lang/control_transfer_stmt.proto";
import "mojo/lang/decl.proto";
import "mojo/lang/document.proto";
import "mojo/lang/error_expr.proto";
import "mojo/lang/expr.proto";
import "mojo/lang/float_literal_expr.proto";
import "mojo/lang/implicit_member_expr.proto";
import "mojo/lang/integer_literal_expr.proto";
import "mojo/lang/literal_expr.proto";
import "mojo/lang/null_literal_expr.proto";
import "mojo/lang/operator.proto";
import "mojo/lang/parenthesized_expr.proto";
import "mojo/lang/pattern.proto";
import "mojo/lang/position.proto";
import "mojo/lang/stmt.proto";
import "mojo/lang/string_literal_expr.proto";
import "mojo/lang/struct_construction_expr.proto";
import "mojo/lang/type_casting_expr.proto";
import "mojo/lang/wildcard_expr.proto";

option go_package = "github.com/mojo-lang/lang/go/pkg/mojo/lang;lang";
option java_multiple_files = true;
option java_outer_classname = "LangProto";
option java_package = "org.mojolang.mojo.lang";

message ApplyExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
}

message Argument {
    Position start_position = 1;
    Position end_position = 2;
    string label = 10;
    Expression value = 11;
}

message ArrayLiteralExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    repeated Expression elements = 15;
}

message AssignmentExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    Operator operator = 15;
    Expression left_hand_argument = 16;
    Expression right_hand_argument = 17;
}

message Attribute {
    Position start_position = 1;
    Position end_position = 2;
    string package_name = 5;
    bool implicit = 7;
    string name = 10;
    AttributeDecl declaration = 11;
    repeated NominalType generic_arguments = 12;
    repeated Argument arguments = 13;
    Expression value = 20;
}

message AttributeDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    string full_name = 11;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    GroupDecl group = 15;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
    oneof type {
        NominalType nominal_type = 20;
        StructType struct_type = 21;
    }
    Expression initial_value = 22;
}

message BinaryExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    Operator operator = 15;
    Expression left_hand_argument = 16;
    Expression right_hand_argument = 17;
}

message BlockStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    repeated Statement statements = 10;
}

message ClosureExpr {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    string full_name = 11;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    FunctionDecl.Signature signature = 20;
    BlockStmt body = 21;
    Scope scope = 30;
    repeated string captures = 40;
}

message ConditionalExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression condition = 10;
    Expression then_branch = 11;
    Expression else_branch = 12;
}

message ConstantDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    GroupDecl group = 15;
    NominalType type = 20;
    Expression initial_value = 22;
}

message ConstructorDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    string full_name = 11;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    FunctionDecl.Signature signature = 20;
    BlockStmt body = 21;
    Scope scope = 30;
}

message Declaration {
    oneof declaration {
        PackageDecl package_decl = 1;
        ImportDecl import_decl = 2;
        EnumDecl enum_decl = 3;
        StructDecl struct_decl = 4;
        TypeAliasDecl type_alias_decl = 5;
        InterfaceDecl interface_decl = 6;
        ConstantDecl constant_decl = 10;
        VariableDecl variable_decl = 11;
        AttributeDecl attribute_decl = 12;
        FunctionDecl function_decl = 13;
        ConstructorDecl constructor_decl = 14;
        GenericParameter generic_parameter = 19;
        GroupDecl group_decl = 20;
    }
}

message MapLiteralExpr {
    
    message Entry {
        string key = 1;
        Expression value = 2;
        bool numeric = 3;
    }
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    repeated Entry entries = 15;
}

message EntityEdge {
    string id = 1;
    string name = 2;
    bool implicit = 3;
    EntityNode from = 5;
    EntityNode to = 6;
    bool inverse = 10;
    bool multiple = 11;
}

message EntityEdges {
    repeated EntityEdge vals = 1;
}

message EntityNode {
    string name = 1;
    TypeDeclaration type_declaration = 2;
    ValueDecl key_field = 5;
}

message EntityRelationship {
    map<string, EntityNode> nodes = 1;
    map<string, EntityEdge> edges = 2;
    map<string, EntityEdges> node_from_edges = 10;
    map<string, EntityEdges> node_to_edges = 11;
}

message EnumDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    GroupDecl group = 15;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
    EnumType type = 20;
    Scope scope = 30;
}

message EnumType {
    Position start_position = 1;
    Position end_position = 2;
    repeated ValueDecl enumerators = 10;
    NominalType underlying_type = 11;
}

message ExplicitMemberExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    string member = 20;
}

message Expression {
    oneof expression {
        NullLiteralExpr null_literal_expr = 1;
        IntegerLiteralExpr integer_literal_expr = 2;
        FloatLiteralExpr float_literal_expr = 3;
        BoolLiteralExpr bool_literal_expr = 4;
        StringLiteralExpr string_literal_expr = 5;
        ObjectLiteralExpr object_literal_expr = 6;
        ArrayLiteralExpr array_literal_expr = 7;
        MapLiteralExpr map_literal_expr = 8;
        IdentifierExpr identifier_expr = 10;
        NumericLiteralUnaryExpr numeric_literal_unary_expr = 11;
        StringLiteralUnaryExpr string_literal_unary_expr = 12;
        StructLiteralExpr struct_literal_expr = 13;
        ClosureExpr closure_expr = 14;
        ParenthesizedExpr parenthesized_expr = 15;
        ImplicitMemberExpr implicit_member_expr = 16;
        WildcardExpr wildcard_expr = 17;
        StructConstructionExpr struct_construction_expr = 18;
        TupleExpr tuple_expr = 19;
        PrefixUnaryExpr prefix_unary_expr = 30;
        PostfixUnaryExpr postfix_unary_expr = 31;
        FunctionCallExpr function_call_expr = 32;
        ExplicitMemberExpr explicit_member_expr = 33;
        SubscriptExpr subscript_expr = 34;
        BinaryExpr binary_expr = 40;
        ConditionalExpr conditional_expr = 41;
        TypeCastingExpr type_casting_expr = 42;
        AssignmentExpr assignment_expr = 43;
        ErrorExpr error_expr = 60;
    }
}

message DynamicLookupExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
}

message UnresolvedMemberExpr {
}

message IdentityExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
}

message KeyPathApplicationExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
}

message TupleElementExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
}

message KeyPathExpr {
}

message ForStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    BlockStmt body = 21;
    Expression iterator = 10;
    Expression sequence = 20;
}

message FunctionCallExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    repeated NominalType generic_arguments = 11;
    repeated Argument arguments = 12;
}

message FunctionDecl {
    
    message Signature {
        repeated ValueDecl parameters = 1;
        NominalType result = 2;
    }
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    string full_name = 11;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    FunctionDecl.Signature signature = 20;
    BlockStmt body = 21;
    Scope scope = 30;
}

message GenericParameter {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    GroupDecl group = 15;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
    NominalType constraint = 20;
}

message GroupDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    Identifier.Kind type = 20;
    repeated Declaration declarations = 21;
}

message Identifier {
    
    enum Kind {
        KIND_UNSPECIFIED=0;
        KIND_ENUM=3;
        KIND_STRUCT=4;
        KIND_TYPE_ALIAS=5;
        KIND_INTERFACE=6;
        KIND_CONSTANT=10;
        KIND_VARIABLE=11;
        KIND_ATTRIBUTE=12;
        KIND_FUNCTION=13;
        KIND_GENERIC_PARAMETER=14;
        KIND_TYPE=20;
        KIND_VALUE=21;
    }
    Position start_position = 1;
    Position end_position = 2;
    Kind kind = 3;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    Declaration declaration = 11;
    string alias = 12;
    string full_name = 20;
    repeated string enclosing_type_names = 21;
}

message IdentifierExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Identifier identifier = 10;
    repeated NominalType generic_arguments = 11;
}

message IfStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    Expression condition = 20;
    BlockStmt then_branch = 21;
    oneof else_branch {
        BlockStmt block_stmt = 22;
        IfStmt if_stmt = 23;
    }
}

message ImportDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string import_package_name = 10;
    string import_package_alias = 11;
    repeated Identifier identifiers = 13;
}

message InterfaceDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    GroupDecl group = 15;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
    InterfaceType type = 20;
    repeated TypeAliasDecl type_alias_decls = 21;
    Scope scope = 30;
}

message InterfaceType {
    Position start_position = 1;
    Position end_position = 2;
    repeated FunctionDecl methods = 10;
    repeated NominalType inherits = 11;
}

message LoopStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    BlockStmt body = 21;
}

message MatchCase {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    Pattern pattern = 20;
    oneof body {
        BlockStmt block_stmt = 21;
        Expression expression = 22;
    }
}

message MatchStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    Expression subject = 20;
    MatchCase cases = 22;
}

message NominalType {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string name = 10;
    TypeDeclaration type_declaration = 11;
    repeated NominalType generic_arguments = 12;
    repeated Attribute attributes = 13;
    NominalType enclosing_type = 14;
}

message NumericLiteralUnaryExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    string operator = 15;
    Expression expression = 16;
}

message ObjectLiteralExpr {
    
    message Field {
        string name = 1;
        Expression value = 2;
    }
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    repeated Field fields = 15;
}

message Package {
    
    message Requirement {
        
        message Version {
            
            enum Type {
                TYPE_CARET=0;
                TYPE_TILDE=1;
                TYPE_WILDCARD=2;
                TYPE_COMPARISON=3;
            }
            Type type = 1;
            mojo.core.VersionRange range = 2;
        }
        Version version = 1;
        string registry = 3;
        string path = 4;
        mojo.core.Url repository = 5;
        string branch = 6;
    }
    
    message Author {
        string author = 1;
        string organization = 2;
        mojo.core.EmailAddress email = 3;
    }
    string name = 1;
    string full_name = 2;
    mojo.core.Version version = 3;
    repeated Package children = 6;
    repeated Author authors = 7;
    string summary = 8;
    string description = 10;
    CachedDocument document = 11;
    mojo.core.Url repository = 12;
    string license = 13;
    repeated string exports = 15;
    repeated SourceFile source_files = 16;
    Scope scope = 20;
    bool implicit = 21;
    mojo.core.Object extra_info = 25;
    EntityRelationship entity_relationship = 26;
    map<string, Package.Requirement> dependencies = 30;
    map<string, Package> resolved_dependencies = 31;
}

message PackageDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    ObjectLiteralExpr package_literal_expr = 11;
    Package package = 20;
}

message PostfixUnaryExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    string operator = 15;
    Expression expression = 16;
}

message PrefixUnaryExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    string operator = 15;
    Expression expression = 16;
}

message RepeatStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    BlockStmt body = 21;
    Expression condition = 20;
}

message ReturnStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    Expression result = 10;
}

message Scope {
    map<string, Identifier> identifiers = 1;
    Scope enclosing = 10;
}

message SourceFile {
    string name = 1;
    string full_name = 2;
    mojo.core.Url url = 3;
    repeated Attribute attributes = 4;
    string package_name = 10;
    repeated ImportDecl imports = 11;
    repeated Statement statements = 12;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
    repeated SourceFile dependencies = 21;
    Scope scope = 30;
}

message Statement {
    oneof statement {
        ReturnStmt return_stmt = 1;
        BreakStmt break_stmt = 2;
        ContinueStmt continue_stmt = 3;
        MatchStmt match_stmt = 4;
        IfStmt if_stmt = 5;
        ForStmt for_stmt = 6;
        WhileStmt while_stmt = 7;
        RepeatStmt repeat_stmt = 8;
        BlockStmt block_stmt = 9;
        Declaration declaration = 10;
        Expression expression = 11;
    }
}

message StringLiteralUnaryExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    string operator = 15;
    Expression expression = 16;
}

message StructDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    GroupDecl group = 15;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
    StructType type = 20;
    repeated TypeAliasDecl type_alias_decls = 21;
    repeated EnumDecl enum_decls = 22;
    repeated StructDecl struct_decls = 23;
    Scope scope = 30;
}

message StructLiteralExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
}

message StructType {
    Position start_position = 1;
    Position end_position = 2;
    repeated ValueDecl fields = 10;
    repeated NominalType inherits = 11;
    repeated ValueGroupDecl groups = 12;
}

message SubscriptExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    repeated Argument arguments = 20;
}

message TupleExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    bool has_element_labels = 10;
    repeated Argument elements = 20;
}

message TypeAliasDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    GroupDecl group = 15;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
    NominalType type = 20;
    Scope scope = 30;
}

message TypeDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    repeated GenericParameter generic_parameters = 13;
    NominalType enclosing_type = 14;
    GroupDecl group = 15;
    repeated Identifier resolved_identifiers = 16;
    repeated Identifier unresolved_identifiers = 17;
}

message TypeDeclaration {
    oneof type_declaration {
        EnumDecl enum_decl = 3;
        StructDecl struct_decl = 4;
        TypeAliasDecl type_alias_decl = 5;
        InterfaceDecl interface_decl = 6;
        GenericParameter generic_parameter = 19;
    }
}

message UnaryExpr {
    Position start_position = 1;
    Position end_position = 2;
    int32 kind = 3;
    bool implicit = 4;
    Expression callee = 10;
    string operator = 15;
    Expression expression = 16;
}

message ValueDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    GroupDecl group = 15;
    NominalType type = 20;
    Expression initial_value = 22;
}

message ValueGroupDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    repeated ValueDecl declarations = 15;
}

message VariableDecl {
    Position start_position = 1;
    Position end_position = 2;
    Document document = 4;
    string package_name = 5;
    string source_file_name = 6;
    bool implicit = 7;
    string name = 10;
    repeated Attribute attributes = 12;
    GroupDecl group = 15;
    NominalType type = 20;
    Expression initial_value = 22;
}

message WhileStmt {
    Position start_position = 1;
    Position end_position = 2;
    int64 kind = 3;
    bool implicit = 4;
    BlockStmt body = 21;
    Expression condition = 20;
}
