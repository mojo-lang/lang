syntax = "proto3";

package mojo.lang;

import "mojo/lang/position.proto";

option go_package = "github.com/mojo-lang/lang/go/pkg/lang;lang";

option java_multiple_files = true;
option java_outer_classname = "ExpressionProto";
option java_package = "org.mojolang.mojo.lang";

message Expression {
  oneof expression {
    NullLiteralExpr null_literal_expr = 1;
    BoolLiteralExpr bool_literal_expr = 2;
    IntegerLiteralExpr integer_literal_expr = 3;
    FloatLiteralExpr float_literal_expr = 4;
    StringLiteralExpr string_literal_expr = 5;
    ArrayLiteralExpr array_literal_expr = 6;
    DictionaryLiteralExpr dictionary_literal_expr = 7;
    ObjectLiteralExpr object_literal_expr = 8;
  }
}

/// The 'null' literal.
///
message NullLiteralExpr { //: LiteralExpr
  /// position of first character belonging to the Expr
  Position start_position = 1;

  /// position of first character immediately after the Expr
  Position end_position = 2;

  ///
  int32 kind = 3;

  /// Whether the Expr represents something directly written in source or
  /// it was implicitly generated by the type-checker.
  bool implicit = 4;
}

/// \brief Integer literal with a '+' or '-' sign, like '+4' or '- 2'.
///
/// After semantic analysis assigns types, this is guaranteed to only have
/// a BuiltinIntegerType.
message IntegerLiteralExpr { //: NumericLiteralExpr {
  /// position of first character belonging to the Expr
  Position start_position = 1;

  /// position of first character immediately after the Expr
  Position end_position = 2;

  ///
  int32 kind = 3;

  /// Whether the Expr represents something directly written in source or
  /// it was implicitly generated by the type-checker.
  bool implicit = 4;

  bool is_negative = 9;

  int64 value = 10;
}

/// FloatLiteralExpr - Floating point literal, like '4.0'.  After semantic
/// analysis assigns types, this is guaranteed to only have a
/// BuiltinFloatingPointType.
message FloatLiteralExpr { //: NumberLiteralExpr {
  /// position of first character belonging to the Expr
  Position start_position = 1;

  /// position of first character immediately after the Expr
  Position end_position = 2;

  ///
  int32 kind = 3;

  /// Whether the Expr represents something directly written in source or
  /// it was implicitly generated by the type-checker.
  bool implicit = 4;

  bool is_negative = 9;

  double value = 10;
}

/// A Boolean literal ('true' or 'false')
///
message BoolLiteralExpr { //: LiteralExpr {
  /// position of first character belonging to the Expr
  Position start_position = 1;

  /// position of first character immediately after the Expr
  Position end_position = 2;

  ///
  int32 kind = 3;

  /// Whether the Expr represents something directly written in source or
  /// it was implicitly generated by the type-checker.
  bool implicit = 4;

  bool value = 10;
}

/// StringLiteralExpr - String literal, like '"foo"'.
message StringLiteralExpr { //: LiteralExpr {
  /// position of first character belonging to the Expr
  Position start_position = 1;

  /// position of first character immediately after the Expr
  Position end_position = 2;

  ///
  int32 kind = 3;

  /// Whether the Expr represents something directly written in source or
  /// it was implicitly generated by the type-checker.
  bool implicit = 4;

  string value = 10;
}

/// An array literal expression [a, b, c].
message ArrayLiteralExpr { //: CollectionExpr
  /// position of first character belonging to the Expr
  Position start_position = 1;

  /// position of first character immediately after the Expr
  Position end_position = 2;

  ///
  int32 kind = 3;

  /// Whether the Expr represents something directly written in source or
  /// it was implicitly generated by the type-checker.
  bool implicit = 4;

  map<string, string> value = 10;
}

/// \brief A dictionary literal expression {a : x, b : y, c : z}.
message DictionaryLiteralExpr { // : public CollectionLiteralExpr
  /// position of first character belonging to the Expr
  Position start_position = 1;

  /// position of first character immediately after the Expr
  Position end_position = 2;

  ///
  int32 kind = 3;

  /// Whether the Expr represents something directly written in source or
  /// it was implicitly generated by the type-checker.
  bool implicit = 4;

  map<string, string> value = 10;
}

// ObjectLiteralExpr - An expression of the form
// '{red: 1, blue: 0, green: 0, alpha: 1}' with a name and a list
// argument. The components of the list argument are meant to be themselves
// constant.
message ObjectLiteralExpr {//: LiteralExpr
    /// position of first character belonging to the Expr
    Position start_position = 1;

    /// position of first character immediately after the Expr
    Position end_position = 2;

    ///
    int32 kind = 3;

    /// Whether the Expr represents something directly written in source or
    /// it was implicitly generated by the type-checker.
    bool implicit = 4;
}

/// TupleExpr - Parenthesized expressions like `(a: x+x)` and '(x, y, 4)'.  Also
/// used to represent the operands to a binary operator.  Note that
/// expressions like '(4)' are represented with a ParenExpr.
message TupleExpr {//: Expr {
  /// Whether this tuple has any labels.
  //has_element_names : Bool

  /// Whether this tuple has label locations.
  //has_element_locations : Bool
}

/// DiscardAssignmentExpr - A '_' in the left-hand side of an assignment, which
/// discards the corresponding tuple element on the right-hand side.
// type DiscardAssignmentExpr : Expr


/// MemberRefExpr - This represents 'a.b' where we are referring to a member
/// of a type, such as a property or variable.
///
/// Note that methods found via 'dot' syntax are expressed as DotSyntaxCallExpr
/// nodes, because 'a.f' is actually an application of 'a' (the implicit object
/// argument) to the function 'f'.
message MemberExpr {
    /// position of first character belonging to the Expr
    Position start_position = 1;

    /// position of first character immediately after the Expr
    Position end_position = 2;

    ///
    int32 kind = 3;

    /// Whether the Expr represents something directly written in source or
    /// it was implicitly generated by the type-checker.
    bool implicit = 4;
}
